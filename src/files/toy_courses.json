{
    "COMP_SCI 110": {
        "course_name": "Intro to Computer Programming",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "10-10:50 MWF",
        "fall_instructor": "Van Wart",
        "winter_time": "9-9:50 MWF ",
        "winter_instructor": "Bain",
        "spring_time": "10-10:50 MWF or 9:30 -10:50 TuTh",
        "spring_instructor": "Bain or Kuzmanovic",
        "other": {
            "Prerequisites": "",
            "Description": "<p>Introduction to programming practice using Python. Analysis and formulation of problems for computer solution. Systematic design, construction, and testing of programs. Substantial programming assignments in Python. See professor's website for an updated syllabus.</p>\r\n<p>This introductory programming course is not part of the major. It provides an introduction to programming for those that can benefit from becoming better programmers, but without committing to the major student's version of the course.</p>\r\n<ul>\r\n<li>This course is approved for Weinberg Area II (Formal Studies) distribution credit (NOT for CS Major Requirements)<em><br/></em></li>\r\n</ul>\r\n<strong>REFERENCE TEXTBOOKS:</strong><br/>\r\n<ul>\r\n<li><a href=\"https://www.py4e.com/lessons\">Python for Everyone</a> - By Charles Severance</li>\r\n<li><a href=\"http://openbookproject.net/thinkcs/python/english2e/\">How to Think Like a Computer Scientist</a> - By Jeffrey Elkner, Allen B. Downey, and Chris Meyers</li>\r\n</ul>\r\n<strong>REQUIRED TEXTBOOK:</strong> None\r\n<p><strong>COURSE COORDINATORS:&#160;<span><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/kuzmanovic-aleksandar.html\" target=\"_self\">Aleksandar Kuzmanovic</a></span></strong>&#160;&amp;&#160;<strong><span><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/tumblin-john.html\" rel=\"noopener\" target=\"_blank\">Jack Tumblin</a></span></strong></p>\r\n<p><strong>COURSE INSTRUCTOR : </strong><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/vanwart-sarah.html\">Prof.&#160;Sarah Van Wart</a> (Fall), <a href=\"mailto:connor.bain@northwestern.edu\">Prof. Connor Bain</a> (Winter &amp; Spring) &amp; <a href=\"mailto:akuzma@northwestern.edu\" title=\"Prof. Kuzmanovic\">Prof. Kuzmanovic</a> (Spring)<span></span></p>\r\n<p><strong>COURSE GOALS<br/></strong></p>\r\n<p>This course is an introduction to computer programming using Python, and assumes no prior programming knowledge.&#160;</p>\r\n<p>Most people who need to write computer programs are not computer scientists, but rather people who occupy a range of professions (journalists, geographers, sociologists, scientists, artists, musicians, entrepreneurs, researchers, etc.), and who use various programming languages to accomplish diverse and specialized goals. Moreover, as data and computing increasingly mediate modern life, knowing a bit about the mechanisms (and risks) that underlie these systems is a valuable modern literacy that is likely to serve you well.</p>\r\n<p>The intent of the course is twofold. <br/>First, we want you to gain a sense of the many different kinds of problem-solving and creative pursuits that programming can support.&#160; Programming can act as a representational medium, a tool for thinking about problems, a way of amplifying and/or communicating ideas, a means of performing complex calculations over massive datasets, and much more.&#160;</p>\r\n<p>Second, we want you learn fundamental constructs of computer programming along with skills and strategies to apply them in creative and useful ways. Towards this end, there will be quite a few practice problems to get you familiar with &#8216;the basics,&#8217; as well as longer, open-ended programming projects that encourage you to marshal these ideas towards your own creative applications. These applications may include authoring electronic dance music, animations, games, and/or simple apps that interact with data and media from various sources (e.g. Yelp, Spotify, Twitter, various databases, etc.).</p>\r\n<p>By the end of this course, you will have some experience writing programs, working with the command line, working with different kinds of data, and participating in several important programming practices (e.g. debugging, testing, and designing programs; reading technical documentation and sample code; installing and exploring third-party modules and APIs). Our hope is that this course will help you to see how your goals and knowledge might be supported via computing, while helping you to develop the proficiency and confidence needed to actualize these goals.</p>\r\n<p><strong>PREREQUISITES:&#160;</strong>None.&#160;<span>We assume&#160;<em>no</em>&#160;knowledge of programming or computing.</span></p>"
        },
        "Prereqs": []
    },
    "COMP_SCI 111": {
        "course_name": "Fundamentals of Computer Programming I",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "1-1:50 MWF",
        "fall_instructor": "Horswill & Bain",
        "winter_time": "11-11:50 MWF",
        "winter_instructor": "Sood",
        "spring_time": "1-1:50 MWF",
        "spring_instructor": "Sood",
        "other": {
            "Prerequisites": "None",
            "Description": "<p>This is an introductory course on the fundamentals of computer programming. I see this class as an opportunity for you, the student, to see what computer programming is all about and (more importantly) to see whether you want to spend the next few years doing more of it. This course will include weekly programming projects, readings, a midterm, and final examinations. Class participation is not optional.</p>\r\n<ul>\r\n<li><em>This course is approved for Weinberg Area II (Formal Studies) distribution credit</em></li>\r\n<li><em>This course is a required Core course in the CS curriculum in McCormick and Weinberg</em></li>\r\n<li><em>Can be taken as ELEC_ENG/COMP_ENG 395 during Fall 16'</em></li>\r\n</ul>\r\n<p><strong>REQUIRED TEXTBOOK <em>Optional</em></strong>: <strong>(Fall/Winter)</strong> Abelson, Sussman, and Sussman, <em><strong><a href=\"https://mitpress.mit.edu/books/structure-and-interpretation-computer-programs-second-edition\" rel=\"noopener noreferrer\" target=\"_blank\">Structure and Interpretation of Computer Programs</a></strong></em>, MIT Press, Second Edition (1996)</p>\r\n<p><strong>(Spring) </strong>Felleisen, Findler, Flatt, and Krishnamurthi, <strong><a href=\"https://www.htdp.org/2018-01-06/Book/\"><em>How to Design Programs, Second Edition</em></a></strong>, MIT Press (2014)<strong>.<br/></strong></p>\r\n<p><strong>COURSE INSTRUCTOR: <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/horswill-ian.html\" target=\"_self\">Ian Horswill</a></strong> & <strong><a href=\"mailto:connor.bain@northwestern.edu\">Connor Bain</a></strong> <strong>(Fall), <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/sood-owsley-sara.html\" target=\"_self\">Sara Owsley Sood</a> (Winter, Spring)<br/> </strong></p>\r\n<p><strong>COURSE COORDINATOR: <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/horswill-ian.html\" target=\"_self\">Ian Horswill</a></strong></p>\r\n<p><strong>GRADES: </strong><strong>(Fall/Winter)</strong></p>\r\n<ul>\r\n<li>45% About eight (weekly) homework assignments</li>\r\n<li>20% One midterm exam</li>\r\n<li>35% One final exam</li>\r\n</ul>\r\n<p><strong>(Spring)</strong></p>\r\n<ul>\r\n<li>30% Ten weekly homework assignments</li>\r\n<li>60% Two midterm exams (30% each)</li>\r\n<li>10% Daily quizzes</li>\r\n</ul>\r\n<p><strong><span>Please Note:</span> Fall ELEC_ENG/COMP_ENG 395 Section (Honors) </strong>meets Friday's 4-5pm, in addition to Monday's, Wednesday's, & Friday's 12:00-12:50 (four days a week plus the discussion section). The honors section is an additional meeting on top of the normal 111 meetings).</p>"
        },
        "Prereqs": []
    },
    "COMP_SCI 130": {
        "course_name": "Tools and Technology of the World Wide Web",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "",
        "winter_instructor": "",
        "spring_time": "4-4:50 MWF",
        "spring_instructor": "Van Wart",
        "other": {
            "Prerequisites": "None",
            "Description": "<p>This course is an introduction to the web, and assumes no prior knowledge. If you feel like you know nothing about coding (as in computer code) or design, but are a little bit curious about the web, then this course for you. If you’ve had quite a bit of experience with coding and design but want to continue developing your skills / portfolio, then this course <i>may</i> be for you, although you may also want to explore additional courses offered in the CS Department (e.g. Intro to Web Development, Agile Programming, Information Visualization, Intro to HCI, etc.). If you are a CS major or minor, please note that this course does not count as a technical elective (though you are certainly still welcome to take it).</p>\r\n<h3>Course Format</h3>\r\n<p>The course format is synchronous: class time will be used to discuss concepts and techniques, ask/answer questions, and work on coding and design activities together.  There will also be weekly discussion sections, where you will work with a member of the teaching staff to complete short assignments. You will be assessed based on (a) weekly homework assignments, and (b) a final project (which can be completed individually or in a group) – where you will create a website of your choosing.</p>\r\n<strong>COURSE INSTRUCTOR: <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/vanwart-sarah.html\">Prof. Sarah Van Wart</a></strong>"
        },
        "Prereqs":[]
    },

    "COMP_SCI 150": {
        "course_name": "Fundamentals of Computer Programming 1.5",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "11-11:50 MWF",
        "fall_instructor": "Compton",
        "winter_time": "11-11:50 MWF",
        "winter_instructor": "Compton",
        "spring_time": "11-11:50 MWF",
        "spring_instructor": "Compton",
        "other": {
            "Prerequisites": "COMP_SCI 110 or COMP_SCI 111 or GEN_ENG 205-1 or GEN_ENG 206-1",
            "Description": "<p>Intended for students who have completed COMP_SCI 111, but don&#8217;t have any other formal Computer Science background. It will provide an introduction to object-oriented programming in Python, preparing students for future courses such as COMP_SCI 211.&#160;</p>\r\n<ul>\r\n<li><strong>Formerly COMP_SCI&#160;295.<br/></strong></li>\r\n<li><strong>Students should NOT take this course if they have completed the AP Computer Science course or have substantial experience programming in languages such as Java, Python or C++.<br/></strong></li>\r\n<li><strong>Students are strongly advised to take CS 150 before CS 211.<br/></strong></li>\r\n</ul>\r\nPlease email <a href=\"mailto:sara.sood@northwestern.edu\">Sara Sood</a> if you wonder if this course is right for you.&#160;<br/>\r\n<p><strong>COURSE INSTRUCTOR:</strong> <a href=\"mailto:katherine.compton@northwestern.edu\">Prof. Katherine E Compton</a> (Fall, Winter &amp; Spring)</p>\r\n<p><strong>PREREQUISITE:&#160;</strong><a href=\"111.html\" target=\"_parent\">COMP_SCI 110 or COMP_SCI 111</a> or GEN_ENG 205-1 or GEN_ENG 206-1</p>"
        },
        "Prereqs": [
            ["COMP_SCI 110", "COMP_SCI 111", "GEN_ENG 205-1", "GEN_ENG 206-1"]
        ]
        
    },
    "COMP_ENG 203": {
        "course_name": "Intro to Computer Engineering",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "MTuWF 11-11:50",
        "fall_instructor": "Joseph",
        "winter_time": "MTuWF 11-11:50",
        "winter_instructor": "C.H. Wu",
        "spring_time": "",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "",
            "Description": "<p>Overview of computer engineering design. Number systems and Boolean algebra. Logic gates. Design of combinational circuits and simplification. Decoders, multiplexers, adders. Sequential logic and flip flops. Introduction to assembly language. Application of concepts to a computer engineering design project.</p>\r\n<p><strong>REQUIRED TEXTS: </strong>McGraw Hill, <em>Introduction to Computing Systems: From bits & gates to C & beyond</em>, Patt & Patel, 2003, Second Edition</p>\r\n<p><strong>REFERENCE TEXTS: </strong>Course handouts.</p>\r\n<p><strong>COURSE INSTRUCTOR:</strong> <strong><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/joseph-russ.html\" target=\"_self\">Prof. Russ Joseph</a></strong>(Fall), <strong><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/wu-haur-chi.html\" target=\"_self\">Prof. Chi-Haur Wu</a></strong> (Winter)</p>\r\n<p><strong>COURSE GOALS: </strong>To provide an introduction to computer engineering concepts, both hardware and software, with emphasis placed on digital logic concepts. Topics include binary number representations, Boolean algebra, simplification methods for combinational circuits, introduction to sequential circuit, introduction to assembly language programming, and networks. This would serve to convince declared computer engineering majors to remain in the field, and to attract students from other majors to join computer engineering. Another goal is to prepare students to take some more advanced courses in each of the fields of computer engineering. The concepts are applied to hands-on laboratory assignments that includes hardware and software designs of a controller to navigate a robot through a given obstacle course.</p>\r\n<p><strong>PRE-REQUISITES: </strong>None</p>\r\n<p><strong>DETAILED COURSE TOPICS:</strong></p>\r\n<p><strong>Week 1</strong>: Introduction to computer engineering topics. Introduction to the basic gates, truth tables and principles of Boolean Algebra. (Reading: Mano & Kime 1.1, 2.1, 2.2 and 2.6[first half]).</p>\r\n<p><strong>Week 2</strong>: Logic minimization using the principles of Boolean Algebra and Karnaugh Maps. (Reading: Mano & Kime 2.3, 2.4, 2.5)</p>\r\n<p><strong>Week 3: </strong>Continuation of logic minimization to produce minimized sum of product and product of sum expression. In addition, methods for converting AND/OR implementations to NAND only implementations and OR/AND implementations to NOR only implementations. (Reading: Mano & Kime 2.6, 2.7, 2.8)</p>\r\n<p><strong>Week 4: </strong>Design of combinational logic circuits. (Reading: Mano & Kime 3.1-3.4) Conversion of number between any two basis, with an emphasis on decimal, binary, octal and hex numbers. The three methods for representing negative numbers, sign magnitude, ones complement and two complement. (Reading: Mano & Kime 1.2, 1.3)</p>\r\n<p><strong>Week 5: </strong>Design of multi-bit adder/subtractor circuit for twos complement numbers, identifying when overflow occurs. Design and use of different routing and selection devices including decoders, encoders, and multiplexers. (Reading: Mano & Kime 4.1-4.6, 5.1-5.6)</p>\r\n<p><strong>Weeks 6: </strong>Introduction to microcontrollers and the relationship to assembly language. (Reading: Course Handout)</p>\r\n<p><strong>Weeks 7: </strong>Introduction to assembly language programming and input/output control of microcontrollers. (Reading: Course Handout)</p>\r\n<p><strong>Week 8: </strong>Introduction to sequential logic, including latches, M/S flip flops and edge triggered flip flops. (Reading: Mano & Kime 6.1-6.6)</p>\r\n<p><strong>Week 9: </strong>Introduction to registers, micro-operations and various counters. (Reading: Mano & Kime 7.1-7.9)</p>\r\n<p><strong>Week 10: </strong>Introduction to Memory (Reading: Mano & Kime 3.6 and 9.1-9.6)</p>\r\n<p><strong>COMPUTER USAGE: </strong>Laboratory assignments relating to the assembly language programming of the microcontroller used to navigate a robot through a given obstacle course.</p>\r\n<p><strong>LABORATORY PROJECTS: </strong>Students get hand-on experience with the following: designing digital circuits based upon a word-problem specifications, designing a combinational logic circuit to navigate a robot, and assembly language programming of a microcontroller to navigate a robot.</p>\r\n<p>Each student is given a lab kit during the first week of class; this kit contains a breadboard, power supply, digital logic probe, tweezers for handling the wires, LEDs, resistors and TTL chips.</p>\r\n<p>Students also have access to numerous robots for the robot controller laboratory assignments. Each week, students are given a laboratory assignment that entails a design using concepts discussed in class the previous week. The laboratory assignments are designed to allow for the completion of a homework on a given concept prior to using the concept in the design. Every week, each student demonstrates his/her working design to the course TA. The specific design projects are given below.</p>\r\n<p><strong>Lab 1: </strong>Introduction to the lab kits. Students become familiar with the components in the lab kit by implementing two simple circuits. (Due week 3)</p>\r\n<p><strong>Lab 2: </strong>Design a simple combinational circuit based upon a given word problem. (Due week 4)</p>\r\n<p><strong>Lab 3: </strong>Design a complex combinational circuit, requiring the use of K-maps for logic minimization. Again a word problem is given. (Due week 5)</p>\r\n<p><strong>Lab 4: </strong>Design of an arithmetic circuit. (Due week 6)</p>\r\n<p><strong>Lab 5: </strong>Assembly language programming of a microcontroller to perform a very simple task. (Due week 8)</p>\r\n<p><strong>Lab 6: </strong>Assembly language programming of the microcontroller to navigate the same robot, used in lab 4, through a more complex obstacle course. (Due week 10)</p>\r\n<p><strong>GRADES:</strong></p>\r\n<p>Homeworks – 15%</p>\r\n<p>Labs - 25%</p>\r\n<p>Midterm - 30%</p>\r\n<p>Final - 30%</p>\r\n<p><strong>COURSE OBJECTIVES: </strong>When a student completes this course, s/he should be able to:</p>\r\n<p>1. Have an understanding of the field of computer engineering and an awareness of the various topics related to this field. This would serve to convince declared computer engineering majors to remain in the field, and to attract students from other majors to join computer engineering.</p>\r\n<p>2. Use Boolean algebra or K-maps to simplify complex boolean expressions.</p>\r\n<p>3. Convert numbers between any two number systems, especially decimal, binary, octal and hex and represent sign numbers.</p>\r\n<p>4. Design arithmetic circuits to perform addition and subtraction of signed numbers and detect overflow conditions.</p>\r\n<p>5. Implement functions using AND/OR gates, OR/AND gates, NORs only, NANDs only, multiplexers or decoders.</p>\r\n<p>6. Design the basic flip flops using sequential logic.</p>\r\n<p>7. Go from a word problem to the actual design, implementation and testing of the circuit.</p>\r\n<p>8. Program simple microcontrollers in assembly language.</p>\r\n<p><strong>ABET CONTENT CATEGORY: </strong>25% Math and Basic Science, 75% Engineering (Design component).</p>"
        },
        "Prereqs": []
    },
    "COMP_ENG 205": {
        "course_name": "Fundamentals of Computer System Software",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "MTuWF 2-2:50",
        "winter_instructor": "Joseph",
        "spring_time": "",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "Freshman programming requirement (GTK 205-1, 2, 3, 4). COMP_ENG 203 helpful.",
            "Description": "<div class=\"item-page\">\r\n<p><strong>CATALOG DESCRIPTION: </strong>Basics of assembly language programming. Macros. System stack and procedure calls. Techniques for writing assembly language programs. The features of IA-32 based PC will be used. Interfaces between high-level languages and assembly codes will be discussed.</p>\r\n<p><strong>REQUIRED TEXTS: </strong>Kip R. Irvine, Assembly Language for x86 Processors, 7th edition, Prentice Hall, 2014</p>\r\n<p><strong>REFERENCE TEXTS: </strong>None</p>\r\n<p><strong>COURSE INSTRUCTORS:</strong> <strong><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/joseph-russ.html\" target=\"_self\">Prof. Russ Joseph </a></strong><span>(Winter)</span></p>\r\n<p><strong>COURSE GOALS: </strong>To teach (1) the Intel IA-32 processor architecture and programming, (2) assembly language directives, macros, operators, and program structure, (3) programming methodology, showing how to use assembly language to create both system-level software tools and application programs, and (4) interaction between assembly language programs, the operating system, and other application programs.</p>\r\n<p><strong>PREREQUISITES: </strong>Freshman programming requirement (GTK 205-1, 2, 3, 4). COMP_ENG 203 helpful.</p>\r\n<p><strong>PREREQUISITES BY TOPIC:</strong></p>\r\n<p>1. Fundamental concepts about computers and software</p>\r\n<p>2. Programming concepts of high-level languages</p>\r\n<p>3. Syntax of a language</p>\r\n<p>4. Structured programming</p>\r\n<p><strong>DETAILED COURSE TOPICS</strong></p>\r\n<p><strong>Week 1</strong>: Introduction to assembly languages, data representation in computers</p>\r\n<p><strong>Week 2: </strong>A programmer's view of computer organization, IA-32 processor architecture and memory management, basic elements of assembly language</p>\r\n<p><strong>Week 3: </strong>Data definition and transfer instructions, addressing mode, integer addition and subtraction</p>\r\n<p><strong>Week 4: </strong>Integer multiplication and division, unconditional jump instructions, conditional processing</p>\r\n<p><strong>Week 5: </strong>Linking to external library, stack operations, procedures</p>\r\n<p><strong>Week 6: </strong>Advanced procedures, string primitive instructions, bit manipulation</p>\r\n<p><strong>Week 7: </strong>Structures and macros, conditional assembly, assembly process, instruction encoding</p>\r\n<p><strong>Week 8: </strong>16-bit MS-DOS programming basics, MS-DOS function calls</p>\r\n<p><strong>Week 9: </strong>BIOS-level programming, keyboard processing</p>\r\n<p><strong>Week 10: </strong>Video processing</p>\r\n<p><strong>Week 11</strong>: Disk storage systems, file systems</p>\r\n<p><strong>LABORATORY PROJECTS:</strong></p>\r\n<p>1. Design of an assembly language program with structured programming</p>\r\n<p>2. Design of an assembly language program with advanced procedures</p>\r\n<p>3. Design of an assembly language program for string processing</p>\r\n<p>4. Design of an assembly language program for keyboard processing</p>\r\n<p><strong>GRADES:</strong></p>\r\n<ul>\r\n<li>Homeworks: 30%</li>\r\n<li>Programming Assignments: 50%</li>\r\n<li>Final exam: 20%</li>\r\n</ul>\r\n<p><strong>COURSE OBJECTIVES: </strong>When a student completes this course, s/he should be able to:</p>\r\n<p>1. Understand the difference between real mode and protected mode IA-32 assembly language programming</p>\r\n<p>2. Understand the IA-32 protected-mode addressing memory management schemes including segmentation and paging</p>\r\n<p>3. Program in IA-32 assembly language</p>\r\n<p>4. Write procedures called by high-level languages with IA-32 assembly language</p>\r\n<p><strong>ABET CONTENT CATEGORY: </strong>100% Engineering (Design component)</p>\r\n"
        },
        "Prereqs" : [["GEN_ENG 205-1"], ["COMP_ENG 203"]]
    },

    "COMP_SCI 211": {
        "course_name": "Fundamentals of Computer Programming II",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "12:30-1:50 TuTh",
        "fall_instructor": "Ghena",
        "winter_time": "2-3:20 TuTh",
        "winter_instructor": "Ghena & Bhagavatula",
        "spring_time": "2-3:20 TuTh",
        "spring_instructor": "Bhagavatula",
        "other": {
            "Prerequisites": "COMP_SCI 111 or 150",
            "Description": "<p><strong>CATALOG DESCRIPTION:&#160;</strong> <span>CS 211 teaches foundational software design skills at a small-to-medium scale. We aim to provide a bridge from the student-oriented <em>How to Design Programs</em> languages to real, industry-standard languages and tools. In the first half of the course, you&#8217;ll learn the basics of imperative programming and manual memory management using the C programming language. In the second half of the course, we&#8217;ll transition to C++, which provides abstraction mechanisms such as classes and templates that we use to express our design ideas. Topics include expressions, statements, types, functions, branches and iteration, user-defined types, data hiding, basic UNIX shell usage, and testing.</span></p>\r\n<ul>\r\n<li><strong><em>T</em><em>his course is a required Core course in the CS curriculum in McCormick and Weinberg</em></strong></li>\r\n<li><em><strong>Students are strongly advised to take CS 150 before CS 211.</strong></em></li>\r\n</ul>\r\n<p><strong>REQUIRED TEXTBOOK</strong>: <strong>N/A</strong><span class=\"a-size-base a-color-base\"></span></p>\r\n<p><strong><strong>COURSE INSTRUCTOR: </strong></strong><a href=\"mailto:branden@northwestern.edu\"></a><a href=\"mailto:branden@northwestern.edu\">Branden Ghena</a> &amp; Sruti Bhagavatula (Fall &amp; Winter), Sruti Bhagavatula (Spring).</p>\r\n<p><strong>COURSE COORDINATOR:</strong> <strong><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/sood-owsley-sara.html\" target=\"_self\">Prof. Sara Owsley Sood</a></strong></p>\r\n<p><strong>PREREQUISITE:&#160;<a href=\"111.html\" target=\"_self\">COMP_SCI 111 or 150</a></strong></p>\r\n<p><strong>DETAILED COURSE TOPICS:</strong></p>\r\n<ul>\r\n<li><strong>C/C++</strong>\r\n<ul>\r\n<li>Introduction to software engineering.</li>\r\n<li>Basic data types, variables, computer arithmetic, expressions, parentheses.</li>\r\n<li>Basic I/O &#8211; cout, cin.</li>\r\n<li>Introduction to classes &#8211; defining one's own data types</li>\r\n<li>Flow of control &#8211; sequential, test-and-branch, and iteration. Boolean expressions.</li>\r\n<li>Arrays, pointers, and strings.</li>\r\n<li>Functions: call by value and call by reference, references vs. pointers, stack frames.</li>\r\n<li>Function overloading</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul>\r\n<li><strong>INTRODUCTION TO CLASSES:</strong>\r\n<ul>\r\n<li>Structures and classes, data hiding and encapsulation.</li>\r\n<li>Public and private members, constructors, unions.</li>\r\n<li>Interface vs. implementation.</li>\r\n<li>Class destructors and copy constructors, the = operator, deep versus shallow copies.</li>\r\n<li>C++ operator overloading.</li>\r\n<li>Heap space, the new/delete operators.</li>\r\n<li>Inheritance and derived classes, is-a hierarchies and composition of classes.</li>\r\n<li>Virtual functions and polymorphism.</li>\r\n<li>Linked list processing: stacks and queues, trees and recursion.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul>\r\n<li>Introduction to UNIX &#8211; processes, file management, redirection and piping, make files.</li>\r\n</ul>\r\n<p><strong>GRADES:</strong> Varies by instructor</p>"
        },
        "Prereqs": [
            ["COMP_SCI 111", "COMP_SCI 150"]
        ]
    },

    "COMP_SCI 212": {
        "course_name": "Mathematical Foundations of Computer Science",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "3-3:50 MWF",
        "fall_instructor": "Rao & Bain",
        "winter_time": "4-4:50 MWF ",
        "winter_instructor": "Golub",
        "spring_time": "3-3:50 MWF ",
        "spring_instructor": "Rao",
        "other": {
            "Prerequisites": "(COMP_SCI 110 or COMP_SCI 111) and Math 228-1 or 230-1 (formerly Math 230)",
            "Description": "<p>This course will discuss fundamental concepts and tools in discrete mathematics with emphasis on their applications to computer science. Example topics include logic and Boolean circuits; sets, functions, relations, databases, and finite automata; deterministic algorithms and randomized algorithms; analysis techniques based on counting methods and recurrence equations; trees and more general graphs.</p>\r\n<ul>\r\n<li><em>This course is a required Core course in the CS curriculum in McCormick and Weinberg</em></li>\r\n</ul>\r\n<p><strong>RECOMMENDED TEXTS:</strong></p>\r\n<ul>\r\n<li><strong><strong>Fall &amp; Winter Section:</strong></strong> Mathematics for Computer Science by Lehman, Leighton, and Meyer (e-book: <a href=\"https://courses.csail.mit.edu/6.042/spring18/mcs.pdf\"></a><a href=\"https://courses.csail.mit.edu/6.042/spring18/mcs.pdf\">https://courses.csail.mit.edu/6.042/spring18/mcs.pdf</a><a href=\"https://courses.csail.mit.edu/6.042/spring18/mcs.pdf\"></a>)</li>\r\n</ul>\r\n<p><strong>COURSE INSTRUCTORS:</strong> <a href=\"mailto:shravas@northwestern.edu\" title=\"Prof. Rao\">Prof. Shravas Rao</a> &amp;&#160;<a href=\"mailto:connor.bain@northwestern.edu\">Prof. Connor Bain</a> (Fall &amp; Spring), <a href=\"#\">Prof. Benjamin Golub</a> (Winter),&#160;<a href=\"mailto:wangxiao@northwestern.edu\">Xiao Wang</a> (Honors CS 212, Spring)</p>\r\n<p><strong>COURSE COORDINATOR:</strong> Prof. <span class=\"mail_link\">Aravindan&#160;Vijayaraghavan</span><br/> <br/> <strong>COURSE OBJECTIVES:&#160;</strong>In this course, students should develop mathematical thinking and problem-solving skills associated with writing proofs.&#160; Students should also be exposed to a wide variety of mathematical concepts that are used in the Computer Science discipline, which may include concepts drawn from the areas of Number Theory, Graph Theory, Combinatorics, and Probability.<br/> <br/> <strong>PREREQUISITES: - Must combine one of the following -</strong></p>\r\n<ul>\r\n<li>(<a href=\"110.html\">COMP_SCI 110 </a>or <a href=\"111.html\">COMP_SCI 111</a>) and <a href=\"https://catalogs.northwestern.edu/search/?P=MATH%20230-0\" rel=\"noopener noreferrer\" target=\"_blank\">Math 228-1 or 230-1 (formerly 230)</a><a href=\"349.html\"><br/> </a></li>\r\n</ul>\r\n<p><strong>DETAILED COURSE TOPICS:</strong>&#160;All sections will deal with topics from Part I (Proofs and Mathematical Preliminaries), as well as a selection of topics from Parts II-IV.</p>\r\n<p>Part I:&#160; Proofs, and Mathematical Preliminaries&#160;</p>\r\n<ol>\r\n<li>Introduction to Logic, Proofs.</li>\r\n<li>Principle of Mathematical Induction, Strong Induction.</li>\r\n</ol>\r\n<p>Part II: Counting, Combinatorics, Probability</p>\r\n<ol>\r\n<li>Counting, Mapping, Functions, Bijection, Inclusion-Exclusion formula.</li>\r\n<li>Pigeonhole principle, Generalized Pigeonhole.</li>\r\n<li>Permutations and Combinations. Picking with repetition, without repetition.</li>\r\n<li>Binomial formula, Pascal Triangle, Generating functions.</li>\r\n<li>Introduction to Probability: Random Events, Conditional Probabilities, Independence, Bayes Rule.</li>\r\n<li>Expectation, Linearity of Expectation, Variance of random variables.</li>\r\n<li>Markov's inequality. Chebychev inequality, Union bound.</li>\r\n<li>Sums of random variables, Concentration of measure, Statistical significance.</li>\r\n</ol>\r\n<p>Part III: Graph Theory</p>\r\n<ol>\r\n<li>Introduction to graphs, Properties of graphs.</li>\r\n<li>Connectivity, Connected components, Distances.</li>\r\n<li>Trees, Cycles,&#160; Spanning Trees.&#160;</li>\r\n<li>Planarity, Graph Coloring, Bipartite graphs.</li>\r\n<li>Matchings, Hall's theorem, Stable marriage.</li>\r\n<li>Linear Algebra: Adjacency matrix, Edge-vertex matrix. Relating graph properties. Eigenvalues, Eigenvectors.</li>\r\n<li>Independent set, Vertex cover, Network Flows, Cuts.</li>\r\n<li>Linear Programming, Duality.</li>\r\n</ol>\r\n<p>Part IV: Number Theory &amp; Miscellaneous</p>\r\n<ol>\r\n<li>Prime numbers, Divisibility, GCD algorithm.</li>\r\n<li>Modular arithmetic. Prime numbers. Fundamental theorem of arithmetic.</li>\r\n<li>Cryptography, Computational Complexity.</li>\r\n<li>Turing Machines, Reductions, NP-hardness.&#160;</li>\r\n</ol>\r\n<p><strong>HOMEWORK ASSIGNMENTS:&#160;</strong>Varies by instructor<br/> <br/> <strong>LABORATORY PROJECTS:</strong>&#160;None<br/> <br/> <strong>GRADES:</strong>&#160;Varies by instructor</p>"
        },
        "Prereqs": [
            ["COMP_SCI 110", "COMP_SCI 111"],
            ["Math 228-1", "Math 230-1"]
        ]
    },
    
    "COMP_SCI 213-20": {
        "course_name": "Intro to Computer Systems",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "2-3:20 TuTh",
        "fall_instructor": "Dinda",
        "winter_time": "9:30-10:50 TuTh",
        "winter_instructor": "Ghena",
        "spring_time": "2-3:20 TuTh",
        "spring_instructor": "Hardavellas",
        "other": {
            "Prerequisites": "COMP_SCI 211",
            "Description": "<p>This course has four purposes: (1) to learn about the hierarchy of abstractions and implementations that comprise a modern computer system; (2) to demystify the machine and the tools that we use to program it; (3) to come up to speed on systems programming in C in the Unix environment; (4) to prepare students for upper-level systems courses.</p>\r\n<ul>\r\n<li><em>This course is a <strong>required Core course</strong> in the CS curriculum in McCormick and Weinberg</em></li>\r\n</ul>\r\n<p><strong>COURSE GOALS</strong>: This course has four purposes. First, you will learn about the hierarchy of abstractions and implementations that comprise a modern computer system. This will provide a conceptual framework that you can then flesh out with courses such as compilers, operating systems, databases, networks, security, real-time systems, and others. The second purpose is to demystify the machine and the tools that we use to program it. This includes telling you the little details that students usually have to learn by osmosis. In combination, these two purposes will give you the background to understand many different computer systems. The third purpose is to bring you up to speed in doing systems programming in a low-level language (C) in the Unix (Linux/GCC/GDB/etc) environment. The final purpose is to prepare you for upper-level courses in systems.</p>\r\n<p>This is a learn-by-doing kind of class. You will write pieces of code, compile them, debug them, disassemble them, measure their performance, optimize them, etc.</p>\r\n<p>This course is ideally taken after COMP_SCI 211 early in your academic career. <strong>This is a REQUIRED COURSE for the CS Major.</strong></p>\r\n<p>The current iteration of Prof. Peter Dinda's section is always at <a href=\"http://pdinda.org/ics/\">http://pdinda.org/ics</a></p>\r\n<p><strong>REQUIRED TEXTBOOK</strong>: Randal E. Bryant and David R. O’Hallaron, Computer Systems: A Programmer’s Perspective, Third Edition, Prentice Hall, 2015, (ISBN-13:978-0134092669,ISBN-10:013409266X)</p>\r\n<p><strong>RECOMMENDED TEXTS,</strong> <em>not required</em>:</p>\r\n<ul>\r\n<li>The C Programming Language, Second Edition, Prentice Hall, 1988 (ISBN 0-131-10370-9)(Reference)</li>\r\n<li>Richard Stevens and Stephen Rago, Advanced Programming in the Unix Environment, ThirdEdition, Addison-Wesley, 2013(ISBN-10: 0321637739 | ISBN-13: 978-0321637734) (Reference)</li>\r\n</ul>\r\n<p><strong>COURSE INSTRUCTORS:</strong> <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/dinda-peter.html\" target=\"_self\">Prof. Peter Dinda</a> (Fall), <a href=\"mailto:branden@northwestern.edu\">Prof. Branden Ghena</a><strong>,</strong> (Winter), <a href=\"mailto:nikos@northwestern.edu\">Prof. Nikos Hardavellas</a> (Spring).</p>\r\n<p><strong>COURSE COORDINATOR: </strong><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/dinda-peter.html\" target=\"_self\">Prof. Peter Dinda</a></p>\r\n<p><strong>PREREQUISITES:</strong> <a href=\"211.html\">COMP_SCI 211</a></p>\r\n<p><strong>PREREQUISITE FOR: </strong><a href=\"322.html\">COMP_SCI 322</a> (Compilers), <a href=\"339.html\">ELEC_ENG/COMP_ENG/COMP_SCI 339</a> (Databases), <a href=\"340.html\">COMP_SCI 340</a> (Networking), <a href=\"343.html\">COMP_SCI 343 </a>(Operating Systems), <a href=\"350.html\">COMP_SCI 350</a> (Security), <a href=\"397.html\">COMP_SCI 397</a> (Real-time), <a href=\"441.html\">COMP_SCI 441</a></p>"
        },
        "Prereqs": [
            ["COMP_SCI 211"]
        ]
    },

    "COMP_SCI 214": {
        "course_name": "Data Structures and Algorithms",
        "summer_time": "3:30-4:50 TuTh",
        "summer_instructor": "Rasmussen",
        "fall_time": "9:30-10:50 TuTh",
        "fall_instructor": "St-Amour",
        "winter_time": "11-12:20 TuTh",
        "winter_instructor": "St-Amour",
        "spring_time": "3:30-4:50 TuTh",
        "spring_instructor": "St-Amour & Bhagavatula",
        "other": {
            "Prerequisites": "COMP_SCI 111 and (COMP_SCI 150 or 211)",
            "Description": "<p>The design, implementation, and analysis of abstract data types, data structures and their algorithms. Topics include: data and procedural abstraction, amortized data structures, trees and search trees, hash tables, priority queues, graphs, shortest paths, searching, and sorting. Required for computer science majors.</p>\r\n<ul>\r\n<li><em><i>This course is a required Core course in the CS curriculum in McCormick and Weinberg</i></em></li>\r\n</ul>\r\n<p><strong>REQUIRED TEXTBOOKS</strong>:<em> None</em><em> </em></p>\r\n<p><strong>INSTRUCTORS</strong>: <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/st-amour-vincent.html\">Vincent St-Amour</a> (<strong>Fall, Winter </strong><strong>&amp; Spring</strong>),&#160;<span><a href=\"mailto:srutib@northwestern.edu\">Sruti Bhagavatula</a> (<strong>Spring</strong>),</span>&#160;<a href=\"mailto:leif@rasmussen.com\">Leif Rasmussen</a> (<strong>Summer</strong>)<span></span><span></span></p>\r\n<p><strong>PREREQUISITES:&#160;</strong><a href=\"211.html\">COMP_SCI 111 and (COMP_SCI 150 or 211)</a></p>\r\n<p><strong>DETAILED COURSE TOPICS:</strong></p>\r\n<ul>\r\n<li>Abstract data types</li>\r\n<li>Asymptotic complexity</li>\r\n<li>Lists</li>\r\n<li>Stacks and queues</li>\r\n<li>Dictionaries</li>\r\n<li>Graphs (search, shortest paths, spanning trees)</li>\r\n<li>Priority queues</li>\r\n<li>Disjoint sets</li>\r\n<li>Amortized analysis</li>\r\n<li>Self-adjusting data structures</li>\r\n</ul>\r\n<p><strong>GRADES:</strong> Varies by instructor; see syllabus<strong><br/> </strong></p>"
        },
        "Prereqs": [
            ["COMP_SCI 111"],
            ["COMP_SCI 150", "COMP_SCI 211"]
        ]
    },
    "COMP_SCI 217": {
        "course_name": "Data Management and Information Processing",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "9:30-10:50 TuTh",
        "fall_instructor": "Hu",
        "winter_time": "9:30-10:50 TuTh",
        "winter_instructor": "Hu",
        "spring_time": "9:30-10:50 TuTh",
        "spring_instructor": "Hu",
        "other": {
            "Prerequisites": "COMP_SCI 110 or COMP_SCI 111 or COMP_SCI 211 or COMP_SCI 230 or other programming experience",
            "Description": "<p><span>This course will teach students how to organize and analyze real-world data sets using tools that are most commonly used in the business world.  In particular, students will learn the SQL language for analyzing data in relational databases.  Students will also learn the details of common data encodings (integer, floating point, fixed point, text, date and time), how such data are structured in data files (CSV, JSON, XML), and how to model complex data sets as a series of SQL tables.  In other words, students will learn how to organize large data sets, and to answer questions using that data.  The SQL skills taught in COMP_SCI 217 are essential for “data science” practitioners, especially when working with business data. COMP_SCI 217 is all about data, but not really about statistics, visualization, or programming (except SQL, which will be taught). Homework assignments will use the SQLite database management systems. Some homework needs basic python programming as well.<br/><br/></span>COMP_SCI 217 is different from the COMP_SCI 339 and ELEC_ENG/COMP_ENG 495 “Introduction to Databases” courses that we offer to computer science students in that COMP_SCI 217 does not teach the details of how database management systems are built.  In other words, the students in this class will learn how to use a database system, not how to build it from scratch.Formerly COMP_SCI 317</p>\r\n<ul>\r\n<li>Formerly COMP_SCI 317</li>\r\n<li>NOTE: This course does not count for credit for CS and CE majors (they are expected to take <a href=\"339.html\">COMP_SCI 339</a>) – however, it counts for other majors.</li>\r\n</ul>\r\n<p><strong><strong>COURSE INSTRUCTOR: <a href=\"mailto:huiling.hu@northwestern.edu\"></a></strong></strong><a href=\"mailto:huiling.hu@northwestern.edu\">Prof. Hu</a> (Fall, Winter & Spring)<strong><strong><br/> </strong></strong></p>\r\n<p><strong><strong>COURSE COORDINATOR: <a href=\"/research-faculty/directory/profiles/tarzia-stephen\"></a></strong></strong><a href=\"mailto:huiling.hu@northwestern.edu\">Prof. Hu</a></p>\r\n<p><strong>COURSE OUTLINE:</strong></p>\r\n<ul>\r\n<li><span> </span><span>Bits and bytes: how data is represented in computers</span>\r\n<ul>\r\n<li><span> </span><span>Integers, two’s complement, fixed point</span></li>\r\n<li><span> </span><span>Floating-point numbers</span></li>\r\n<li><span> </span><span>Date, time, and text encodings</span></li>\r\n</ul>\r\n</li>\r\n<li><span> </span><span>Data modeling for relational databases</span>\r\n<ul>\r\n<li><span> </span><span>Primary and foreign keys</span></li>\r\n<li><span> </span><span>Table relationships (many-to-one, many-to-many, and subsets)</span></li>\r\n<li><span> </span><span>Design database model</span></li>\r\n</ul>\r\n</li>\r\n<li><span> </span><span>Structured Query Language (SQL)</span>\r\n<ul>\r\n<li><span> </span><span>Basic SQL statements</span></li>\r\n<li><span> </span><span>JOINs and aggregates</span></li>\r\n<li><span> </span><span>Subqueries and combining selects</span></li>\r\n<li><span> </span><span>Advanced queries</span></li>\r\n</ul>\r\n</li>\r\n<li><span> </span><span>Other Data management approaches</span>\r\n<ul>\r\n<li><span> </span><span>Semi-structured data in JSON and XML files</span></li>\r\n<li><span> </span><span>Using pandas to manipulate messy data</span></li>\r\n<li>NoSQL & Big Data</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p><strong>GRADING:<br/></strong></p>\r\n<ul>\r\n<li><span> </span><span>Homework assignments (60%, 7 assignments)</span></li>\r\n<li><span> </span><span>Exam I (20%)</span></li>\r\n<li>Exam II (20%)</li>\r\n</ul>\r\n<p><strong>COURSE OUTCOMES:</strong> After completing this course, a student should be able to:</p>\r\n<ul>\r\n<li>Draw a data model diagram to represent a complex data set.</li>\r\n<li>Choose appropriate data types to store various data.</li>\r\n<li>Define data integrity constraints using primary, foreign, and unique keys.</li>\r\n<li>Define indexes to optimize the performance of particular queries on a database.</li>\r\n<li>Implement a data model with “CREATE TABLE” commands in the SQL language.</li>\r\n<li>Load data into the database tables from CSV and other data file formats.</li>\r\n<li>Write complex SQL SELECT queries to answer various questions using the database.</li>\r\n</ul>"
        },
        "Prereqs" : [["COMP_SCI 110", "COMP_SCI 111", "COMP_SCI 211", "COMP_SCI 230"]]
    },

    "COMP_SCI 321": {
        "course_name": "Programming Languages",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "3:30-4:50 TuTh",
        "fall_instructor": "St-Amour",
        "winter_time": "3:30-4:50 TuTh",
        "winter_instructor": "Dimoulas",
        "spring_time": "12:30-1:50 TuTh",
        "spring_instructor": "St-Amour",
        "other": {
            "Prerequisites": "CS 111, 211 & 214. Graduate students may be admitted to course with consent. For permission please contact Christopher K Riesbeck at c-riesbeck@northwestern.edu",
            "Description": "<p>This course introduces students to the key features of programming languages. Students implement a series of interpreters that nail down the precise details of how various aspects of programming languages behave.  Students are assumed to understand trees and (mathematical) functions that process them; the course builds up to the features of real programming languages from there.</p>\r\n<em></em><br/>\r\n<p><strong>REQUIRED TEXT:</strong> <a href=\"http://cs.brown.edu/~sk/Publications/Books/ProgLangs/\" rel=\"noopener\" target=\"_blank\"><em>Programming Languages: Application and Interpretation</em></a> by Shriram Krishnamurthi</p>\r\n<p><strong><strong>COURSE INSTRUCTOR:</strong></strong> <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/st-amour-vincent.html\">Prof. Vincent St-Amour</a> (Fall & Spring) & <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/dimoulas-christos.html\">Prof. Christos Dimoulas</a> (Winter)</p>\r\n<p class=\"item-page\"><strong>COURSE COORDINATOR: </strong><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/findler-robert.html\">Prof. Robby Findler</a></p>\r\n<p><strong>COURSE TOPICS:</strong> The course explores these aspects of a programming language (in this order):</p>\r\n<ul>\r\n<li>Modeling programming languages</li>\r\n<li>Arithmetic expressions & variables</li>\r\n<li>Functions</li>\r\n<li>Deferring substitution</li>\r\n<li>First class functions</li>\r\n<li>(implementing) Recursion</li>\r\n<li>State</li>\r\n<li>Control</li>\r\n<li>Garbage collection</li>\r\n<li>Types</li>\r\n</ul>\r\n<p><strong>GRADES:</strong> Grades are based on weekly homework assignments. <br/> <br/> <strong>EXAM:</strong> There is no exam in this course.</p>\r\n<p><strong>COURSE OBJECTIVES:</strong> Students that complete this course should:</p>\r\n<ul>\r\n<li>understand the basic features that underlie most programming languages</li>\r\n<li>understand the basic semantic features of all call-by-value programming languages (which includes nearly all programming languages they will encounter),</li>\r\n<li>understand the pragmatics behind those features (when to use them and why),</li>\r\n<li>understand some of the more advanced features, when they are applicable, and when they are desireable,</li>\r\n<li>be able to maintain and extend an interpreter-based implementation of a programming language containing those features</li>\r\n</ul>"
        },
        "Prereqs": [
            ["COMP_SCI 111"],
            ["COMP_SCI 211"],
            ["COMP_SCI 214"]
        ]
    },

    "COMP_SCI 333": {
        "course_name": "Interactive Information Visualization",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "12:30-1:50 MW",
        "fall_instructor": "Hullman",
        "winter_time": "3:30-4:50 TuTh",
        "winter_instructor": "Kay",
        "spring_time": "",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "COMP_SCI 214",
            "Description": "<p>When well designed, visual displays of data capitalize on human facilities for processing information and improve comprehension, memory, inference, and decision making. Creating visualizations is getting easier thanks to a proliferation of digital tools for transforming and visualizing data. Yet the best visualizations are still often creating by skilled human designers who have considerable experience with design analysis.</p>\r\n<p>In this course we will consider what it means for a visualization to be effective and what sorts of principles, techniques and algorithms from statistics, graphic design, databases, perceptual psychology, cognitive science and related fields can help us create effective visualizations. Though there are different uses of the term “visualization” in popular media, for the purposes of this class, we will treat information visualization as the use of interactive interfaces to visually represent abstract data. The course is targeted both towards students interested in using visualization in their own work, as well as students interested in building better visualization tools and systems.  In addition to participating in class discussions, students will demonstrate their learning through weekly short quizzes and several assignments requiring visualization design, exploratory data analysis, and interactive visualization implementation.</p>\r\n<p>In addition to being comfortable programming, students should have a basic working knowledge of, or willingness to learn, a graphics API. We we will cover introductory D3 in class to get you started, but this is not a JavaScript or web development course. Students will be expected to self-study to learn JavaScript and other basic web technologies (HTML, CSS) if they are not familiar with them.</p>\r\n<ul>\r\n<li><em><strong>Formerly COMP_SCI 396/496</strong>.</em></li>\r\n<li><strong><i>This course satisfies Interface breadth requirement.</i></strong></li>\r\n</ul>\r\n<p><strong>COURSE COORDINATORS: </strong><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/hullman-jessica.html\"></a><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/hullman-jessica.html\">Prof. </a><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/hullman-jessica.html\">Jessica Hullman</a></p>\r\n<p><strong>COURSE INSTRUCTOR:</strong> <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/hullman-jessica.html\"></a><a href=\"mailto:jhullman@northwestern.edu#Prof.%20Hullman\">Prof. Hullman</a> (Fall), & <a href=\"mailto:mjskay@northwestern.edu\">Prof. Kay</a> (Winter)</p>"
        },
        "Prereqs": [
            ["COMP_SCI 214"]
        ]
    },
    
    "COMP_SCI 336": {
        "course_name": "Design & Analysis of Algorithms",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "11-12:20 TuTh & 5-6:20 MW",
        "fall_instructor": "Makarychev & Stull",
        "winter_time": "9:30-10:50 TuTh",
        "winter_instructor": "Hartline",
        "spring_time": "3:30-4:50 TuTh",
        "spring_instructor": "Stull",
        "other": {
            "Prerequisites": "COMP_SCI 212 and COMP_SCI 214 or Graduate (MS or Ph.D) student standing",
            "Description": "<p>Algorithm design and analysis is fundamental to all areas of computer science and gives a rigorous framework for the study optimization. This course provides an introduction to algorithm design through a survey of the common algorithm design paradigms of greedy optimization, divide and conquer, dynamic programming, network flows, reductions, and randomized algorithms. Important themes that will be developed in the course include the algorithmic abstraction-design-analysis process and computational tractability (e.g., NP-completeness).</p>\r\n<ul>\r\n<li><em>This course fulfills the Theory Breadth & Technical Elective requirement.</em></li>\r\n</ul>\r\n<p><strong>REQUIRED TEXT: <em>'</em></strong><em>Algorithm Design by Kleinberg'</em>, Jon, Tardos, Éva [Addison-Wesley, 2005] (Hardcover) by Kleinberg<strong><br/> </strong></p>\r\n<p><strong>COURSE INSTRUCTOR:</strong> <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/makarychev-konstantin.html\">Prof. Konstantin Makarychev</a> & <a href=\"mailto:donald.stull@northwestern.edu\">Prof. Donald Stull</a> (Fall) & <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/hartline-jason.html\">Prof. Jason Hartline</a> (Winter)</p>\r\n<p><strong>COURSE COORDINATOR: </strong><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/hartline-jason.html\">Prof. Jason Hartline</a><a href=\"http://www.mccormick.northwestern.edu/research-faculty/directory/profiles/hartline-jason.html\"></a></p>\r\n<p><strong>HOMEWORK ASSIGNMENTS:</strong></p>\r\n<p><strong>GRADES:</strong></p>"
        },
        "Prereqs": [
            ["COMP_SCI 212"],
            ["COMP_SCI 214"]
        ]
    },

    "COMP_SCI 348": {
        "course_name": "Intro to Artificial Intelligence",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "12:30-1:50 MW",
        "fall_instructor": "Alam",
        "winter_time": "11-11:50 MWF",
        "winter_instructor": "Alam",
        "spring_time": "2-3:20 TuTh",
        "spring_instructor": "Rubenstein",
        "other": {
            "Prerequisites": "Students must have taken [EECS 111 and (EECS 214 or be a CogSci major)] or be a Computer Science Masters or PhD student, or obtain instructor permission, in order to register for this course.",
            "Description": "<p>Core techniques and applications of artificial intelligence. Representation retrieving and application of knowledge for problem solving, planning, probabilistic inference, and natural language understanding.<span></span></p>\r\n<ul>\r\n<li><em>This course satisfies the AI Breadth Requirement.</em></li>\r\n</ul>\r\n<p><strong>OPTIONAL TEXTBOOK</strong>: Russell & Norvig <em>, Artificial Intelligence: A Modern Approach </em>, Prentice Hall, 3rd edition</p>\r\n<p><strong>COURSE</strong> <strong>INSTRUCTOR:</strong> <a href=\"mailto:mohammedalam2009@u.northwestern.edu\">Mohammed A. Alam</a> (Fall & Winter) & <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/rubenstein-michael.html\" rel=\"noopener\" target=\"_blank\">Prof. Rubenstein</a> (Spring)<br/><strong>COURSE COORDINATOR:</strong> <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/hammond-kristian.html\">Prof</a><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/hammond-kristian.html\">. Kristian Hammond</a></p>\r\n<p><strong>COURSE GOALS: </strong>The goal of this course is to expose students to the basic ideas, challenges, techniques, and problems in artificial intelligence. Topics include strong (knowledge-based) and weak (search-based) methods for problem solving and inference, and alternative models of knowledge and learning, including symbolic, statistical and neural networks.</p>\r\n<p><strong>DETAILED COURSE TOPICS:</strong></p>\r\n<ul>\r\n<li>Philosophical foundations of artificial intelligence</li>\r\n<li>Intelligent agents</li>\r\n<li>Search, including A*, iterative deepening</li>\r\n<li>Logical formalisms, propositional and first order predicate calculus</li>\r\n<li>Planning, from STRIPS to Partial Order Planning</li>\r\n<li>Probability & uncertainty, including Bayesian inference and Bayes networks</li>\r\n<li>Machine learning, including decision trees, neural nets, hill climbing, genetic algorithms</li>\r\n</ul>\r\n<p><strong>COURSE OBJECTIVES: </strong>After this course, students should be able to</p>\r\n<ul>\r\n<li>Articulate key problems, both technical and philosophical, in the development of artificial intelligence</li>\r\n<li>Teach themselves more about AI through reading texts and research articles in the field</li>\r\n<li>Apply AI techniques in the development of problem-solving and learning systems</li>\r\n</ul>"
        },
        "Prereqs": [
            ["COMP_SCI 111"],
            ["COMP_SCI 214"]
        ]
    }
}

