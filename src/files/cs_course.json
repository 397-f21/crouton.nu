{
    "110": {
        "course_name": "Intro to Computer Programming",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "10-10:50 MWF",
        "fall_instructor": "Van Wart",
        "winter_time": "9-9:50 MWF ",
        "winter_instructor": "Bain",
        "spring_time": "10-10:50 MWF or 9:30 -10:50 TuTh",
        "spring_instructor": "Bain or Kuzmanovic",
        "other": {
            "Prerequisites": "",
            "Description": "<p>Introduction to programming practice using Python. Analysis and formulation of problems for computer solution. Systematic design, construction, and testing of programs. Substantial programming assignments in Python. See professor's website for an updated syllabus.</p>\r\n<p>This introductory programming course is not part of the major. It provides an introduction to programming for those that can benefit from becoming better programmers, but without committing to the major student's version of the course.</p>\r\n<ul>\r\n<li>This course is approved for Weinberg Area II (Formal Studies) distribution credit (NOT for CS Major Requirements)<em><br/></em></li>\r\n</ul>\r\n<strong>REFERENCE TEXTBOOKS:</strong><br/>\r\n<ul>\r\n<li><a href=\"https://www.py4e.com/lessons\">Python for Everyone</a> - By Charles Severance</li>\r\n<li><a href=\"http://openbookproject.net/thinkcs/python/english2e/\">How to Think Like a Computer Scientist</a> - By Jeffrey Elkner, Allen B. Downey, and Chris Meyers</li>\r\n</ul>\r\n<strong>REQUIRED TEXTBOOK:</strong> None\r\n<p><strong>COURSE COORDINATORS:&#160;<span><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/kuzmanovic-aleksandar.html\" target=\"_self\">Aleksandar Kuzmanovic</a></span></strong>&#160;&amp;&#160;<strong><span><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/tumblin-john.html\" rel=\"noopener\" target=\"_blank\">Jack Tumblin</a></span></strong></p>\r\n<p><strong>COURSE INSTRUCTOR : </strong><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/vanwart-sarah.html\">Prof.&#160;Sarah Van Wart</a> (Fall), <a href=\"mailto:connor.bain@northwestern.edu\">Prof. Connor Bain</a> (Winter &amp; Spring) &amp; <a href=\"mailto:akuzma@northwestern.edu\" title=\"Prof. Kuzmanovic\">Prof. Kuzmanovic</a> (Spring)<span></span></p>\r\n<p><strong>COURSE GOALS<br/></strong></p>\r\n<p>This course is an introduction to computer programming using Python, and assumes no prior programming knowledge.&#160;</p>\r\n<p>Most people who need to write computer programs are not computer scientists, but rather people who occupy a range of professions (journalists, geographers, sociologists, scientists, artists, musicians, entrepreneurs, researchers, etc.), and who use various programming languages to accomplish diverse and specialized goals. Moreover, as data and computing increasingly mediate modern life, knowing a bit about the mechanisms (and risks) that underlie these systems is a valuable modern literacy that is likely to serve you well.</p>\r\n<p>The intent of the course is twofold. <br/>First, we want you to gain a sense of the many different kinds of problem-solving and creative pursuits that programming can support.&#160; Programming can act as a representational medium, a tool for thinking about problems, a way of amplifying and/or communicating ideas, a means of performing complex calculations over massive datasets, and much more.&#160;</p>\r\n<p>Second, we want you learn fundamental constructs of computer programming along with skills and strategies to apply them in creative and useful ways. Towards this end, there will be quite a few practice problems to get you familiar with &#8216;the basics,&#8217; as well as longer, open-ended programming projects that encourage you to marshal these ideas towards your own creative applications. These applications may include authoring electronic dance music, animations, games, and/or simple apps that interact with data and media from various sources (e.g. Yelp, Spotify, Twitter, various databases, etc.).</p>\r\n<p>By the end of this course, you will have some experience writing programs, working with the command line, working with different kinds of data, and participating in several important programming practices (e.g. debugging, testing, and designing programs; reading technical documentation and sample code; installing and exploring third-party modules and APIs). Our hope is that this course will help you to see how your goals and knowledge might be supported via computing, while helping you to develop the proficiency and confidence needed to actualize these goals.</p>\r\n<p><strong>PREREQUISITES:&#160;</strong>None.&#160;<span>We assume&#160;<em>no</em>&#160;knowledge of programming or computing.</span></p>"
        }
    },
    "111": {
        "course_name": "Fundamentals of Computer Programming I",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "1-1:50 MWF",
        "fall_instructor": "Horswill & Bain",
        "winter_time": "11-11:50 MWF",
        "winter_instructor": "Sood",
        "spring_time": "1-1:50 MWF",
        "spring_instructor": "Sood",
        "other": {
            "Prerequisites": "None",
            "Description": "<p>This is an introductory course on the fundamentals of computer programming. I see this class as an opportunity for you, the student, to see what computer programming is all about and (more importantly) to see whether you want to spend the next few years doing more of it. This course will include weekly programming projects, readings, a midterm, and final examinations. Class participation is not optional.</p>\r\n<ul>\r\n<li><em>This course is approved for Weinberg Area II (Formal Studies) distribution credit</em></li>\r\n<li><em>This course is a required Core course in the CS curriculum in McCormick and Weinberg</em></li>\r\n<li><em>Can be taken as ELEC_ENG/COMP_ENG 395 during Fall 16'</em></li>\r\n</ul>\r\n<p><strong>REQUIRED TEXTBOOK <em>Optional</em></strong>: <strong>(Fall/Winter)</strong> Abelson, Sussman, and Sussman,&#160;<em><strong><a href=\"https://mitpress.mit.edu/books/structure-and-interpretation-computer-programs-second-edition\" rel=\"noopener noreferrer\" target=\"_blank\">Structure and Interpretation of Computer Programs</a></strong></em>, MIT Press,&#160;Second Edition (1996)</p>\r\n<p><strong>(Spring) </strong>Felleisen, Findler, Flatt, and Krishnamurthi,&#160;<strong><a href=\"https://www.htdp.org/2018-01-06/Book/\"><em>How to Design Programs, Second Edition</em></a></strong>, MIT Press (2014)<strong>.<br/></strong></p>\r\n<p><strong>COURSE INSTRUCTOR:&#160;<a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/horswill-ian.html\" target=\"_self\">Ian Horswill</a></strong> &amp; <strong><a href=\"mailto:connor.bain@northwestern.edu\">Connor Bain</a></strong> <strong>(Fall),&#160;<a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/sood-owsley-sara.html\" target=\"_self\">Sara Owsley Sood</a>&#160;(Winter, Spring)<br/> </strong></p>\r\n<p><strong>COURSE COORDINATOR:&#160;<a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/horswill-ian.html\" target=\"_self\">Ian Horswill</a></strong></p>\r\n<p><strong>GRADES: </strong><strong>(Fall/Winter)</strong></p>\r\n<ul>\r\n<li>45% About eight (weekly) homework assignments</li>\r\n<li>20% One midterm exam</li>\r\n<li>35% One final exam</li>\r\n</ul>\r\n<p><strong>(Spring)</strong></p>\r\n<ul>\r\n<li>30% Ten weekly homework assignments</li>\r\n<li>60% Two midterm exams (30% each)</li>\r\n<li>10% Daily quizzes</li>\r\n</ul>\r\n<p><strong><span>Please Note:</span>&#160;Fall&#160;ELEC_ENG/COMP_ENG 395 Section (Honors)&#160;</strong>meets Friday's 4-5pm, in addition to Monday's, Wednesday's, &amp; Friday's 12:00-12:50 (four days a week plus the discussion section). The honors section is an additional meeting on top of the normal 111 meetings).</p>"
        }
    },
    "130": {
        "course_name": "Tools and Technology of the World Wide Web",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "",
        "winter_instructor": "",
        "spring_time": "4-4:50 MWF",
        "spring_instructor": "Van Wart",
        "other": {
            "Prerequisites": "None",
            "Description": "<p>This course is an introduction to the web, and assumes no prior knowledge. If you feel like you know nothing about coding (as in computer code) or design, but are a little bit curious about the web, then this course for you. If you&#8217;ve had quite a bit of experience with coding and design but want to continue developing your skills / portfolio, then this course <i>may</i> be for you, although you may also want to explore additional courses offered in the CS Department (e.g. Intro to Web Development, Agile Programming, Information Visualization, Intro to HCI, etc.). If you are a CS major or minor, please note that this course does not count as a technical elective (though you are certainly still welcome to take it).</p>\r\n<h3>Course Format</h3>\r\n<p>The course format is synchronous: class time will be used to discuss concepts and techniques, ask/answer questions, and work on coding and design activities together.&#160; There will also be weekly discussion sections, where you will work with a member of the teaching staff to complete short assignments. You will be assessed based on (a) weekly homework assignments, and (b) a final project (which can be completed individually or in a group) &#8211; where you will create a website of your choosing.</p>\r\n<strong>COURSE INSTRUCTOR: <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/vanwart-sarah.html\">Prof.&#160;Sarah Van Wart</a></strong>"
        }
    },
    "150": {
        "course_name": "Fundamentals of Computer Programming 1.5",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "11-11:50 MWF",
        "fall_instructor": "Compton",
        "winter_time": "11-11:50 MWF",
        "winter_instructor": "Compton",
        "spring_time": "11-11:50 MWF",
        "spring_instructor": "Compton",
        "other": {
            "Prerequisites": "COMP_SCI 110 or COMP_SCI 111 or GEN_ENG 205-1 or GEN_ENG 206-1",
            "Description": "<p>Intended for students who have completed COMP_SCI 111, but don&#8217;t have any other formal Computer Science background. It will provide an introduction to object-oriented programming in Python, preparing students for future courses such as COMP_SCI 211.&#160;</p>\r\n<ul>\r\n<li><strong>Formerly COMP_SCI&#160;295.<br/></strong></li>\r\n<li><strong>Students should NOT take this course if they have completed the AP Computer Science course or have substantial experience programming in languages such as Java, Python or C++.<br/></strong></li>\r\n<li><strong>Students are strongly advised to take CS 150 before CS 211.<br/></strong></li>\r\n</ul>\r\nPlease email <a href=\"mailto:sara.sood@northwestern.edu\">Sara Sood</a> if you wonder if this course is right for you.&#160;<br/>\r\n<p><strong>COURSE INSTRUCTOR:</strong> <a href=\"mailto:katherine.compton@northwestern.edu\">Prof. Katherine E Compton</a> (Fall, Winter &amp; Spring)</p>\r\n<p><strong>PREREQUISITE:&#160;</strong><a href=\"111.html\" target=\"_parent\">COMP_SCI 110 or COMP_SCI 111</a> or GEN_ENG 205-1 or GEN_ENG 206-1</p>"
        }
    },
    "203": {
        "course_name": "Intro to Computer Engineering",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "MTuWF 11-11:50",
        "fall_instructor": "Joseph",
        "winter_time": "MTuWF 11-11:50",
        "winter_instructor": "C.H. Wu",
        "spring_time": "",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "",
            "Description": "<p>Overview of computer engineering design. Number systems and Boolean algebra. Logic gates. Design of combinational circuits and simplification. Decoders, multiplexers, adders. Sequential logic and flip flops. Introduction to assembly language. Application of concepts to a computer engineering design project.</p>\r\n<p><strong>REQUIRED TEXTS:&#160;</strong>McGraw Hill, <em>Introduction to Computing Systems: From bits &amp; gates to C &amp; beyond</em>, Patt &amp; Patel, 2003, Second Edition</p>\r\n<p><strong>REFERENCE TEXTS:&#160;</strong>Course handouts.</p>\r\n<p><strong>COURSE INSTRUCTOR:</strong> <strong><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/joseph-russ.html\" target=\"_self\">Prof. Russ Joseph</a></strong>(Fall),&#160;<strong><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/wu-haur-chi.html\" target=\"_self\">Prof. Chi-Haur Wu</a></strong>&#160;(Winter)</p>\r\n<p><strong>COURSE GOALS:&#160;</strong>To provide an introduction to computer engineering concepts, both hardware and software, with emphasis placed on digital logic concepts. Topics include binary number representations, Boolean algebra, simplification methods for combinational circuits, introduction to sequential circuit, introduction to assembly language programming, and networks. This would serve to convince declared computer engineering majors to remain in the field, and to attract students from other majors to join computer engineering. Another goal is to prepare students to take some more advanced courses in each of the fields of computer engineering. The concepts are applied to hands-on laboratory assignments that includes hardware and software designs of a controller to navigate a robot through a given obstacle course.</p>\r\n<p><strong>PRE-REQUISITES:&#160;</strong>None</p>\r\n<p><strong>DETAILED COURSE TOPICS:</strong></p>\r\n<p><strong>Week 1</strong>: Introduction to computer engineering topics. Introduction to the basic gates, truth tables and principles of Boolean Algebra. (Reading: Mano &amp; Kime 1.1, 2.1, 2.2 and 2.6[first half]).</p>\r\n<p><strong>Week 2</strong>: Logic minimization using the principles of Boolean Algebra and Karnaugh Maps. (Reading: Mano &amp; Kime 2.3, 2.4, 2.5)</p>\r\n<p><strong>Week 3:&#160;</strong>Continuation of logic minimization to produce minimized sum of product and product of sum expression. In addition, methods for converting AND/OR implementations to NAND only implementations and OR/AND implementations to NOR only implementations. (Reading: Mano &amp; Kime 2.6, 2.7, 2.8)</p>\r\n<p><strong>Week 4:&#160;</strong>Design of combinational logic circuits. (Reading: Mano &amp; Kime 3.1-3.4) Conversion of number between any two basis, with an emphasis on decimal, binary, octal and hex numbers. The three methods for representing negative numbers, sign magnitude, ones complement and two complement. (Reading: Mano &amp; Kime 1.2, 1.3)</p>\r\n<p><strong>Week 5:&#160;</strong>Design of multi-bit adder/subtractor circuit for twos complement numbers, identifying when overflow occurs. Design and use of different routing and selection devices including decoders, encoders, and multiplexers. (Reading: Mano &amp; Kime 4.1-4.6, 5.1-5.6)</p>\r\n<p><strong>Weeks 6:&#160;</strong>Introduction to microcontrollers and the relationship to assembly language. (Reading: Course Handout)</p>\r\n<p><strong>Weeks 7:&#160;</strong>Introduction to assembly language programming and input/output control of microcontrollers. (Reading: Course Handout)</p>\r\n<p><strong>Week 8:&#160;</strong>Introduction to sequential logic, including latches, M/S flip flops and edge triggered flip flops. (Reading: Mano &amp; Kime 6.1-6.6)</p>\r\n<p><strong>Week 9:&#160;</strong>Introduction to registers, micro-operations and various counters. (Reading: Mano &amp; Kime 7.1-7.9)</p>\r\n<p><strong>Week 10:&#160;</strong>Introduction to Memory (Reading: Mano &amp; Kime 3.6 and 9.1-9.6)</p>\r\n<p><strong>COMPUTER USAGE:&#160;</strong>Laboratory assignments relating to the assembly language programming of the microcontroller used to navigate a robot through a given obstacle course.</p>\r\n<p><strong>LABORATORY PROJECTS:&#160;</strong>Students get hand-on experience with the following: designing digital circuits based upon a word-problem specifications, designing a combinational logic circuit to navigate a robot, and assembly language programming of a microcontroller to navigate a robot.</p>\r\n<p>Each student is given a lab kit during the first week of class; this kit contains a breadboard, power supply, digital logic probe, tweezers for handling the wires, LEDs, resistors and TTL chips.</p>\r\n<p>Students also have access to numerous robots for the robot controller laboratory assignments. Each week, students are given a laboratory assignment that entails a design using concepts discussed in class the previous week. The laboratory assignments are designed to allow for the completion of a homework on a given concept prior to using the concept in the design. Every week, each student demonstrates his/her working design to the course TA. The specific design projects are given below.</p>\r\n<p><strong>Lab 1:&#160;</strong>Introduction to the lab kits. Students become familiar with the components in the lab kit by implementing two simple circuits. (Due week 3)</p>\r\n<p><strong>Lab 2:&#160;</strong>Design a simple combinational circuit based upon a given word problem. (Due week 4)</p>\r\n<p><strong>Lab 3:&#160;</strong>Design a complex combinational circuit, requiring the use of K-maps for logic minimization. Again a word problem is given. (Due week 5)</p>\r\n<p><strong>Lab 4:&#160;</strong>Design of an arithmetic circuit. (Due week 6)</p>\r\n<p><strong>Lab 5:&#160;</strong>Assembly language programming of a microcontroller to perform a very simple task. (Due week 8)</p>\r\n<p><strong>Lab 6:&#160;</strong>Assembly language programming of the microcontroller to navigate the same robot, used in lab 4, through a more complex obstacle course. (Due week 10)</p>\r\n<p><strong>GRADES:</strong></p>\r\n<p>Homeworks &#8211; 15%</p>\r\n<p>Labs - 25%</p>\r\n<p>Midterm - 30%</p>\r\n<p>Final - 30%</p>\r\n<p><strong>COURSE OBJECTIVES:&#160;</strong>When a student completes this course, s/he should be able to:</p>\r\n<p>1. Have an understanding of the field of computer engineering and an awareness of the various topics related to this field. This would serve to convince declared computer engineering majors to remain in the field, and to attract students from other majors to join computer engineering.</p>\r\n<p>2. Use Boolean algebra or K-maps to simplify complex boolean expressions.</p>\r\n<p>3. Convert numbers between any two number systems, especially decimal, binary, octal and hex and represent sign numbers.</p>\r\n<p>4. Design arithmetic circuits to perform addition and subtraction of signed numbers and detect overflow conditions.</p>\r\n<p>5. Implement functions using AND/OR gates, OR/AND gates, NORs only, NANDs only, multiplexers or decoders.</p>\r\n<p>6. Design the basic flip flops using sequential logic.</p>\r\n<p>7. Go from a word problem to the actual design, implementation and testing of the circuit.</p>\r\n<p>8. Program simple microcontrollers in assembly language.</p>\r\n<p><strong>ABET CONTENT CATEGORY:&#160;</strong>25% Math and Basic Science, 75% Engineering (Design component).</p>"
        }
    },
    "205": {
        "course_name": "Fundamentals of Computer System Software",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "MTuWF 2-2:50",
        "winter_instructor": "Joseph",
        "spring_time": "",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "Freshman programming requirement (GTK 205-1, 2, 3, 4). COMP_ENG 203 helpful.",
            "Description": "<div class=\"item-page\">\r\n<p><strong>CATALOG DESCRIPTION:&#160;</strong>Basics of assembly language programming. Macros. System stack and procedure calls. Techniques for writing assembly language programs. The features of IA-32 based PC will be used. Interfaces between high-level languages and assembly codes will be discussed.</p>\r\n<p><strong>REQUIRED TEXTS:&#160;</strong>Kip R. Irvine, Assembly Language for x86 Processors, 7th edition, Prentice Hall, 2014</p>\r\n<p><strong>REFERENCE TEXTS:&#160;</strong>None</p>\r\n<p><strong>COURSE INSTRUCTORS:</strong> <strong><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/joseph-russ.html\" target=\"_self\">Prof. Russ Joseph&#160;</a></strong><span>(Winter)</span></p>\r\n<p><strong>COURSE GOALS:&#160;</strong>To teach (1) the Intel IA-32 processor architecture and programming, (2) assembly language directives, macros, operators, and program structure, (3) programming methodology, showing how to use assembly language to create both system-level software tools and application programs, and (4) interaction between assembly language programs, the operating system, and other application programs.</p>\r\n<p><strong>PREREQUISITES:&#160;</strong>Freshman programming requirement (GTK 205-1, 2, 3, 4). COMP_ENG 203 helpful.</p>\r\n<p><strong>PREREQUISITES BY TOPIC:</strong></p>\r\n<p>1. Fundamental concepts about computers and software</p>\r\n<p>2. Programming concepts of high-level languages</p>\r\n<p>3. Syntax of a language</p>\r\n<p>4. Structured programming</p>\r\n<p><strong>DETAILED COURSE TOPICS</strong></p>\r\n<p><strong>Week 1</strong>: Introduction to assembly languages, data representation in computers</p>\r\n<p><strong>Week 2:&#160;</strong>A programmer's view of computer organization, IA-32 processor architecture and memory management, basic elements of assembly language</p>\r\n<p><strong>Week 3:&#160;</strong>Data definition and transfer instructions, addressing mode, integer addition and subtraction</p>\r\n<p><strong>Week 4:&#160;</strong>Integer multiplication and division, unconditional jump instructions, conditional processing</p>\r\n<p><strong>Week 5:&#160;</strong>Linking to external library, stack operations, procedures</p>\r\n<p><strong>Week 6:&#160;</strong>Advanced procedures, string primitive instructions, bit manipulation</p>\r\n<p><strong>Week 7:&#160;</strong>Structures and macros, conditional assembly, assembly process, instruction encoding</p>\r\n<p><strong>Week 8:&#160;</strong>16-bit MS-DOS programming basics, MS-DOS function calls</p>\r\n<p><strong>Week 9:&#160;</strong>BIOS-level programming, keyboard processing</p>\r\n<p><strong>Week 10:&#160;</strong>Video processing</p>\r\n<p><strong>Week 11</strong>: Disk storage systems, file systems</p>\r\n<p><strong>LABORATORY PROJECTS:</strong></p>\r\n<p>1. Design of an assembly language program with structured programming</p>\r\n<p>2. Design of an assembly language program with advanced procedures</p>\r\n<p>3. Design of an assembly language program for string processing</p>\r\n<p>4. Design of an assembly language program for keyboard processing</p>\r\n<p><strong>GRADES:</strong></p>\r\n<ul>\r\n<li>Homeworks: 30%</li>\r\n<li>Programming Assignments: 50%</li>\r\n<li>Final exam: 20%</li>\r\n</ul>\r\n<p><strong>COURSE OBJECTIVES:&#160;</strong>When a student completes this course, s/he should be able to:</p>\r\n<p>1. Understand the difference between real mode and protected mode IA-32 assembly language programming</p>\r\n<p>2. Understand the IA-32 protected-mode addressing memory management schemes including segmentation and paging</p>\r\n<p>3. Program in IA-32 assembly language</p>\r\n<p>4. Write procedures called by high-level languages with IA-32 assembly language</p>\r\n<p><strong>ABET CONTENT CATEGORY:&#160;</strong>100% Engineering (Design component)</p>\r\n"
        }
    },
    "211": {
        "course_name": "Fundamentals of Computer Programming II",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "12:30-1:50 TuTh",
        "fall_instructor": "Ghena",
        "winter_time": "2-3:20 TuTh",
        "winter_instructor": "Ghena & Bhagavatula",
        "spring_time": "2-3:20 TuTh",
        "spring_instructor": "Bhagavatula",
        "other": {
            "Prerequisites": "COMP_SCI 111 or 150",
            "Description": "<p><strong>CATALOG DESCRIPTION:&#160;</strong> <span>CS 211 teaches foundational software design skills at a small-to-medium scale. We aim to provide a bridge from the student-oriented <em>How to Design Programs</em> languages to real, industry-standard languages and tools. In the first half of the course, you&#8217;ll learn the basics of imperative programming and manual memory management using the C programming language. In the second half of the course, we&#8217;ll transition to C++, which provides abstraction mechanisms such as classes and templates that we use to express our design ideas. Topics include expressions, statements, types, functions, branches and iteration, user-defined types, data hiding, basic UNIX shell usage, and testing.</span></p>\r\n<ul>\r\n<li><strong><em>T</em><em>his course is a required Core course in the CS curriculum in McCormick and Weinberg</em></strong></li>\r\n<li><em><strong>Students are strongly advised to take CS 150 before CS 211.</strong></em></li>\r\n</ul>\r\n<p><strong>REQUIRED TEXTBOOK</strong>: <strong>N/A</strong><span class=\"a-size-base a-color-base\"></span></p>\r\n<p><strong><strong>COURSE INSTRUCTOR: </strong></strong><a href=\"mailto:branden@northwestern.edu\"></a><a href=\"mailto:branden@northwestern.edu\">Branden Ghena</a> &amp; Sruti Bhagavatula (Fall &amp; Winter), Sruti Bhagavatula (Spring).</p>\r\n<p><strong>COURSE COORDINATOR:</strong> <strong><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/sood-owsley-sara.html\" target=\"_self\">Prof. Sara Owsley Sood</a></strong></p>\r\n<p><strong>PREREQUISITE:&#160;<a href=\"111.html\" target=\"_self\">COMP_SCI 111 or 150</a></strong></p>\r\n<p><strong>DETAILED COURSE TOPICS:</strong></p>\r\n<ul>\r\n<li><strong>C/C++</strong>\r\n<ul>\r\n<li>Introduction to software engineering.</li>\r\n<li>Basic data types, variables, computer arithmetic, expressions, parentheses.</li>\r\n<li>Basic I/O &#8211; cout, cin.</li>\r\n<li>Introduction to classes &#8211; defining one's own data types</li>\r\n<li>Flow of control &#8211; sequential, test-and-branch, and iteration. Boolean expressions.</li>\r\n<li>Arrays, pointers, and strings.</li>\r\n<li>Functions: call by value and call by reference, references vs. pointers, stack frames.</li>\r\n<li>Function overloading</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul>\r\n<li><strong>INTRODUCTION TO CLASSES:</strong>\r\n<ul>\r\n<li>Structures and classes, data hiding and encapsulation.</li>\r\n<li>Public and private members, constructors, unions.</li>\r\n<li>Interface vs. implementation.</li>\r\n<li>Class destructors and copy constructors, the = operator, deep versus shallow copies.</li>\r\n<li>C++ operator overloading.</li>\r\n<li>Heap space, the new/delete operators.</li>\r\n<li>Inheritance and derived classes, is-a hierarchies and composition of classes.</li>\r\n<li>Virtual functions and polymorphism.</li>\r\n<li>Linked list processing: stacks and queues, trees and recursion.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul>\r\n<li>Introduction to UNIX &#8211; processes, file management, redirection and piping, make files.</li>\r\n</ul>\r\n<p><strong>GRADES:</strong> Varies by instructor</p>"
        }
    },
    "212": {
        "course_name": "Mathematical Foundations of Computer Science",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "3-3:50 MWF",
        "fall_instructor": "Rao & Bain",
        "winter_time": "4-4:50 MWF ",
        "winter_instructor": "Golub",
        "spring_time": "3-3:50 MWF ",
        "spring_instructor": "Rao",
        "other": {
            "Prerequisites": "(COMP_SCI 110 or COMP_SCI 111) and Math 228-1 or 230-1 (formerly Math 230)",
            "Description": "<p>This course will discuss fundamental concepts and tools in discrete mathematics with emphasis on their applications to computer science. Example topics include logic and Boolean circuits; sets, functions, relations, databases, and finite automata; deterministic algorithms and randomized algorithms; analysis techniques based on counting methods and recurrence equations; trees and more general graphs.</p>\r\n<ul>\r\n<li><em>This course is a required Core course in the CS curriculum in McCormick and Weinberg</em></li>\r\n</ul>\r\n<p><strong>RECOMMENDED TEXTS:</strong></p>\r\n<ul>\r\n<li><strong><strong>Fall &amp; Winter Section:</strong></strong> Mathematics for Computer Science by Lehman, Leighton, and Meyer (e-book: <a href=\"https://courses.csail.mit.edu/6.042/spring18/mcs.pdf\"></a><a href=\"https://courses.csail.mit.edu/6.042/spring18/mcs.pdf\">https://courses.csail.mit.edu/6.042/spring18/mcs.pdf</a><a href=\"https://courses.csail.mit.edu/6.042/spring18/mcs.pdf\"></a>)</li>\r\n</ul>\r\n<p><strong>COURSE INSTRUCTORS:</strong> <a href=\"mailto:shravas@northwestern.edu\" title=\"Prof. Rao\">Prof. Shravas Rao</a> &amp;&#160;<a href=\"mailto:connor.bain@northwestern.edu\">Prof. Connor Bain</a> (Fall &amp; Spring), <a href=\"#\">Prof. Benjamin Golub</a> (Winter),&#160;<a href=\"mailto:wangxiao@northwestern.edu\">Xiao Wang</a> (Honors CS 212, Spring)</p>\r\n<p><strong>COURSE COORDINATOR:</strong> Prof. <span class=\"mail_link\">Aravindan&#160;Vijayaraghavan</span><br/> <br/> <strong>COURSE OBJECTIVES:&#160;</strong>In this course, students should develop mathematical thinking and problem-solving skills associated with writing proofs.&#160; Students should also be exposed to a wide variety of mathematical concepts that are used in the Computer Science discipline, which may include concepts drawn from the areas of Number Theory, Graph Theory, Combinatorics, and Probability.<br/> <br/> <strong>PREREQUISITES: - Must combine one of the following -</strong></p>\r\n<ul>\r\n<li>(<a href=\"110.html\">COMP_SCI 110 </a>or <a href=\"111.html\">COMP_SCI 111</a>) and <a href=\"https://catalogs.northwestern.edu/search/?P=MATH%20230-0\" rel=\"noopener noreferrer\" target=\"_blank\">Math 228-1 or 230-1 (formerly 230)</a><a href=\"349.html\"><br/> </a></li>\r\n</ul>\r\n<p><strong>DETAILED COURSE TOPICS:</strong>&#160;All sections will deal with topics from Part I (Proofs and Mathematical Preliminaries), as well as a selection of topics from Parts II-IV.</p>\r\n<p>Part I:&#160; Proofs, and Mathematical Preliminaries&#160;</p>\r\n<ol>\r\n<li>Introduction to Logic, Proofs.</li>\r\n<li>Principle of Mathematical Induction, Strong Induction.</li>\r\n</ol>\r\n<p>Part II: Counting, Combinatorics, Probability</p>\r\n<ol>\r\n<li>Counting, Mapping, Functions, Bijection, Inclusion-Exclusion formula.</li>\r\n<li>Pigeonhole principle, Generalized Pigeonhole.</li>\r\n<li>Permutations and Combinations. Picking with repetition, without repetition.</li>\r\n<li>Binomial formula, Pascal Triangle, Generating functions.</li>\r\n<li>Introduction to Probability: Random Events, Conditional Probabilities, Independence, Bayes Rule.</li>\r\n<li>Expectation, Linearity of Expectation, Variance of random variables.</li>\r\n<li>Markov's inequality. Chebychev inequality, Union bound.</li>\r\n<li>Sums of random variables, Concentration of measure, Statistical significance.</li>\r\n</ol>\r\n<p>Part III: Graph Theory</p>\r\n<ol>\r\n<li>Introduction to graphs, Properties of graphs.</li>\r\n<li>Connectivity, Connected components, Distances.</li>\r\n<li>Trees, Cycles,&#160; Spanning Trees.&#160;</li>\r\n<li>Planarity, Graph Coloring, Bipartite graphs.</li>\r\n<li>Matchings, Hall's theorem, Stable marriage.</li>\r\n<li>Linear Algebra: Adjacency matrix, Edge-vertex matrix. Relating graph properties. Eigenvalues, Eigenvectors.</li>\r\n<li>Independent set, Vertex cover, Network Flows, Cuts.</li>\r\n<li>Linear Programming, Duality.</li>\r\n</ol>\r\n<p>Part IV: Number Theory &amp; Miscellaneous</p>\r\n<ol>\r\n<li>Prime numbers, Divisibility, GCD algorithm.</li>\r\n<li>Modular arithmetic. Prime numbers. Fundamental theorem of arithmetic.</li>\r\n<li>Cryptography, Computational Complexity.</li>\r\n<li>Turing Machines, Reductions, NP-hardness.&#160;</li>\r\n</ol>\r\n<p><strong>HOMEWORK ASSIGNMENTS:&#160;</strong>Varies by instructor<br/> <br/> <strong>LABORATORY PROJECTS:</strong>&#160;None<br/> <br/> <strong>GRADES:</strong>&#160;Varies by instructor</p>"
        }
    },
    "214": {
        "course_name": "Data Structures and Algorithms",
        "summer_time": "3:30-4:50 TuTh",
        "summer_instructor": "Rasmussen",
        "fall_time": "9:30-10:50 TuTh",
        "fall_instructor": "St-Amour",
        "winter_time": "11-12:20 TuTh",
        "winter_instructor": "St-Amour",
        "spring_time": "3:30-4:50 TuTh",
        "spring_instructor": "St-Amour & Bhagavatula",
        "other": {
            "Prerequisites": "COMP_SCI 111 and (COMP_SCI 150 or 211)",
            "Description": "<p>The design, implementation, and analysis of abstract data types, data structures and their algorithms. Topics include: data and procedural abstraction, amortized data structures, trees and search trees, hash tables, priority queues, graphs, shortest paths, searching, and sorting. Required for computer science majors.</p>\r\n<ul>\r\n<li><em><i>This course is a required Core course in the CS curriculum in McCormick and Weinberg</i></em></li>\r\n</ul>\r\n<p><strong>REQUIRED TEXTBOOKS</strong>:<em> None</em><em> </em></p>\r\n<p><strong>INSTRUCTORS</strong>: <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/st-amour-vincent.html\">Vincent St-Amour</a> (<strong>Fall, Winter </strong><strong>&amp; Spring</strong>),&#160;<span><a href=\"mailto:srutib@northwestern.edu\">Sruti Bhagavatula</a> (<strong>Spring</strong>),</span>&#160;<a href=\"mailto:leif@rasmussen.com\">Leif Rasmussen</a> (<strong>Summer</strong>)<span></span><span></span></p>\r\n<p><strong>PREREQUISITES:&#160;</strong><a href=\"211.html\">COMP_SCI 111 and (COMP_SCI 150 or 211)</a></p>\r\n<p><strong>DETAILED COURSE TOPICS:</strong></p>\r\n<ul>\r\n<li>Abstract data types</li>\r\n<li>Asymptotic complexity</li>\r\n<li>Lists</li>\r\n<li>Stacks and queues</li>\r\n<li>Dictionaries</li>\r\n<li>Graphs (search, shortest paths, spanning trees)</li>\r\n<li>Priority queues</li>\r\n<li>Disjoint sets</li>\r\n<li>Amortized analysis</li>\r\n<li>Self-adjusting data structures</li>\r\n</ul>\r\n<p><strong>GRADES:</strong> Varies by instructor; see syllabus<strong><br/> </strong></p>"
        }
    },
    "217": {
        "course_name": "Data Management and Information Processing",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "9:30-10:50 TuTh",
        "fall_instructor": "Hu",
        "winter_time": "9:30-10:50 TuTh",
        "winter_instructor": "Hu",
        "spring_time": "9:30-10:50 TuTh",
        "spring_instructor": "Hu",
        "other": {
            "Prerequisites": "COMP_SCI 110 or COMP_SCI 111 or COMP_SCI 211 or COMP_SCI 230 or other programming experience",
            "Description": "<p><span>This course will teach students how to organize and analyze real-world data sets using tools that are most commonly used in the business world.&#160; In particular, students will learn the SQL language for analyzing data in relational databases.&#160; Students will also learn the details of common data encodings (integer, floating point, fixed point, text, date and time), how such data are structured in data files (CSV, JSON, XML), and how to model complex data sets as a series of SQL tables.&#160; In other words, students will learn how to organize large data sets, and to answer questions using that data.&#160; The SQL skills taught in COMP_SCI 217 are essential for &#8220;data science&#8221; practitioners, especially when working with business data. COMP_SCI 217 is all about data, but not really about statistics, visualization, or programming (except SQL, which will be taught). Homework assignments will use the SQLite database management systems. Some homework needs basic python programming as well.<br/><br/></span>COMP_SCI 217 is different from the COMP_SCI 339 and ELEC_ENG/COMP_ENG 495 &#8220;Introduction to Databases&#8221; courses that we offer to computer science students in that COMP_SCI 217 does not teach the details of how database management systems are built.&#160; In other words, the students in this class will learn how to use a database system, not how to build it from scratch.Formerly COMP_SCI 317</p>\r\n<ul>\r\n<li>Formerly COMP_SCI 317</li>\r\n<li>NOTE: This course does not count for credit for CS and CE majors (they are expected to take <a href=\"339.html\">COMP_SCI 339</a>) &#8211; however, it counts for other majors.</li>\r\n</ul>\r\n<p><strong><strong>COURSE INSTRUCTOR: <a href=\"mailto:huiling.hu@northwestern.edu\"></a></strong></strong><a href=\"mailto:huiling.hu@northwestern.edu\">Prof. Hu</a> (Fall, Winter &amp; Spring)<strong><strong><br/> </strong></strong></p>\r\n<p><strong><strong>COURSE COORDINATOR: <a href=\"/research-faculty/directory/profiles/tarzia-stephen\"></a></strong></strong><a href=\"mailto:huiling.hu@northwestern.edu\">Prof. Hu</a></p>\r\n<p><strong>COURSE OUTLINE:</strong></p>\r\n<ul>\r\n<li><span> </span><span>Bits and bytes: how data is represented in computers</span>\r\n<ul>\r\n<li><span> </span><span>Integers, two&#8217;s complement, fixed point</span></li>\r\n<li><span> </span><span>Floating-point numbers</span></li>\r\n<li><span> </span><span>Date, time, and text encodings</span></li>\r\n</ul>\r\n</li>\r\n<li><span> </span><span>Data modeling for relational databases</span>\r\n<ul>\r\n<li><span> </span><span>Primary and foreign keys</span></li>\r\n<li><span> </span><span>Table relationships (many-to-one, many-to-many, and subsets)</span></li>\r\n<li><span> </span><span>Design database model</span></li>\r\n</ul>\r\n</li>\r\n<li><span> </span><span>Structured Query Language (SQL)</span>\r\n<ul>\r\n<li><span> </span><span>Basic SQL statements</span></li>\r\n<li><span> </span><span>JOINs and aggregates</span></li>\r\n<li><span> </span><span>Subqueries and combining selects</span></li>\r\n<li><span> </span><span>Advanced queries</span></li>\r\n</ul>\r\n</li>\r\n<li><span> </span><span>Other Data management approaches</span>\r\n<ul>\r\n<li><span> </span><span>Semi-structured data in JSON and XML files</span></li>\r\n<li><span> </span><span>Using pandas to manipulate messy data</span></li>\r\n<li>NoSQL &amp; Big Data</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p><strong>GRADING:<br/></strong></p>\r\n<ul>\r\n<li><span> </span><span>Homework assignments (60%, 7 assignments)</span></li>\r\n<li><span> </span><span>Exam I (20%)</span></li>\r\n<li>Exam II (20%)</li>\r\n</ul>\r\n<p><strong>COURSE OUTCOMES:</strong> After completing this course, a student should be able to:</p>\r\n<ul>\r\n<li>Draw a data model diagram to represent a complex data set.</li>\r\n<li>Choose appropriate data types to store various data.</li>\r\n<li>Define data integrity constraints using primary, foreign, and unique keys.</li>\r\n<li>Define indexes to optimize the performance of particular queries on a database.</li>\r\n<li>Implement a data model with &#8220;CREATE TABLE&#8221; commands in the SQL language.</li>\r\n<li>Load data into the database tables from CSV and other data file formats.</li>\r\n<li>Write complex SQL SELECT queries to answer various questions using the database.</li>\r\n</ul>"
        }
    },
    "301": {
        "course_name": "Introduction to Robotics Laboratory",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "12:30-3:20 TuTh",
        "winter_instructor": "Argall",
        "spring_time": "",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "Some programming experience (COMP_SCI/EECS 110 or COMP_SCI 111 or COMP_SCI 230), or permission of instructor.",
            "Description": "<p>A laboratory-based introduction to robotics. Focus will be on both hardware (sensors and actuators) and software (sensor processing and behavior development). Topics will include: the basics in kinematics, dynamics, control, and motion planning; and an introduction to Artificial Intelligence (AI) and Machine Learning (ML).&#160;</p>\r\n<ul>\r\n<li><strong><strong>Formerly ELEC_ENG/COMP_ENG/COMP_SCI</strong></strong><strong>&#160;295.</strong></li>\r\n<li><strong><span class=\"_Tgc\"><strong>Cross</strong>-<strong>listed</strong></span> as MECH_ENG 301-0-1</strong></li>\r\n</ul>\r\n<p><strong>REQUIRED TEXT:</strong>&#160;The Robotics Primer, MIT Press 2007, Maja J. Matari&#263;.</p>\r\n<p><strong>COURSE COORDINATOR:</strong>&#160;<a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/argall-brenna.html\">Prof. Brenna Argall</a></p>\r\n<p><strong>DETAILED COURSE TOPICS:</strong>&#160;Open-loop control, with different types of hardware/motion (mobility, manipulation); Closed-loop control and sensor processing, with different types of sensors; Reactive control, behavior-based robotics, reasoning about uncertainty; Basics in AI and ML, with simple learning techniques.</p>\r\n<p><strong>ASSIGNMENTS:</strong>&#160;Coursework will consist primarily of laboratory assignments, that include (some) hardware construction and (more) software development. Laboratory work will be done in groups of 2-3 students. Each lab assignment will be demoed and written up as a report (individually).</p>\r\n<p><strong>COURSE OBJECTIVES:</strong>&#160;At the end of this course students should understand the fundamentals of autonomous robot operation, and be able to program a robot to read from its sensors and perform simple (hard-coded and&#160;learned) tasks.</p>"
        }
    },
    "303": {
        "course_name": "Advanced Digital Design",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "TuTh 12:30-1:50",
        "fall_instructor": "S. Memik",
        "winter_time": "",
        "winter_instructor": "",
        "spring_time": "TuTh 3:30-4:50",
        "spring_instructor": "Gu",
        "other": {
            "Prerequisites": "COMP_SCI 203",
            "Description": "<p>COMP_ENG 303: Advanced Digital Design</p>\r\n<p>Quarter Offered</p>\r\n<p>Fall : TuTh 3:30-4:50 ; S. Memik<br/> Spring : TuTh 3:30-4:50 ; Gu</p>\r\n<p>Prerequisites</p>\r\n<p>COMP_ENG 203</p>\r\n<p>Description</p>\r\n<p>Overview of digital logic design. Implementation technologies, timing in combinational and sequential circuits, EDA tools, basic arithmetic units, introduction to simulation and synthesis using Verilog/VHDL. <em>(This course also fulfills the systems breadth requirement for the Computer Science major.)</em></p>\r\n<p>REQUIRED TEXTBOOK:</p>\r\n<p>John F. Wakerly, Digital Design Principles and Practices, Fifth Edition, with Verilog, Pearson, ISBN-13: 9780134460093</p>\r\n<p>REFERENCE TEXTBOOKS (not required):</p>\r\n<ol>\r\n<li>Morris&#160;Mano and Charles R. Kime, Logic and Computer Design Fundamentals, Pearson/Prentice Hall, latest Edition</li>\r\n<li>Logic Synthesis and Verification Algorithms, Hachtel &amp; Somenzi, Springer</li>\r\n<li>CMOS VLSI Design: A Circuits and Systems Perspective, Weste &amp; Harris, 4th Ed., Addison Wesley&#160;&#160;&#160;</li>\r\n</ol>\r\n<p>COURSE INSTRUCTOR:&#160;<a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/memik-ogrenci-seda.html\">Prof. Seda Ogrenci Memik</a>&#160;(Fall),&#160;<a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/gu-jie.html\">Prof. Jie Gu</a> (Spring)</p>\r\n<p>COURSE COORDINATORS:&#160;<a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/memik-ogrenci-seda.html\">Prof. Seda Ogrenci Memik</a>, <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/gu-jie.html\">Prof. Jie Gu</a></p>\r\n<p>COURSE GOALS:&#160;Cover the digital design knowledges on combinational logic circuit, sequential logic circuits, logic optimization, finite state machine design, counter and programmable logic, etc. The course also provides basic training on the use of a hardware-description language of Verilog.&#160; Material reinforced with the use of contemporary EDA tools.</p>\r\n<p>PREREQUISITES BY TOPIC:</p>\r\n<ul>\r\n<li>1) Number systems</li>\r\n<li>2) Logic simplification using Boolean algebra and Karnaugh maps</li>\r\n<li>3) Combinational logic implementation using AND/OR/NOT, NAND/NOR gates</li>\r\n<li>4) Exposure to basic components, e.g., adders, decoders, and multiplexers.</li>\r\n<li>5) Exposure to memory elements and flip-flops</li>\r\n</ul>\r\n<p>&#160;</p>\r\n<p>DETAILED COURSE TOPICS (Subject to adjustments):</p>\r\n<p>Week 1: Introduction to Logic Design: class administration, digital design methodology, transistor fundamentals.</p>\r\n<p>Week 2: Review of Boolean logic, Karnaugh maps, basic logic circuit design</p>\r\n<p>Week 3: Two Level Logic Minimization Algorithms: Quine McCluskey Method, branch and bound approach,</p>\r\n<p>Week 4-5: Introduction to Verilog/VHDL and Modern Digital Design Tools.</p>\r\n<p>Week 6: Arithmetic Circuits Design.</p>\r\n<p>Week 7: Sequential Circuit Design and Timing Analysis.&#160;</p>\r\n<p>Week 8: Finite State Machine Design and Design Optimization.</p>\r\n<p>Week 9: Counter and Programmable Logic Technologies such as FPGA.</p>\r\n<p>Week 10: Digital System Design, Power Analysis and Technology Integration.</p>\r\n<p>COMPUTER USAGE:&#160;Students learn to use commercial EDA tools such as Cadence Genus, Xcelium, Innovus, for the design, synthesis and simulation of large-scale modern digital circuits through Verilog/VHDL language. &#160;Students are required to access the Unix/Linux workstations in the ECE Wilkinson lab physically or remotely.</p>\r\n<p>GRADES:</p>\r\n<ul>\r\n<li>Homework &amp; Lab assignments - 45%</li>\r\n<li>Midterm exam - 25%</li>\r\n<li>Final exam - 30%</li>\r\n</ul>\r\n<p>COURSE OBJECTIVES:&#160;Students completing this course should be able to</p>\r\n<ul>\r\n<li>Acquire enough basic logic design knowledge for advanced study topics related to VLSI design, computer architecture, microprocessor system, design automation, etc.</li>\r\n<li>Perform basic logic circuit design including both combinational and sequential circuits.</li>\r\n<li>Perform two-level logic minimization using Boolean algebra, Karnaugh maps, the Quine McCluskey method, Branch and Bound method, etc.</li>\r\n<li>Acquire practical skills of coding hardware description language Verilog/VHDL for modern digital design.</li>\r\n<li>Know how to use modern EDA design tools to perform simple logic circuit design.</li>\r\n<li>Perform simple arithmetic logic circuit design.</li>\r\n<li>Understand sequential circuit design and timing constraints.</li>\r\n<li>Perform design of finite state machine.</li>\r\n<li>Apply the learned digital techniques to the design of a larger scale digital system.</li>\r\n</ul>\r\n<p>&#160;</p>"
        }
    },
    "314": {
        "course_name": "Technology & Human Interaction",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "9:30-10:50 TuTh",
        "winter_instructor": "Gergle",
        "spring_time": "",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "Undergrad Students Junior &amp; Senior only",
            "Description": "<p>We are surrounded by technologies that support our everyday social interactions. Facebook and Twitter provide persistent services for exchanging personal information, ubiquitous computing environments permit the integration of computational artifacts into the everyday world, and new technologies enable people to collaborate on projects when they are thousands of miles apart. The design of such systems, however, is not simply a technical question. In order to successfully create these systems, we need to understand how people work, play, and communicate with one another in a wide variety of situations. This course illustrates the practice of understanding human interactions that take place both with and through technology; and it explores the design, creation and evaluation of technologies to support such interactions. Course topics include: design processes, prototype construction and evaluation techniques. Specialized topics cover social computing technologies, social software and collaborative systems, and entertainment technologies. No programming experience is necessary. There will be occasional labs to explain technical content.</p>\r\n<ul>\r\n<li><em>Cross-listed with Comm_ST 351</em></li>\r\n</ul>\r\n<p><strong>INSTRUCTOR</strong>: <strong><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/affiliated/gergle-darren.html\" rel=\"noopener noreferrer\" target=\"_blank\">Darren Gergle</a></strong></p>\r\n<p><strong>EVALUATION METHOD:</strong> Course requirements include short hands-on exercises, two exams, and a group project.</p>"
        }
    },
    "321": {
        "course_name": "Programming Languages",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "3:30-4:50 TuTh",
        "fall_instructor": "St-Amour",
        "winter_time": "3:30-4:50 TuTh",
        "winter_instructor": "Dimoulas",
        "spring_time": "12:30-1:50 TuTh",
        "spring_instructor": "St-Amour",
        "other": {
            "Prerequisites": "CS 111, 211 &amp; 214. Graduate students may be admitted to course with consent. For permission please contact Christopher K Riesbeck at c-riesbeck@northwestern.edu",
            "Description": "<p>This course introduces students to the key features of programming languages. Students implement a series of interpreters that nail down the precise details of how various aspects of programming languages behave. &#160;Students are assumed to understand trees and (mathematical) functions that process them; the course builds up to the features of real programming languages from there.</p>\r\n<em></em><br/>\r\n<p><strong>REQUIRED TEXT:</strong>&#160;<a href=\"http://cs.brown.edu/&#126;sk/Publications/Books/ProgLangs/\" rel=\"noopener\" target=\"_blank\"><em>Programming Languages: Application and Interpretation</em></a>&#160;by Shriram Krishnamurthi</p>\r\n<p><strong><strong>COURSE INSTRUCTOR:</strong></strong> <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/st-amour-vincent.html\">Prof. Vincent St-Amour</a> (Fall &amp; Spring) &amp; <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/dimoulas-christos.html\">Prof. Christos Dimoulas</a> (Winter)</p>\r\n<p class=\"item-page\"><strong>COURSE COORDINATOR: </strong><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/findler-robert.html\">Prof. Robby Findler</a></p>\r\n<p><strong>COURSE TOPICS:</strong>&#160;The course explores these aspects of a programming language (in this order):</p>\r\n<ul>\r\n<li>Modeling programming languages</li>\r\n<li>Arithmetic expressions &amp; variables</li>\r\n<li>Functions</li>\r\n<li>Deferring substitution</li>\r\n<li>First class functions</li>\r\n<li>(implementing) Recursion</li>\r\n<li>State</li>\r\n<li>Control</li>\r\n<li>Garbage collection</li>\r\n<li>Types</li>\r\n</ul>\r\n<p><strong>GRADES:</strong>&#160;Grades are based on weekly homework assignments.&#160;<br/> <br/> <strong>EXAM:</strong>&#160;There is no exam in this course.</p>\r\n<p><strong>COURSE OBJECTIVES:</strong>&#160;Students that complete this course should:</p>\r\n<ul>\r\n<li>understand the basic features that underlie most programming languages</li>\r\n<li>understand the basic semantic features of all&#160;call-by-value programming languages (which includes&#160;nearly all programming languages they will encounter),</li>\r\n<li>understand the pragmatics behind those features (when to&#160;use them and why),</li>\r\n<li>understand some of the more advanced features, when they&#160;are applicable, and when they are desireable,</li>\r\n<li>be able to maintain and extend an interpreter-based&#160;implementation of a programming language containing those&#160;features</li>\r\n</ul>"
        }
    },
    "322": {
        "course_name": "Compiler Construction",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "5 -6:20 TuTh ",
        "winter_instructor": "Campanoni",
        "spring_time": "",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "COMP_SCI 213: Introduction to Computer Systems, CS 214: Data Structures and Data Management (or equivalent)",
            "Description": "<p>The compiler is the programmer's primary tool. Understanding the compiler is therefore critical for programmers, even if they never build one. Furthermore, many design techniques that emerged in the context of compilers are useful for a range of other application areas. This course introduces students to the essential elements of building a compiler: parsing, context-sensitive property checking, code linearization, register allocation, etc. To take this course, students are expected to already understand how programming languages behave, to a fairly detailed degree. The material in the course builds on that knowledge via a series of semantics preserving transformations that start with a fairly high-level programming language and culminate in machine code.</p>\r\n<ul>\r\n<li><em>This course satisfies the Systems breadth and the project requirement.</em></li>\r\n</ul>\r\n<p><strong>RECOMMENDED:</strong> COMP_SCI 321, COMP_ENG 205.</p>\r\n<span></span>\r\n<p><strong>COURSE COORDINATOR:</strong> <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/campanoni-simone.html\">Prof. Simone Campanoni</a></p>\r\n<p><strong>COURSE INSTRUCTOR: </strong><a href=\"mailto:simonec@eecs.northwestern.edu\">Prof. Simone Campanoni</a></p>\r\n<p><strong>GRADES:</strong> Grades will primarily be based on codewalks at the end of the quarter, but also based on intermediate projects. This course is programming project heavy.</p>\r\n<p><strong>COURSE OBJECTIVES:</strong> Students that complete this course should: <a href=\"&lt;a href=&#8221;https://users.cs.northwestern.edu/&#126;simonec/CC.html&#8221;&gt;Website with more information&lt;/a&gt;\"></a></p>\r\n<p>- understand how to efficiently implement a programming language,<br/> - have an accurate performance model for the primitives in a programming language,<br/> - have a good sense for the kind of assembly code that a compiler produces<br/> - be able to maintain and extend a compiler for a programming language<br/>- <a href=\"https://users.cs.northwestern.edu/&#126;simonec/CC.html\">CS 322 Syllabus</a><br/><a href=\"&lt;a href=&#8221;https://users.cs.northwestern.edu/&#126;simonec/CC.html&#8221;&gt;Website with more information&lt;/a&gt;\"></a></p>"
        }
    },
    "323": {
        "course_name": "Code Analysis and Transformation",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "5-6:20 TuTh",
        "fall_instructor": "Campanoni",
        "winter_time": "",
        "winter_instructor": "",
        "spring_time": "",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "COMP_SCI 213: Introduction to Computer Systems, CS 214: Data Structures and Data Management (or equivalent)",
            "Description": "<p>Fast, highly sophisticated code analysis and code transformation tools are essential for modern software development. Before releasing its mobile apps, Facebook submits them to a tool called Infer that finds bugs by static analysis, i.e., without even having to run the code, and guides developers in fixing them. Google Chrome and Mozilla Firefox analyze and optimize JavaScript code to make browsers acceptably responsive. Performance-critical systems and application software would be impossible to build and evolve without compilers that derive highly optimized machine code from high-level source code that humans can understand and reason about efficiently. Understanding what modern code analysis and transformation techniques can and can't do is a prerequisite for research on both software engineering and computer architecture, since hardware relies on software to realize its potential. In this class, you will learn the fundamentals of code analysis and transformation, and you will apply them by extending LLVM, a compiler framework now in production use by Apple, Adobe, Intel and other industrial and academic enterprises.&#160; <a href=\"https://users.cs.northwestern.edu/&#126;simonec/CAT.html\">CS 323 Syllabus</a>.</p>\r\n<p><strong>COURSE COORDINATOR:</strong> <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/campanoni-simone.html\">Prof. Simone Campanoni</a></p>\r\n<p><strong>COURSE INSTRUCTOR: </strong><a href=\"mailto:simonec@eecs.northwestern.edu\">Prof. Simone Campanoni</a><a href=\"https://www.mccormick.northwestern.edu/electrical-computer/academics/courses/descriptions/361.html\"></a></p>"
        }
    },
    "329": {
        "course_name": "The Art of Multicore Concurrent Programming ",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "",
        "winter_instructor": "",
        "spring_time": "",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "",
            "Description": "<p>You will not get the automatic speedup for your software when you upgrade to a new computer,&#160;since the frequency scaling is virtually stopped, and you only get more cores on new machines.&#160;For speed, you have to do concurrent programming for multicores. This course will teach you how&#160;to do it effectively. We will start with synchronization primitives, mutual exclusion, and consensus,&#160;and talk about different programming models such as multi-threading, locking, and transactional&#160;memory. We will also discuss how to debug and check concurrent programs, which may give your&#160;different behaviors at different executions.</p>\r\n<p><strong>REQUIRED TEXT:</strong>&#160;Herlihy and Shavit, The Art of Multiprocessor Programming, Revised First Edition, Elsevier, 2012.</p>\r\n<p><strong>COURSE COORDINATOR:</strong> <strong><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/zhou-hai.html\" target=\"_self\">Prof. Hai Zhou</a></strong></p>\r\n<p><strong>PREREQUISITE:</strong> <strong><a href=\"110.html\" target=\"_self\">COMP_SCI 110</a></strong> or <strong><a href=\"111.html\" target=\"_self\">COMP_SCI 111</a></strong>.<br/> <br/> <strong>SCHEDULE</strong>:&#160;<br/> Week 1: Introduction to Concurrency and Its Challenges<br/> Week 2: Mutual Exclusion<br/> Week 3: Concurrent Objects<br/> Week 4: Foundations of Shared Memory<br/> Week 5: Primitive Synchronization Operations<br/> Week 6: Universality of Consensus<br/> Week 7: Spin Locks and Contention<br/> Week 8: Distributed Coordination<br/> Week 9: Barriers<br/> Week 10: Transaction Memory</p>\r\n<p>DETAILED COURSE TOPICS:</p>\r\n<p>GRADES:</p>\r\n<p>COURSE OBJECTIVES:</p>\r\n<p>ABET CONTENT CATEGORY: <strong><br/> </strong></p>"
        }
    },
    "331": {
        "course_name": "Introduction to Computational Photography",
        "summer_time": "9-10:30 MW",
        "summer_instructor": "Schiffers",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "12:30-1:50 MW",
        "winter_instructor": "Willomitzer",
        "spring_time": "",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "Prerequisites: 150 or 211 or 230 or permission from Prof. Willomitzer. Students should have experience with Python programming and Jupyter Notebook.  Basic knowledge about Image Processing and Optics is helpful, but not a prerequisite (students will learn that during the course).",
            "Description": "<p>This course teaches the fundamentals of modern camera architectures and computational imaging systems. It gives students a hands-on experience in characterizing, manipulating and acquiring data captured on modern camera platforms. For example, students will learn how to estimate scene depth from a sequence of captured images or program their own high dynamic range imaging algorithm.</p>\r\n<p>This course is part of &#160;a two-part series that explores the emerging new field of Computational Photography. Computational photography combines ideas in computer vision, computer graphics, technical optics, and image processing. This course will first cover the fundamentals of image sensing and modern cameras. We will then use this as a basis to explore recent topics in computational photography such as motion/defocus deblurring cameras, light field cameras, and computational illumination.</p>\r\n<p>This course will consist of six homework assignments implemented in Python using the Jupyter Notebook framework. There will be no midterm or final exam.&#160;Enrollment is limited to 40 students.</p>\r\n<ul>\r\n<li><em>This course fulfills the Interfaces Breadth &amp; Project Course </em>requirement.</li>\r\n</ul>\r\n<p><strong>COURSE COORDINATOR</strong>: <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/cossairt-oliver.html\" target=\"_self\">Prof. Oliver Cossairt</a></p>\r\n<p><strong>COURSE INSTRUCTOR:</strong> Winter 22: <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/affiliated/willomitzer-florian.html\">Prof. Florian Willomitzer</a>, Summer 21: <a href=\"mailto:%20florian.schiffers@u.northwestern.edu\">Florian Schiffers</a>, Fall 20: <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/cossairt-oliver.html\">Prof. Oliver Cossairt</a> &amp; <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/affiliated/willomitzer-florian.html\">Prof. Florian Willomitzer</a></p>\r\n<strong>HOMEWORK ASSIGNMENTS:</strong>&#160;\r\n<p>Homework assignments will consist of implementing several computational photography algorithms in Python using the Jupyter Notebook framework. Homeworks are each graded Pass/Fail. Each homework consists of a coding and a technical writeup. Your coding must be correct, and your writeup must be clearly written (template will be provided) in order to receive a passing grade. For each assignment that you fail, your grade gets lowered by one letter. So if you pass all seven assignments you get an A, if you fail one assignment you get a B, if you fail two you get a C, and so on. You can resubmit up to three homework assignments that you received a failing grade for.</p>\r\n<strong>ADDITONAL INFORMATION:</strong>&#160;<br/> Course website from Fall 2020: https://nucs331.github.io/"
        }
    },
    "333": {
        "course_name": "Interactive Information Visualization",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "12:30-1:50 MW",
        "fall_instructor": "Hullman",
        "winter_time": "3:30-4:50 TuTh",
        "winter_instructor": "Kay",
        "spring_time": "",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "COMP_SCI 214",
            "Description": "<p>When well designed, visual displays of data capitalize on human facilities for processing information and improve comprehension, memory, inference, and decision making. Creating visualizations is getting easier thanks to a proliferation of digital tools for transforming and visualizing data. Yet the best visualizations are still often creating by skilled human designers who have considerable experience with design analysis.</p>\r\n<p>In this course we will consider what it means for a visualization to be effective and what sorts of principles, techniques and algorithms from statistics, graphic design, databases, perceptual psychology, cognitive science and related fields can help us create effective visualizations. Though there are different uses of the term &#8220;visualization&#8221; in popular media, for the purposes of this class, we will treat information visualization as the use of interactive interfaces to visually represent abstract data. The course is targeted both towards students interested in using visualization in their own work, as well as students interested in building better visualization tools and systems.&#160; In addition to participating in class discussions, students will demonstrate their learning through weekly short quizzes and several assignments requiring visualization design, exploratory data analysis, and interactive visualization implementation.</p>\r\n<p>In addition to being comfortable programming, students should have a basic working knowledge of, or willingness to learn, a graphics API. We we will cover introductory D3 in class to get you started, but this is not a JavaScript or web development course. Students will be expected to self-study to learn JavaScript and other basic web technologies (HTML, CSS) if they are not familiar with them.</p>\r\n<ul>\r\n<li><em><strong>Formerly COMP_SCI 396/496</strong>.</em></li>\r\n<li><strong><i>This course satisfies Interface breadth requirement.</i></strong></li>\r\n</ul>\r\n<p><strong>COURSE COORDINATORS: </strong><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/hullman-jessica.html\"></a><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/hullman-jessica.html\">Prof. </a><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/hullman-jessica.html\">Jessica Hullman</a></p>\r\n<p><strong>COURSE INSTRUCTOR:</strong> <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/hullman-jessica.html\"></a><a href=\"mailto:jhullman@northwestern.edu#Prof.%20Hullman\">Prof. Hullman</a> (Fall), &amp; <a href=\"mailto:mjskay@northwestern.edu\">Prof. Kay</a> (Winter)</p>"
        }
    },
    "336": {
        "course_name": "Design & Analysis of Algorithms",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "11-12:20 TuTh & 5-6:20 MW",
        "fall_instructor": "Makarychev & Stull",
        "winter_time": "9:30-10:50 TuTh",
        "winter_instructor": "Hartline",
        "spring_time": "3:30-4:50 TuTh",
        "spring_instructor": "Stull",
        "other": {
            "Prerequisites": "COMP_SCI 212 and COMP_SCI 214 or Graduate (MS or Ph.D) student standing",
            "Description": "<p>Algorithm design and analysis is fundamental to all areas of computer science and gives a rigorous framework for the study optimization. This course provides an introduction to algorithm design through a survey of the common algorithm design paradigms of greedy optimization, divide and conquer, dynamic programming, network flows, reductions, and randomized algorithms. Important themes that will be developed in the course include the algorithmic abstraction-design-analysis process and computational tractability (e.g., NP-completeness).</p>\r\n<ul>\r\n<li><em>This course fulfills the Theory Breadth &amp;&#160;Technical Elective requirement.</em></li>\r\n</ul>\r\n<p><strong>REQUIRED TEXT: <em>'</em></strong><em>Algorithm Design by Kleinberg'</em>, Jon, Tardos, &#201;va [Addison-Wesley, 2005] (Hardcover) by Kleinberg<strong><br/> </strong></p>\r\n<p><strong>COURSE INSTRUCTOR:</strong> <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/makarychev-konstantin.html\">Prof. Konstantin Makarychev</a> &amp; <a href=\"mailto:donald.stull@northwestern.edu\">Prof. Donald Stull</a> (Fall) &amp; <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/hartline-jason.html\">Prof. Jason Hartline</a> (Winter)</p>\r\n<p><strong>COURSE COORDINATOR:&#160;</strong><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/hartline-jason.html\">Prof. Jason Hartline</a><a href=\"http://www.mccormick.northwestern.edu/research-faculty/directory/profiles/hartline-jason.html\"></a></p>\r\n<p><strong>HOMEWORK ASSIGNMENTS:</strong></p>\r\n<p><strong>GRADES:</strong></p>"
        }
    },
    "337": {
        "course_name": "Intro to Natural Language Processing",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "11-12:20 MW",
        "fall_instructor": "Birnbaum",
        "winter_time": "",
        "winter_instructor": "",
        "spring_time": "",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "COMP_SCI 348 or consent of instructor",
            "Description": "<p>A semantics-oriented introduction to natural language processing, broadly construed. Representation of meaning and knowledge inference in story understanding, script/frame theory, plans and plan recognition, counter-planning, and thematic structures.</p>\r\n<ul>\r\n<li><em>This course satisfies the AI Breadth &amp;</em> Project Requirement&#160;</li>\r\n</ul>\r\n<p><strong>REQUIRED TEXTBOOK</strong>: None.</p>\r\n<p><strong>REFERENCE TEXTBOOKS:</strong></p>\r\n<p>&#8226; ANSI Common Lisp Book</p>\r\n<p><strong>INSTRUCTORS: </strong><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/birnbaum-larry.html\">Prof. Birnbaum</a><strong><br/>COURSE COORDINATOR:&#160;</strong><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/birnbaum-larry.html\" target=\"_self\">Prof. Larry Birnbaum</a></p>\r\n<p><strong>PREREQUISITES:&#160;</strong>COMP_SCI 348 or consent of instructor</p>\r\n<p><strong>DETAILED COURSE TOPICS:</strong></p>\r\n<ul>\r\n<li>Language Understanding</li>\r\n<li>Modeling Human Cognition with Computers</li>\r\n<li>Psychological Theories and Themes</li>\r\n<li>Task Driven Software and Artifact Design</li>\r\n</ul>\r\n<p><strong>HOMEWORK ASSIGNMENTS:</strong></p>\r\n<ul>\r\n<li>Assignment 1 - Lisp Intro</li>\r\n<li>Assignment 2 - Ambiguity</li>\r\n<li>Assignment 3 - Eliza</li>\r\n<li>Assignment 4 - Action - Inference.</li>\r\n<li>Assignment 5 - Inferencer</li>\r\n<li>Pick one: Paper or Program</li>\r\n</ul>\r\n<p><strong>GRADES:</strong></p>\r\n<ul>\r\n<li>Class discussion - 10%</li>\r\n<li>Projects and Assignments - 50% (Harder assignments are worth more. Go figure.)</li>\r\n<li>Final Paper - 30%</li>\r\n<li>Attendance - 10%</li>\r\n</ul>"
        }
    },
    "339": {
        "course_name": "Intro to Databases",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "11-12:20 TuTh",
        "winter_instructor": "Rogers",
        "spring_time": "5-6:20 TuTh",
        "spring_instructor": "Rogers",
        "other": {
            "Prerequisites": "Students must have completed COMP_SCI 214 &amp; (COMP_SCI 213 or COMP_ENG 205), or be CS Grad students (MS or PhD) in order to register for this course.",
            "Description": "<p>Data models and database design. Modeling the real world: structures, constraints, and operations. The entity relationship to data modeling (including network hierarchical and object-oriented), emphasis on the relational model. Use of existing database systems for the implementation of information systems.<em><br/> </em></p>\r\n<ul>\r\n<li><em><strong>Spring Section:</strong> Students must be familiar with Java programming prior to taking this course.</em></li>\r\n<li><em>This course satisfies the&#160;Systems breadth requirement.</em></li>\r\n</ul>\r\n<p><strong>COURSE INSTRUCTOR: </strong><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/rogers-jennie.html\">Prof. Rogers</a>&#160;(Winter &amp; Spring)</p>\r\n<p><strong>COURSE COORDINATORS:&#160;</strong><a href=\"https://wcms.northwestern.edu/entity/open.act?type=page&amp;id=5a7193b88169773801c6a6fdfb23f341&amp;confId=7652f4848169775b577c1a9f79699cba\" target=\"_parent\">Prof. Peter Dinda</a> &amp; <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/rogers-jennie.html\">Prof. Jennie Rogers</a></p>\r\n<p><strong>REQUIRED TEXTBOOKS</strong>:</p>\r\n<ul>\r\n<li>Hector Garcia-Molina, Jeffrey D. Ullman, Jennifer D. Widom, Database Systems: The Complete Book, 2nd Edition, Prentice Hall, 2009. <strong>(Prof. Dinda)</strong></li>\r\n</ul>\r\n<ul>\r\n<li>Ramakrishnan, Raghu and Johannes Gehrke. <a href=\"https://smile.amazon.com/Database-Management-Systems-Raghu-Ramakrishnan/dp/0072465638/ref=sr_1_1?ie=UTF8&amp;qid=1470422397&amp;sr=8-1&amp;keywords=database+systems+textbook+gehrke\" rel=\"noopener noreferrer\" target=\"_blank\"><em>\"Database management systems.\"</em></a> 3rd Edition. New York: McGraw-Hill, 2002; ISBN-10: 0072465638, ISBN-13: 978-0072465631 <strong>(Winter &amp; Spring; Prof. Rogers)</strong></li>\r\n</ul>\r\n<p><strong>RECOMMENDED ADDITIONAL TEXTBOOKS</strong>:</p>\r\n<ul>\r\n<li>Joe Celko, SQL for Smarties: Advanced SQL Programming, 5th edition, Morgan Kaufman, 2014. (Useful)&#160;<strong>(Prof. Dinda)</strong></li>\r\n<li>Tom Christiansen, brian d foy, Larry Wall, Jon Orwant, Programming Perl, 4th Edition, O&#8217;Reilly and Associates, 2012. (Useful)&#160;<strong>(Prof. Dinda) </strong></li>\r\n</ul>\r\n<ul>\r\n<li class=\"li-itemize\">Familiarity with concepts from discrete math such as set theory (COMP_SCI 212/310 for example) <strong>(Winter &amp; Spring; Prof. Rogers)</strong></li>\r\n<li class=\"li-itemize\">Object-oriented programming experience, preferably with Java <strong>(Winter &amp; Spring; Prof. Rogers)</strong></li>\r\n<li class=\"li-itemize\">Background in using a source code revision control system, especially git <strong>(Winter &amp; Spring; Prof. Rogers)</strong></li>\r\n</ul>\r\n<p><strong>COURSE OBJECTIVES:</strong>&#160;This course introduces the underlying concepts behind data modeling and database systems using relational database management systems (RDBMS, specifically Oracle), the structured query language (SQL), and web applications (Perl DBI inCGI) as examples.&#160; Students are also introduced to the internals of an RDBMS engine.</p>\r\n<ul>\r\n<li>Detailed information about the <strong>(Prof. Dinda) version </strong>of the course can be found at:&#160;<u><a href=\"http://www.cs.northwestern.edu/&#126;pdinda/db\">http://www.cs.northwestern.edu/&#126;pdinda/db</a></u></li>\r\n</ul>\r\n<p><strong>COURSE GOALS:</strong></p>\r\n<p>Students learn:</p>\r\n<ul>\r\n<li>How to model domains and data using the entity-relationship model</li>\r\n<li>How to design a normalized schema in the relational data model</li>\r\n<li>How to implement schemas using SQL</li>\r\n<li>How to keep data consistent and safe with using the ACID properties (transactions) of a modern RDBMS</li>\r\n<li>How to query data using SQL</li>\r\n<li>How to interface to a modern RDBMS from a modern programming language</li>\r\n<li>How such interfaces are used to create web applications</li>\r\n<li>How an RDBMS provides quick access to data using indices, and how indices are implemented</li>\r\n<li>How an RDBMS manages storage and the storage hierarchy</li>\r\n<li>How an RDBMS optimizes and executes queries using the relational algebra, the theoretical underpinning of database systems</li>\r\n<li>How an RDBMS implements transactions</li>\r\n<li>Current topics</li>\r\n</ul>\r\n<p><strong>DETAILED COURSE TOPICS:</strong></p>\r\n<ol>\r\n<li>Introduction to database-backed web applications\r\n<ol>\r\n<li>Web systems, CGI and other application models</li>\r\n<li>Introduction to Perl</li>\r\n<li>Introduction to SQL and ACID</li>\r\n<li>Waterfall versus spiral models of development</li>\r\n</ol>\r\n</li>\r\n<li>Entity-relationship data model\r\n<ol>\r\n<li>Design principles</li>\r\n<li>Referential integrity and other constraints</li>\r\n</ol>\r\n</li>\r\n<li>Relational data model\r\n<ol>\r\n<li>Schemas and keys</li>\r\n<li>Functional and multi-valued dependencies</li>\r\n<li>Normalization and normal forms</li>\r\n<li>Translating ER schemas to relational schemas</li>\r\n</ol>\r\n</li>\r\n<li>Relational algebra\r\n<ol>\r\n<li>Bags and sets</li>\r\n<li>Basic operators</li>\r\n<li>Joins</li>\r\n<li>Grouping</li>\r\n<li>Expressions and constraints (statements)</li>\r\n<li>Equivalent expressions and optimization</li>\r\n</ol>\r\n</li>\r\n<li>SQL in depth\r\n<ol>\r\n<li>Writing constraints</li>\r\n<li>Advanced data types</li>\r\n<li>Regular expressions</li>\r\n<li>Nulls and 3-valued logic</li>\r\n<li>Indices</li>\r\n<li>Views</li>\r\n<li>Transactions</li>\r\n<li>Triggers</li>\r\n<li>Security (access control, SQL injection attacks)</li>\r\n</ol>\r\n</li>\r\n<li>Storage systems and records\r\n<ol>\r\n<li>Disks and RAID</li>\r\n<li>Record layout / free space management</li>\r\n<li>Buffer management</li>\r\n</ol>\r\n</li>\r\n<li>B-Tree indices\r\n<ol>\r\n<li>B+Tree</li>\r\n<li>Query and join implementations</li>\r\n</ol>\r\n</li>\r\n<li>Hash indices\r\n<ol>\r\n<li>Extensible hashing</li>\r\n<li>Linear hashing</li>\r\n<li>Query and join implementations</li>\r\n</ol>\r\n</li>\r\n<li>Bitmap indices\r\n<ol>\r\n<li>Query and join implementations</li>\r\n</ol>\r\n</li>\r\n<li>Brief introduction to transaction implementation\r\n<ol>\r\n<li>Logging (undo, redo, redo/undo)</li>\r\n<li>Locking (deadlock, lock ordering, two-phase locking)</li>\r\n</ol>\r\n</li>\r\n</ol>\r\n<p><strong>HOMEWORK ASSIGNMENTS:</strong></p>\r\n<p>1. Entity-Relationship data model</p>\r\n<p>2. Relational data model</p>\r\n<p>3. Relational Algebra</p>\r\n<p><strong>LABORATORY PROJECTS:</strong></p>\r\n<ul>\r\n<li>Extending a database-backed web app&#160;</li>\r\n<li>Designing an implementing a database-backed web app</li>\r\n<li>Implementing a component of an RDBMS</li>\r\n</ul>\r\n<div><br/>\r\n<p><strong>GRADES</strong>:&#160;<span>&#160;</span></p>\r\n<ul>\r\n<li>50 % Projects</li>\r\n<li>10 % Homework</li>\r\n<li>20 % Midterm</li>\r\n<li>20 % Final</li>\r\n</ul>\r\n"
        }
    },
    "340": {
        "course_name": "Introduction to Computer Networking",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "9:30-10:50 TuTh",
        "winter_instructor": "Kuzmanovic",
        "spring_time": "",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "COMP_SCI 214 and (COMP_SCI 213 or COMP_ENG 205)",
            "Description": "<p>A top-down exploration of networking using the 5-layer model and the TCP/IP stack. HTTP, FTP, DNS, BSD Sockets, concurrent servers, checksums, reliable transport with stop-and-wait, go-back-n, selective repeat, flow control, congestion control, TCP, unicast routing, multicast routing, router architecture, IP, IPv6, IP multicast, MAC protocols and LANs, Ethernet , wireless networks, and network security. Over the course of the quarter, students build web clients and servers, a fully compatible TCP/IP stack that can run them, and evaluate routing protocols in simulation.<em><br/> </em></p>\r\n<ul>\r\n<li><em>This course satisfies the Systems breadth &amp; project requirement.</em></li>\r\n</ul>\r\n<p><strong>REQUIRED TEXTBOOKS</strong>:</p>\r\n<p>James Kurose and Keith Ross<em>, <a href=\"http://gaia.cs.umass.edu/kurose_ross/index.html\">Computer Networking:&#160;</a></em><a href=\"http://gaia.cs.umass.edu/kurose_ross/index.html\"><em>A Top-Down Approach</em></a>, Addison Wesley, 8th edition (2020); (Digital) <span class=\"a-size-base a-color-base\"></span><span class=\"a-size-base a-color-base a-text-bold\">ISBN-13:</span> <span class=\"a-size-base a-color-base\">978-0135928608</span><span class=\"a-size-base a-color-base\">. (Electronic Book) <span class=\"a-size-base a-color-base a-text-bold\">ISBN-13:</span> 978-0135928615. (Paper) <span class=\"a-size-base a-color-base a-text-bold\">ISBN-13:</span> 978-0135928790.<br/></span></p>\r\n<p><strong>COURSE</strong>&#160;<strong>INSTRUCTOR:&#160;</strong><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/kuzmanovic-aleksandar.html\" target=\"_self\">Prof. Kuzmanovic</a><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/bustamante-fabian.html\" target=\"_self\"> </a>(Winter)<a href=\"http://eecs.northwestern.edu/people/userprofile/akuzma\" target=\"_self\"> </a></p>\r\n<p><strong>COURSE COORDINATORS:&#160;</strong><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/chen-yan.html\" target=\"_self\">Prof. Yan Chen</a>,&#160;<a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/dinda-peter.html\" target=\"_self\">Prof. Peter Dinda</a>, and&#160;<a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/kuzmanovic-aleksandar.html\" target=\"_self\">Prof. Alexandar Kuzmanovic</a></p>\r\n<p><strong>COURSE GOALS:</strong></p>\r\n<p>This course introduces the underlying concepts behind networking using the Internet and its protocols as examples. There are three goals: (1) to give you an understanding of how networks, especially the Internet, work, (2) to give you experience in &#8220;programming in the large&#8221;, and (3) to teach you network programming.</p>\r\n<p>We will work our way down the network stack from the application layer to the physical layer. Concurrent with the lectures, you (in groups) will be building a functional TCP/IP stack and a small web server that will run on it. What you build will be &#8220;real&#8221; &#8211; your code will interoperate with other TCP/IP stacks and you'll be able to talk to your web server using any browser on any TCP/IP stack.</p>\r\n<p>This is a learn-by-doing kind of class. You will get your hands dirty by examining parts of our Internet infrastructure and building other parts. It will be a lot of work, but it will also be a lot of fun.</p>\r\n<p>After finishing the course, you will be able to do the following.</p>\r\n<ul>\r\n<li>Understand the Internet protocols</li>\r\n<li>Build implementations of the Internet protocols</li>\r\n<li>Generalize this knowledge to other networking protocols.</li>\r\n<li>Be a competent network and systems programmer.</li>\r\n<li>Think like a networking practitioner</li>\r\n<li>Read and judge articles on networking in trade magazines</li>\r\n<li>Begin to read and judge research and technical articles on networking</li>\r\n<li>Create simplicity and reliability out of complexity and unreliability</li>\r\n<li>Structure and design software systems to achieve that simplicity and reliability</li>\r\n</ul>\r\n<p><strong>COURSE IS PREREQUISITE FOR</strong>: COMP_SCI 440, 450, 465</p>\r\n<p><strong>HOMEWORK ASSIGNMENTS:&#160;</strong>Four</p>\r\n<p><strong>LABORATORY PROJECTS:</strong></p>\r\n<p>Project 1: Web Client and Server</p>\r\n<p>Project 2: TCP Implementation for Web Client and Server</p>\r\n<p>Project 3: Routing Lab</p>"
        }
    },
    "343": {
        "course_name": "Operating Systems",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "2-3:20 MW",
        "winter_instructor": "Dinda",
        "spring_time": "9:30-10:50 TuTh",
        "spring_instructor": "Ghena",
        "other": {
            "Prerequisites": "Comp_sci 214 and (213 or Comp_Eng 205)",
            "Description": "<p>A fundamental overview of operating systems (OSes) with an emphasis on practice. &#160; Topics covered include: OS structure, OS models, OS abstractions, concurrency sources, concurrency challenges, concurrency control, scheduling and resource management, virtual memory, device drivers, protection and security, memory management, file systems, and design principles. Requires substantial low-level programming projects at both user-level and within a kernel.&#160;</p>\r\n<ul>\r\n<li><i>This course satisfies the Systems breadth &amp; project requirement.</i></li>\r\n</ul>\r\n<p><strong>REFERENCE TEXTBOOK as Winter</strong>: Andrew S. Tanenbaum and Herbert Bos, Modern Operating Systems, 4th Edition, Pearson, 2014, (ISBN-13: 978-0133591620, ISBN-10: 013359162X)</p>\r\n<p><strong>COURSE INSTRUCTOR(S): </strong><a href=\"mailto:pdinda@northwestern.edu\">Prof. Dinda</a> (Winter), <a href=\"mailto:branden@northwestern.edu\">Prof. Ghena</a> (Fall)</p>\r\n<p><strong>COURSE COORDINATOR:&#160;</strong><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/dinda-peter.html\">Prof. Peter Dinda</a></p>\r\n<p><strong>COURSE GOALS:</strong> This course introduces you to the basic, foundational concepts and principles of operating systems, many of which generalize to other areas of computer science and engineering. You will learn many of these concepts and principles by applying them in practice on a modern machine through labs that are designed to put you in the shoes of a systems-level developer operating at both user-level and within the kernel. OS (and systems more broadly) is very much a learn-by-doing kind of area.</p>\r\n<p><strong>DETAILED COURSE TOPICS:</strong></p>\r\n<ul>\r\n<li><strong>OS Structure:</strong> kernel, device drivers, file systems, network stacks, schedulers, system calls, libraries, toolchains, language virtual machines, user interface/shell, applications, etc.</li>\r\n<li><strong>OS Models:</strong> monolithic kernel, microkernel, virtual machine monitor/hypervisor, jail/zone/container, and more esoteric models.</li>\r\n<li><strong>OS Abstractions:</strong> thread, name space, address space, process, IPC, virtual machine, container, file, directory, stream, etc.&#160; Plus abstraction design within the kernel (devices, file systems, ...)</li>\r\n<li><strong>Concurrency Sources:</strong> multiprocessors, devices, interrupts, threads, processes, horror stories, &#8230;</li>\r\n<li><strong>Concurrency Challenges:</strong> memory system coherence/consistency, race conditions, deadlock, livelock, horror stories, &#8230;</li>\r\n<li><strong>Concurrency Control:</strong> interrupt control, atomics, spinlocks, critical sections, blocking vs waiting, mutexes, semaphores,condvars, monitors, barriers, lockfree/waitfree models, plus typical synchronization problems such as producer-consumer, reader-writer, and dining philosophers.</li>\r\n<li><strong>Scheduling and Resource Management:</strong> basic theory, FCFS, GPS, SRPT, dynamic priority (e.g. Unix), lottery, fixed priority, preemptive vs non-preemptive, real-time vs non-real-time, horror stories, &#8230;</li>\r\n<li><strong>Virtual Memory: </strong>hardware-software co-design, paging, swapping, segmentation and (possibly) current alternatives.&#160;</li>\r\n<li><strong>Device Drivers:</strong> interrupts, DMA vs PIO, MMIO vs PMIO, atomics, hardware memory barriers, software memory barriers.</li>\r\n<li><strong>Protection and Security: </strong>kernel/user mode, mode/ring transitions, role of encryption, interaction with virtual memory, horror stories.</li>\r\n<li><strong>Memory Management:</strong> page allocation versus heap allocation, garbage collection, allocation in special contexts (e.g. interrupt context), page replacement, working set.</li>\r\n<li><strong>File Systems: </strong>issues/interfaces, data structures on block devices, examples (V7, FAT+, ext2+)</li>\r\n<li><strong>Principles:</strong> policy versus mechanism, orthogonality, worse-is-better, lazy evaluation, caching, end-to-end argument, mythical man-month, no silver bullet, hw/sw co-design</li>\r\n</ul>\r\n<p><strong>&#160;</strong></p>\r\n<p>The hardware environment that we will focus on is Intel/AMD machines running in 64 bit mode (\"x64\"), which is the commonplace platform for systems ranging from laptops to supercomputers today. &#160; Lab work is done in the C programming language on user-level Linux or in the Nautilus kernel framework (\"NK\"), a research kernel developed at Northwestern and other institutions. The experience you gain in NK will generalize to the Linux kernel, for the most part.</p>\r\n<p><strong>Labs: </strong>Varies; current labs are:</p>\r\n<ul>\r\n<li>Getting Started Lab (build and run a custom kernel)</li>\r\n<li>Producer-Consumer Lab (learn about concurrency control)</li>\r\n<li>Queue Lab (learn about scheduling via a discrete event simulator)</li>\r\n<li>Driver Lab (extend a kernel with a new device driver)</li>\r\n<li>Paging Lab (add simple address translation to a kernel)</li>\r\n</ul>\r\n<p>Except for the Getting Started Lab, labs can be done in groups.&#160;</p>\r\n<p><strong>GRADES:</strong></p>\r\n<ul>\r\n<li>Labs 60%</li>\r\n<li>Midterm 20%</li>\r\n<li>Final 20%</li>\r\n</ul>\r\n<p><strong>COURSE ORGANIZATION: </strong>The course is organized as a series of lectures, labs, and exams.&#160; There is also an optional weekly TA-lead discussion session. &#160; The instructor, TAs, and PMs arrange office hours so that every student has access to at least one office hour per week. &#160; An online discussion group is regularly monitored by all course staff.</p>"
        }
    },
    "344": {
        "course_name": "Design of Problem Solvers",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "",
        "winter_instructor": "",
        "spring_time": "",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "COMP_SCI 348 and either COMP_SCI 325 or equivalent Lisp experience",
            "Description": "<p>Principles and practice of organizing and building AI reasoning systems. Topics include pattern-directed rule systems, truth-maintenance systems, and constraint languages.</p>\r\n<ul>\r\n<li><em>This course satisfies the AI Breadth &amp; Project Requirement</em></li>\r\n</ul>\r\n<p><strong>REQUIRED TEXTS:</strong>&#160;Forbus, K. and de Kleer, J.&#160;<em>Building Problem Solvers,</em> MIT Press</p>\r\n<p><strong>COURSE COORDINATOR:</strong>&#160;<a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/forbus-ken.html\" target=\"_self\">Prof. Kenneth D. Forbus</a></p>\r\n<p><strong>COURSE GOALS:</strong>&#160;Building software that reasons is one of the key activities of artificial intelligence.&#160; Such software lies at the heart of many of today's interesting technologies, such as on-board diagnosis systems, intelligent CAD systems, shopbots, natural language processing systems, and intelligent tutoring systems and learning environments.&#160; Reasoning software is also used as a component in building&#160;<em>cognitive simulations</em>, software designed to model aspects of human cognition.&#160; This course will teach you how to build such software.&#160; What you should know after taking this course will include:</p>\r\n<ul>\r\n<li>A variety of ways to build AI reasoning systems.</li>\r\n<li>Tradeoffs that designers of reasoning systems face, and typical categories of solutions.</li>\r\n<li>How truth-maintenance systems work.</li>\r\n<li>How to use large-scale knowledge bases in building problem solvers.</li>\r\n<li>How to use analogical processing in building problem solvers.</li>\r\n</ul>\r\n<p>During the course you will be doing a lot of programming -- but very little of it from scratch!&#160; Instead, you'll be working with software modules we've developed, using them, modifying them, and sometimes significantly extending them.&#160;&#160; This way you spend more time learning the ideas than polishing your coding skills (although you will have ample opportunity to improve those as well).</p>\r\n<p>In addition to the material in the textbook, we cover several advanced topics, including using large knowledge bases, building federated reasoning systems, and analogical reasoning.&#160;&#160; You will be working with FIRE, a new prototype reasoning system built at Northwestern that uses the ResearchCyc knowledge base.</p>\r\n<p><strong>PREREQUISITES</strong>:&#160;<a href=\"348.html\">COMP_SCI 348</a><a href=\"http://eecs.northwestern.edu/eecs-348\" target=\"_self\"></a>&#160;and either&#160;<a href=\"325-1.html\">COMP_SCI 325</a>&#160;or equivalent Lisp experience</p>\r\n<p><strong>DETAILED COURSE TOPICS</strong></p>\r\n<ul>\r\n<li>Searching and problem spaces</li>\r\n<li>Pattern-directed inference systems</li>\r\n<li>Fundamentals of truth maintenance systems</li>\r\n<li>Logic-based TMS</li>\r\n<li>Assumption-based TMS</li>\r\n<li>Reasoning with large knowledge bases</li>\r\n<li>Integrating special-purpose reasoning engines</li>\r\n<li>Analogical reasoning</li>\r\n<li>Other topics TBD</li>\r\n</ul>\r\n<p><strong>COMPUTER USAGE:</strong>&#160;This course is taught by a combination of lecture and studio instruction.&#160;&#160;We are relying on enough students bringing notebooks/tablets to class so that every pair of students has a machine.</p>"
        }
    },
    "345": {
        "course_name": "Distributed Systems",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "",
        "winter_instructor": "",
        "spring_time": "11-12:20pm TuTh",
        "spring_instructor": "Bustamante",
        "other": {
            "Prerequisites": "Students must have completed COMP_SCI 213 and COMP_SCI 214 to enroll in this course.",
            "Description": "<p>Basic principles behind distributed systems (collections of independent components that appear to users as a single coherent system) and main paradigms used to organize them.&#160;&#160;<em><br/> </em></p>\r\n<ul>\r\n<li><em>This course satisfies the Systems breadth &amp; project requirement</em></li>\r\n</ul>\r\n<p><strong>COURSE COORDINATOR</strong>:&#160;<a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/bustamante-fabian.html\" target=\"_self\">Prof. Fabi&#225;n E. Bustamante</a><strong><br/> <br/> DETAILED DESCRIPTION:</strong>&#160;Distributed systems consists of a collection of independent computers that appears to its users as a single coherent system. While their early development followed the emergence of high-speed local area computer networks at the beginning of 1970s, the recent availability of powerful and cheap microprocessors and pervasive connectivity has brought the topic to everyone's attention. In this course we discuss some of the basic principles behind distributed systems and review some of the main paradigms used to organize them.</p>\r\n<p><strong>REQUIRED TEXTS:&#160;</strong>Andrew S. Tanenbaum and Maarten van Steen. Distributed Systems: Principles and Paradigms. Prentice Hall, 2nd Ed., 2006</p>\r\n<p><strong>GRADES</strong>: Grades are based on a term-long project, homework assignments, class participation and a take-home final exam.<br/> <strong><br/> LABORATORY PROJECTS</strong>:</p>\r\n<ul>\r\n<li>Wide-area testbed</li>\r\n<li>Clusters<strong>&#160;</strong></li>\r\n</ul>\r\n<p><strong>DETAILED COURSE TOPICS:</strong></p>\r\n<p>1. Introduction: Distributed systems and their goals, hardware and software concepts, traditional and modern architectures for distributed systems.</p>\r\n<p>2. Wide-area distributed systems and PlanetLab: Issues with wide-area distributed systems and brief introduction to PlanetLab.</p>\r\n<p>3. Communication: Basics of communication, remote procedure calls, remote object invocation, message-oriented and stream-oriented communication.</p>\r\n<p>4. Processes: Clients, servers, code migration and software agents.</p>\r\n<p>5. Naming: Naming and locating entities, removing unreferenced entities.</p>\r\n<p>6. Synchronization: Synchronization in distributed systems, logical time, global state, elections and mutual exclusion.</p>\r\n<p>7. Consistency and replication: Data replication, scalability, and consistency</p>\r\n<p>8. Fault tolerance: Making distributed systems fault tolerant; reliable and resilient multicasting.</p>\r\n<p>9. Security: Secure communication and authorization in distributed systems.</p>\r\n<p>10. Review of major distributed systems paradigms: object systems, file systems, document-based systems, and coordination-based systems</p>\r\n<p><strong>COURSE GOALS:</strong>&#160;To teach the fundamental concepts and working details of distributed systems and the underlying technologies. Topics include distributed systems architectures, processes, communication and synchronization, consistency and replication, fault-tolerance and security.<strong>&#160;</strong></p>\r\n<p><strong>COURSE OUTCOMES:</strong> Having successfully completed the course, students will able to</p>\r\n<ol>\r\n<li>Present a conceptual model of distributed systems</li>\r\n<li>Describes key components of a distributed system and evaluate the tradeoffs of alternative architectural models</li>\r\n<li>Suggest algorithm suitable for application in distributed systems .</li>\r\n<li>Build prototype implementations of distributed systems</li>\r\n<li>Demonstrate an understanding of the challenges faced by future distributed systems</li>\r\n</ol>"
        }
    },
    "346": {
        "course_name": "Microprocessor System Design",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "TuTh 3:30-4:50",
        "fall_instructor": "Ghena",
        "winter_time": "",
        "winter_instructor": "",
        "spring_time": "",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "COMP_ENG 203 and COMP_ENG 205",
            "Description": "<p>Structure and timing of typical microprocessors. Sample microprocessor families. Memories, UARTS, timer/counters, serial devices and related devices. MUX and related control structures for building systems. Interrupt programming. Hardware/software design tradeoffs.</p>\r\n<ul>\r\n<li><em>This course fulfills the Systems breadth requirement.</em></li>\r\n</ul>\r\n<p><strong>REQUIRED TEXTS:&#160;</strong>None</p>\r\n<p><strong>REFERENCE TEXTS:&#160;</strong>1. Device data sheets 2. Distributor catalogues</p>\r\n<p><strong>COURSE INSTRUCTOR: </strong><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/ghena-branden.html\">Prof. Branden Ghena</a></p>\r\n<p><strong>COURSE COORDINATOR:&#160;</strong><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/hester-josiah.html\" target=\"_self\">Prof. Josiah Hester</a></p>\r\n<p><strong>COURSE GOALS:&#160;</strong>The goal is to teach students how to design, build and program embedded systems.</p>\r\n<p><strong>PREREQUISITES BY TOPIC:</strong></p>\r\n<ol>\r\n<li>basic digital integrated circuits - AND/OR/NOT gates, latches, demultiplexor</li>\r\n<li>basic structure of a processor - arithmetic registers, address registers, basic addressing modes</li>\r\n<li>basic assembly language programming</li>\r\n</ol>\r\n<p><strong>DETAILED COURSE TOPICS</strong></p>\r\n<ul>\r\n<li><strong>Week 1:&#160;</strong>Microcontrollers. 8051 pinout and electrical characteristics.</li>\r\n<li><strong>Week 2:&#160;</strong>Connecting to external RAM and program. Latches and demultiplexors.</li>\r\n<li><strong>Week 3:&#160;</strong>Ports. Onboard special functions &#8211; interrupts, timers, serial I/O.</li>\r\n<li><strong>Week 4:&#160;</strong>Special functions continued. Timing analysis.</li>\r\n<li><strong>Week 5:&#160;</strong>8051 assembly programming, emulators.</li>\r\n<li><strong>Week 6:&#160;</strong>Introduction to a typical microprocessor - 8086. Basic 8086 control signals - DEN, DTR. Bi-directional bus drivers. 8224 clock circuit. 2- and 4-byte bus systems.</li>\r\n<li><strong>Week 7:&#160;</strong>Interrupt structure and the 8259 Interrupt Controller. Priority interrupt systems</li>\r\n<li><strong>Week 8:&#160;</strong>DMA.</li>\r\n<li><strong>Week 9:&#160;</strong>I 2 C buses and devices.</li>\r\n<li><strong>Week 10:&#160;</strong>Multibus and shared bus structures - 8289.</li>\r\n</ul>\r\n<p><strong>COMPUTER USAGE:&#160;</strong>Students use PCs to assemble and emulate programs before burning into E/EPROMs. Students use device programmers to generate 2764/2864 program chips for their projects.</p>\r\n<p><strong>LABORATORY PROJECTS:</strong>&#160;Four labs starting from a simple micro-controller system on a breadboard and leading to a small-scale embedded application that uses most of the typical features (timers, serial IO, ADC/DAC, etc.) built into micro-controllers.</p>\r\n<p><strong>GRADES:</strong></p>\r\n<ul>\r\n<li>Homework - 10 %</li>\r\n<li>Labs Assignments - 30 %</li>\r\n<li>Midterm Exam - 30 %</li>\r\n<li>Endterm Exam - 30 %</li>\r\n</ul>\r\n<p><strong>COURSE OBJECTIVES: When a student completes this course, s/he should be able to:</strong></p>\r\n<ol>\r\n<li>Design an embedded system, including both hardware and software.</li>\r\n<li>Decide what level of sophistication the microprocessor needs to have and what additional devices are needed based on the features of the application.</li>\r\n<li>Determine how to connect the microprocessor, memories, and extra devices into a working system.</li>\r\n<li>Read device-timing diagrams for processors, memories, and the like, and determine device timing compatibility.</li>\r\n<li>Read device data sheets and pinout descriptions and understand how to wire the devices together.</li>\r\n<li>Build an embedded system, both hardware and software, using DMA and/or interrupts.</li>\r\n<li>Understand how to use auxiliary circuits, like latches, bus drivers and demultiplexors, to build a system.</li>\r\n<li>Understand how to use UARTS, DAC/ADC devices, serial devices, timer/counter devices and similar devices.</li>\r\n<li>Design the software and coordinate the software and the hardware into an integrated working system.</li>\r\n<li>Identify and communicate the privacy, security, and sustainability aspects of a particular embedded system, as well as design the software and hardware considering these factors.</li>\r\n</ol>\r\n<p><strong>ABET CONTENT CATEGORY:&#160;</strong>100% Engineering (Design component).</p>"
        }
    },
    "348": {
        "course_name": "Intro to Artificial Intelligence",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "12:30-1:50 MW",
        "fall_instructor": "Alam",
        "winter_time": "11-11:50 MWF",
        "winter_instructor": "Alam",
        "spring_time": "2-3:20 TuTh",
        "spring_instructor": "Rubenstein",
        "other": {
            "Prerequisites": "Students must have taken [EECS 111 and (EECS 214 or be a CogSci major)] or be a Computer Science Masters or PhD student, or obtain instructor permission, in order to register for this course.",
            "Description": "<p>Core techniques and applications of artificial intelligence. Representation retrieving and application of knowledge for problem solving, planning, probabilistic inference, and natural language understanding.<span></span></p>\r\n<ul>\r\n<li><em>This course satisfies the AI Breadth Requirement.</em></li>\r\n</ul>\r\n<p><strong>OPTIONAL TEXTBOOK</strong>: Russell &amp; Norvig&#160;<em>, Artificial Intelligence: A Modern Approach&#160;</em>, Prentice Hall, 3rd edition</p>\r\n<p><strong>COURSE</strong>&#160;<strong>INSTRUCTOR:</strong> <a href=\"mailto:mohammedalam2009@u.northwestern.edu\">Mohammed A. Alam</a> (Fall &amp; Winter) &amp; <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/rubenstein-michael.html\" rel=\"noopener\" target=\"_blank\">Prof. Rubenstein</a> (Spring)<br/><strong>COURSE COORDINATOR:</strong> <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/hammond-kristian.html\">Prof</a><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/hammond-kristian.html\">. Kristian Hammond</a></p>\r\n<p><strong>COURSE GOALS:&#160;</strong>The goal of this course is to expose students to the basic ideas, challenges, techniques, and problems in artificial intelligence. Topics include strong (knowledge-based) and weak (search-based) methods for problem solving and inference, and alternative models of knowledge and learning, including symbolic, statistical and neural networks.</p>\r\n<p><strong>DETAILED COURSE TOPICS:</strong></p>\r\n<ul>\r\n<li>Philosophical foundations of artificial intelligence</li>\r\n<li>Intelligent agents</li>\r\n<li>Search, including A*, iterative deepening</li>\r\n<li>Logical formalisms, propositional and first order predicate calculus</li>\r\n<li>Planning, from STRIPS to Partial Order Planning</li>\r\n<li>Probability &amp; uncertainty, including Bayesian inference and Bayes networks</li>\r\n<li>Machine learning, including decision trees, neural nets, hill climbing, genetic algorithms</li>\r\n</ul>\r\n<p><strong>COURSE OBJECTIVES:&#160;</strong>After this course, students should be able to</p>\r\n<ul>\r\n<li>Articulate key problems, both technical and philosophical, in the development of artificial intelligence</li>\r\n<li>Teach themselves more about AI through reading texts and research articles in the field</li>\r\n<li>Apply AI techniques in the development of problem-solving and learning systems</li>\r\n</ul>"
        }
    },
    "349": {
        "course_name": "Machine Learning",
        "summer_time": "2-3:20 TuTh",
        "summer_instructor": "Alam",
        "fall_time": "9:30-10:50 MW or 8-9:20 TuTh",
        "fall_instructor": "Pardo & Wood-Doughty",
        "winter_time": "12:30-1:50 MW",
        "winter_instructor": "Alam",
        "spring_time": "9:30-10:50 MW",
        "spring_instructor": "Wood-Doughty",
        "other": {
            "Prerequisites": "Prerequisites: COMP_SCI grad standing OR (COMP_SCI 214 and (MATH 240-0 or GEN_ENG 205-1 or GEN_ENG 206-1) and (IEMS 201-0 or IEMS 303-0 or ELEC_ENG 302-0 or STAT 210-0 or MATH 310-1)",
            "Description": "<p>Description</p>\r\n<p>Machine Learning is the study of algorithms that improve automatically through experience. Topics covered typically include Bayesian Learning, Decision Trees, Genetic Algorithms, Neural Networks.</p>\r\n<ul>\r\n<li><em>This course satisfies the AI Breadth Requirement.</em></li>\r\n</ul>\r\n<p>REQUIRED TEXTBOOKS:&#160;</p>\r\n<ul>\r\n<li>Summer, Fall, Spring &amp; Winter Section:Online readings provided by the course instructor.</li>\r\n</ul>\r\n<p>REFERENCE TEXTBOOKS:&#160;Selected papers from journals and conferences presenting research on Machine Learning</p>\r\n<p>COURSE COORDINATOR:&#160;<a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/downey-douglas.html\">Prof. Doug Downey</a> &amp; <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/pardo-bryan.html\">Prof. Bryan Pardo</a><br/>COURSE INSTRUCTOR:&#160;<a href=\"mailto:pardo@northwestern.edu\">Prof. Pardo</a> (Fall), <a href=\"mailto:mohammedalam2009@u.northwestern.edu\">Mohammed A. Alam</a> (Summer &amp; Winter) &amp; Zach Wood-Doughty&#160;(Spring)</p>\r\n<p>COURSE GOALS:&#160;To expose students to concepts and methods in machine learning. To give students a basic set of machine learning tools applicable to a variety of problems. To teach students critical analysis of machine learning approaches so that the student can determine when a particular technique is applicable to a given problem and apply or implement that technique.</p>\r\n<p>DETAILED COURSE TOPICS:</p>\r\n<p>This is an example set of topics. The exact subset will vary depending on year.</p>\r\n<ul>\r\n<li>Decision Tree Learning</li>\r\n<li>Nonlinear Regression</li>\r\n<li>Artificial Neural Networks</li>\r\n<li>Evaluating Hypotheses</li>\r\n<li>Bayesian Learning</li>\r\n<li>Computational Learning Theory</li>\r\n<li>Instance-Based Learning</li>\r\n<li>Genetic Algorithms</li>\r\n<li>Learning Sets of Rules</li>\r\n<li>Reinforcement Learning</li>\r\n<li>Clustering</li>\r\n</ul>\r\n<p>HOMEWORK ASSIGNMENTS:&#160;Reading assignment from the Machine Learning Literature. Coding assignments implementing machine learning algorithms, and experiments testing ML algorithms on real-world data.</p>\r\n<p>LABORATORY ASSIGNMENTS:&#160;There will be several lab assignments. Students will be required to implement machine learning algorithms and analyze their performance on example sets of data. Example algorithms include: feed-forward multilayer neural networks, decision trees, hidden Markov models, automated clustering techniques.</p>\r\nGRADES:&#160;Will be based on a combination of problem sets, reading assignments and programming assignments."
        }
    },
    "352": {
        "course_name": "Machine Perception of Music & Audio",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "",
        "winter_instructor": "",
        "spring_time": "",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "Prior programming experience sufficient to be able to do laboratory assignments in PYTHON, implementing algorithms and using libraries without being taught to do so (there is no language instruction on Python). Having taken COMP_SCI 211 and COMP_SCI 214 would demonstrate this experience.",
            "Description": "<p>Machine extraction of musical structure in audio, MIDI and score files, covering areas such as source separation and perceptual mapping of audio to machine-quantifiable measures.</p>\r\n<ul>\r\n<li>Approved for the Breadth Interfaces &amp; project requirement in the CS curriculum.</li>\r\n</ul>\r\n<p><strong>REQUIRED TEXTBOOK</strong>: Fundamentals of Music Processing<em><a href=\"http://www.amazon.com/gp/product/0127756957/qid=1136322712/sr=1-1/ref=sr_1_1/002-5717768-2283208?s=books&amp;v=glance&amp;n=283155\"></a></em></p>\r\n<p><strong>COURSE COORDINATOR:&#160;<a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/pardo-bryan.html\" target=\"_self\">Prof. Bryan Pardo</a></strong></p>\r\n<p><strong>DETAILED COURSE TOPICS:</strong> See the course webpage at...</p>\r\n<p><a href=\"http://www.cs.northwestern.edu/&#126;pardo/courses/eecs352/index.php\">http://www.cs.northwestern.edu/&#126;pardo/courses/eecs352/index.php</a></p>\r\n<p><strong>ASSIGNMENTS: </strong>See the course webpage at...</p>\r\n<p><a href=\"http://www.cs.northwestern.edu/&#126;pardo/courses/eecs352/index.php\">http://www.cs.northwestern.edu/&#126;pardo/courses/eecs352/index.php</a></p>\r\n<p><strong>COURSE OBJECTIVES:</strong> When a student completes this course, s/he should:</p>\r\n<ul>\r\n<li>have a basic understanding of how audio is encoded by computers</li>\r\n<li>understand the basics of human audio perception of sound</li>\r\n<li>be able to create tools to find salient structures in music audio</li>\r\n<li>be able to understand current research in the music information retrieval community</li>\r\n<li>be able to think critically about arts and technology</li>\r\n</ul>"
        }
    },
    "355": {
        "course_name": "Digital Forensics and Incident Response",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "",
        "winter_instructor": "",
        "spring_time": "3:30-4:50 MW",
        "spring_instructor": "Ilyas",
        "other": {
            "Prerequisites": "",
            "Description": "<p><strong>OVERVIEW:</strong> This course will focus on Digital Forensics and Incident Response (Investigations). This class will introduce the basic theory of Digital Forensics and in the lab, we will actually apply the knowledge in practical scenarios. The goal is to learn how to investigate the digital artifacts left on hard drives, logs and other networking devices. The course shall prepare you to conduct data preservation and analysis on Windows, Linux and Macintosh platforms. Students will also get exposure to the Techniques, Tactics and Procedures (TTPs) of the prominent Threat Actors and will learn to conduct digital investigations with a sound process.</p>\r\n<p>The co-instructor of this course will be an Incident Response Practitioner&#160;(Jibran Ilyas from Aon Cyber Solutions) who investigates data breaches for living, therefore, the course material and homework assignments will be based on real life forensic investigations.&#160;</p>\r\n<p>We will learn about different kind of attacks and how they can be detected via forensic investigations. Understanding the concepts of Evidence Collection, Host-Based Analysis, Memory (RAM) Analysis and Log Analysis will be essential in all fields of software development and computing. If you have any questions, please contact one of the instructors below or send an email to all instructors by clicking <strong><a href=\"mailto:eecs354-staff@cs.northwestern.edu\">here</a></strong>.</p>\r\n<ul>\r\n<li><em><strong>Formerly COMP_SCI 397/497.</strong></em></li>\r\n<li><em>This course satisfies the Project Requirement.</em><em></em></li>\r\n</ul>\r\n<p><strong>COURSE INSTRUCTOR:</strong> <a href=\"mailto:jibran.ilyas@gmail.com\" rel=\"noopener noreferrer\" target=\"_blank\">Jibran Ilyas</a><strong><br/></strong></p>\r\n<p><strong>COURSE COORDINATOR:&#160;&#160;</strong><a href=\"http://www.cs.northwestern.edu/%7Eychen/\" rel=\"noopener noreferrer\" target=\"_blank\">P</a><a href=\"http://www.cs.northwestern.edu/%7Eychen/\" rel=\"noopener noreferrer\" target=\"_blank\">rof. Yan Chen</a></p>\r\n<p><strong>PREREQUISITES:</strong></p>\r\n<ul type=\"disc\">\r\n<li><strong><a href=\"213-20.html\">COMP_SCI 213</a></strong> (Introduction to Systems)</li>\r\n<li><strong><a href=\"354.html\">COMP_SCI 354</a></strong> (Networking Penetration and Security) OR <strong><a href=\"343.html\">COMP_SCI 343</a></strong> (Operating Systems)</li>\r\n<li>If you have taken neither <a href=\"354.html\"><strong>COMP_SCI 354</strong></a> nor <strong><a href=\"343.html\">COMP_SCI 343</a></strong> yet, but have scored A- or higher in EECS 213, please email me your CV with information on related courses taken and grades. I will make a decision after collecting all the feedback.</li>\r\n</ul>\r\n<p><strong>LOCATION &amp; TIME:</strong></p>\r\n<p>Location: Mondays in M164, Technological Institute, Wednesdays in Wilkinson Lab.<br/> Time: Mon/Wed 11:00am - 12:20pm</p>\r\n<p><strong>OFFICE HOURS:<br/> </strong></p>\r\n<ul type=\"disc\">\r\n<li>On-site hours in Wilkinson Lab after Wed class</li>\r\n<li>Available upon requests.</li>\r\n</ul>\r\n<p><strong>GRADING:</strong></p>\r\n<ul type=\"disc\">\r\n<li>40% Lab Assignments</li>\r\n<li>25% Midterm Project</li>\r\n<li>35% Final Project</li>\r\n</ul>\r\n<p>For the labs, please remember to check out with one of the teaching staff at the end of each lab, and then we will discuss solutions.</p>"
        }
    },
    "358": {
        "course_name": "Intro to Parallel Computing",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "",
        "winter_instructor": "",
        "spring_time": "",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "COMP_SCI 211",
            "Description": "<p>Introduction to parallel computing for scientists and engineers. Shared memory parallel architectures and programming, distributed memory, message-passing data-parallel architectures, and programming.</p>\r\n<p><strong>REQUIRED TEXT:</strong> Ananth Grama, Anshul Gupta, George Karypis, and Vipin Kumar. (2003). <em>Introduction to Parallel Computing, 2nd Edition</em>.&#160;Pearson Education/Addison Wesley.&#160;ISBN-13: 9780201648652</p>\r\n<p><strong>REFERENCE TEXTS:</strong></p>\r\n<ul>\r\n<li>Ian Foster. (1995). <em>Designing and Building Parallel Programs: Concepts and Tools for Parallel Software Engineering</em>, Addison Wesley.&#160;ISBN-13: 978-0201575941</li>\r\n<li>Barr E. Bauer. (1992).&#160;<em>Practical Parallel Programming</em>, Academic Press.&#160;ISBN-13: 978-1493306039&#160;</li>\r\n<li>William Gropp et al. (1994).&#160;<em>Using MPI: Portable Parallel Programming with the Message Passing&#160;</em><em>Interface</em>, MIT Press.</li>\r\n<li>Charles H. Koelbel et al. (1994).&#160;<em>The High-Performance Fortran Handbook</em>, MIT Press.&#160; ISBN-13: 978-0262610940</li>\r\n</ul>\r\n<p><strong>COURSE COORDINATOR:&#160;<a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/memik-gokhan.html\" target=\"_self\">Prof. Gokhan Memik</a></strong></p>\r\n<p><strong>COURSE GOALS:&#160;</strong>To provide an introduction to the field of parallel computing. The goals are to provide an overview of the three basic types of parallel computing: shared memory, distributed memory message-passing, and data parallel computing, with hands-on experience with real parallel programming on actual parallel machines.</p>\r\n<p><strong>PREREQUISITES BY TOPIC:</strong></p>\r\n<ol>\r\n<li>An overview of computer architecture</li>\r\n<li>Basic concepts of processors, ALUs, memories, caches, input-output</li>\r\n<li>Basic to intermediate concepts on programming of serial computers using C or Fortran</li>\r\n<li>Simple concepts of data structures like arrays and link lists in programs</li>\r\n<li>Some knowledge of scientific and engineering applications</li>\r\n</ol>\r\n<p><strong>DETAILED COURSE TOPICS:</strong></p>\r\n<ul>\r\n<li><strong>Week 1&#160;</strong>: Introduction to parallel computing: motivation for parallel computing, options of parallel computing, economics of parallel computing, basic concepts of parallel algorithms. Introduction to parallel programming: data and task parallelism, coarse and fine grain parallelism, performance of parallel programs, load balancing and scheduling, analysis of simple parallel programs.</li>\r\n<li><strong>Week 2&#160;</strong>: Overview of shared memory parallel architectures: memory organization, interconnect organization, cache coherence, case studies of machines such as SGI Challenge, IBM J-30, HP/Convex Exemplar. Introduction to shared memory parallel programming: shared memory model, process creation and destruction, mutual exclusion, locks, barriers.</li>\r\n<li><strong>Week 3:&#160;</strong>Explicit shared memory programming: loop scheduling, static and dynamic, loop parallelization strategies. Shared memory parallel programming: use of PTHREADS libraries, case studies of explicit parallel programming, computation of PI, matrix multiplication, solution of partial differential equations.</li>\r\n<li><strong>Week 4&#160;</strong>: Implicit shared memory parallel programming: use of compiler directives for parallel programming, DOALL and DOACROSS and PRAGMA directives for loop level parallelism, parallel programming examples using directives.</li>\r\n<li><strong>Week 5&#160;</strong>: Distributed memory multicomputer architectures: overview of distributed memory parallel machines, message passing schemes, store and forward versus wormhole routing, interconnection networks, case studies of parallel machines such as Intel Paragon, IBM SP-2, Thinking Machine CM-5. Global Communication operations in distributed memory machines: one-to-all broadcast, reduction, shift, scatter, gather operations, analysis of performance of above operations on various parallel architectures.</li>\r\n<li><strong>Week 6&#160;</strong>: Introduction to message-passing programming: basics of message passing, global and local addresses, single-program multiple data (SPMD programs) introduction to Message Passing Interface (MPI). Intermediate concepts in message passing programming: global and local addresses, loop scheduling for parallel loops. Advanced message-passing concepts: topologies, and decompositions, case studies of example applications, matrix multiplication, solution of partial differential equations.</li>\r\n<li><strong>Week 7&#160;</strong>: Introduction to SIMD parallel architectures: Single-instruction multiple data stream architectures, control and data units, interconnection networks, case studies of machines such as Thinking Machines CM-2, CM-5 and Masspar MP-2. Introduction to data parallel programming: Fortran-90, array sections, array operations, array intrinsic operations.</li>\r\n<li><strong>Week 8&#160;</strong>: Introduction to High Performance Fortran (HPF): FORALL directives, INDEPENDENT directives, simple parallel programs. High Performance Fortran data distribution and alignment directives, simple parallel programming examples, matrix multiplication, solution of partial differential equations.</li>\r\n<li><strong>Week 9&#160;</strong>: Methodology for Parallel Algorithm Design: concurrency, locality, scalability, modularity; partitioning, agglomeration, communication, mapping, performance analysis of parallel algorithms. Parallel Matrix Algorithms: matrix representations, parallel dense matrix operations, matrix-vector, matrix-matrix multiplication, solutions of linear system of equations.</li>\r\n<li><strong>Week 10&#160;</strong>: Parallel Sparse Matrix Solvers: sparse matrix representations, parallel iterative methods, parallel direct methods. Parallel Search Algorithms: optimization methods, parallel best first search, parallel depth-first search, speedup anomalies.</li>\r\n</ul>\r\n<p><strong>COMPUTER USAGE:&#160;</strong>Students get hands-on parallel programming experience on 3 parallel machines at the Electrical and Computer Engineering Department, including a 16 processor IBM SP-2 distributed memory machine, an 8 processor IBM J-40 shared memory machine, and an 8-processor SGI Origin 2000 distributed shared memory multiprocessor. In addition, students will use the machines in the Wilkinson Lab as a cluster as well as access a dedicated cluster with 16 processors for the final project.</p>\r\n<p><strong>HOMEWORK ASSIGNMENTS:</strong></p>\r\n<ul>\r\n<li><strong>Homework 1:&#160;</strong>Design problems dealing with shared memory parallel programming, examples of program transformations to parallelize loops, use of explicit and implicit parallel programs using both the SGI directives and PTHREADS.</li>\r\n<li><strong>Homework 2:&#160;</strong>Design problems dealing with distributed memory message-passing parallel programming, use of MPI, analysis of communication patterns.</li>\r\n<li><strong>Homework 3:&#160;</strong>Design programs related to data parallel programming, use of High Performance Fortran, data layouts and alignments.</li>\r\n<li><strong>Homework 4:&#160;</strong>Design of parallel algorithms for various problems including matrix operations on dense and sparse matrices, analysis of parallel algorithms.</li>\r\n</ul>\r\n<p><strong>LABORATORY PROJECTS:</strong></p>\r\n<ul>\r\n<li><strong>Lab 1:&#160;</strong>Development of a parallel program for solving a set of linear system of equations using Gaussian Elimination using both explicit parallel programs with PTHREADS and implicit parallel programs using SGI directions, experiments on SGI Origin 2000 and IBM J-40 shared memory multiprocessors.</li>\r\n<li><strong>Lab 2:&#160;</strong>Development of a parallel program for solving a set of linear system of equations using Gaussian Elimination using message-passing parallel programming using C or Fortran with MPI message passing, and experiments on IBM SP-2 distributed memory and SGI Origin 2000 multiprocessor for portability.</li>\r\n<li><strong>Lab 3:&#160;</strong>Development of a parallel program for solving a set of linear system of equations using Gaussian Elimination using data parallel programming with High Performance Fortran and experiments on the IBM SP-2 distributed memory multiprocessor.</li>\r\n</ul>\r\n<p><strong>GRADES:</strong></p>\r\n<ul>\r\n<li>Four homeworks - 20 %</li>\r\n<li>Three labs - 20 %</li>\r\n<li>Midterm exam - 30%</li>\r\n<li>Final exam - 30%</li>\r\n</ul>\r\n<p><strong>COURSE OBJECTIVES: When a student completes this course, s/he should be able to:</strong></p>\r\n<ol>\r\n<li>Solve a given problem using parallel computing. Analyze the problem for various ways of parallelization, and design the best parallel algorithm.</li>\r\n<li>Have a broad understanding of shared memory parallel architectures and programming.</li>\r\n<li>Design a shared memory parallel program for a given parallel algorithm using both explicit and implicit parallel programming, measure real speedups, identify bottlenecks, and devise improvements to the parallel program.</li>\r\n<li>Have a broad understanding of distributed memory parallel architectures and programming.</li>\r\n<li>Design a message-passing distributed memory parallel program for a given parallel algorithm using the portable Message-Passing Interface (MPI), measure real speedups, identify bottlenecks, and devise improvements to the parallel program.</li>\r\n<li>Have a broad understanding of data parallel architectures and programming.</li>\r\n<li>Design a data parallel program for a given parallel algorithm using High Performance Fortran (HPF), measure real speedups, identify bottlenecks, and devise improvements to the parallel program.</li>\r\n</ol>\r\n<p><strong>ABET CONTENT CATEGORY:&#160;</strong>100% Engineering (Design component).</p>"
        }
    },
    "361": {
        "course_name": "Computer Architecture I ",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "MW 12:30-1:50",
        "fall_instructor": "G. Memik",
        "winter_time": "",
        "winter_instructor": "",
        "spring_time": "",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "(COMP_ENG 205 or COMP_SCI 213) and (COMP_ENG 303 or COMP_ENG 355) or graduate standing ",
            "Description": "<div class=\"item-page\">\r\n<p>Design and understanding of the computer system as a whole unit. Performance Evaluation and its role in computer system design; Instruction Set Architecture design, Datapath design and optimizations (e.g., ALU); Control design; Single cycle, multiple cycle and pipeline implementations of processor; Hazard detection and forwarding; memory hierarchy design; Cache memories, Virtual memory, peripheral devices and I/O.</p>\r\n<p><strong>REQUIRED TEXTS</strong>:<em>&#160;Computer Organization and Design: The Hardware/Software Interface</em>, Fifth Edition. David A. Patterson and John L. Hennessy; Publisher: Morgan Kaufmann. Publication Date: 2013.&#160;<span class=\"a-color-secondary\">ISBN-13:&#160;</span>978-0124077263&#160;<span class=\"a-color-secondary\">ISBN-10:&#160;</span>0124077269</p>\r\n<p><strong>COURSE</strong>&#160;<strong>INSTRUCTOR:</strong>&#160;<strong><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/memik-gokhan.html\" target=\"_self\">Prof. Gokhan Memik</a></strong></p>\r\n<p><strong>COURSE COORDINATORS:&#160;<a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/memik-gokhan.html\" target=\"_self\">Prof. Gokhan Memik</a></strong>&#160;and&#160;<strong><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/hardavellas-nikos.html\" target=\"_self\">Prof. Nikos Hardavellas</a></strong></p>\r\n<p><strong>COURSE GOALS:</strong>&#160;To teach designing a complete computer system. Includes designing instruction set architecture, datapaths, control, memory hierarchy including cache memories, virtual memory and I/O systems.<strong><br/> <br/> PREREQUISITES BY TOPIC:</strong></p>\r\n<ul>\r\n<li>Basic logic design</li>\r\n<li>Understanding adders, multipliers and dividers</li>\r\n<li>Assembly language</li>\r\n</ul>\r\n<p><strong>DETAILED COURSE TOPICS:</strong></p>\r\n<ul>\r\n<li><strong>Week 1:&#160;</strong>Introduction: Components of a computer system. Evolution of Technology. Factors affecting computer systems design (e.g., technology, applications, performance requirements). READING : Chapter 1.</li>\r\n<li><strong>Week 2:&#160;</strong>Impact of performance in computer system design. Measuring performance, performance metrics, interpreting performance, selecting applications and programs for performance evaluation, comparing and summarizing performance. Benchmarks (SPEC 92) and their results on some real machines. How not to evaluate performance. READING : Chapter 2.</li>\r\n<li><strong>Week 3:&#160;</strong>Instruction Set Architecture design. The role of an instruction set. interface between hardware and software; issues to consider when designing an instruction set; addressing modes. READING : Chapter 3.</li>\r\n<li><strong>Week 4:&#160;</strong>Arithmetic and Logic Units (ALU) for computers. Number system, addition and subtract, adders; multiplication and multipliers; division and dividers; floating point numbers and floating point units; Examples from existing systems. READING : Chapter 4.</li>\r\n<li><strong>Week 5:&#160;</strong>Processor Design. Datapath and control; single cycle design and implementation; simplifying control design; multicycle implementation of datapath and control; example from a real system. READING : Chapter 5.</li>\r\n<li><strong>Week 6:&#160;</strong>Pipelining. Basic concepts in pipelining; datapath for pipeline processor implementation, data hazard and forwarding, data hazard and stalling; control design for pipelines, superscaler design; Examples. READING : Chapter 6.</li>\r\n<li><strong>Week 7:&#160;</strong>Memory Hierarchy: Cache memories. Introduction to caches, measuring and improving performance of caches; design alternatives, direct map, associative caches; replacement policies; examples. READING Chapter 7.</li>\r\n<li><strong>Week 8:&#160;</strong>Virtual Memory: basic design, address translation, placement and replacement; cost and performance issues; common framework for memory hierarchies, Translation Lookaside Buffers. READING Chapter 7.</li>\r\n<li><strong>Week 9:&#160;</strong>Input-Output and Peripheral Devices. I/O performance and measures, technology and characteristics of disks. Busses and protocols. Connecting I/O devices to memory and processor. READING Chapter 8.</li>\r\n<li><strong>Week 10:&#160;</strong>I/O systems design. RAIDs. Memory bandwidth and bus bandwidth requirements for graphics. Example of a typical I/O system. Introduction to multiprocessors. Summary/ READING: Chapter 8 and 9.</li>\r\n</ul>\r\n<p><strong>COMPUTER USAGE:&#160;</strong>Students use Mentor Graphics design tool to implement a simple single cycle processor with limited instruction set. Use processor simulators to learn and evaluate working of processors. Cache simulators to evaluate cache memory performance.</p>\r\n<p><strong>PROJECT:&#160;</strong>A quarter long project that entails designing a single cycle processor using mentor graphics tool and its evaluation using simple programs. Each week students submit progress on additions to the design.</p>\r\n<p><strong>GRADES:</strong></p>\r\n<ul>\r\n<li>Five homeworks - 20 %</li>\r\n<li>Project - 30 %</li>\r\n<li>Midterm exam - 20%</li>\r\n<li>Final exam - 30%</li>\r\n</ul>\r\n<p><strong>COURSE OBJECTIVES:&#160;</strong>When a student completes this course, s/he should be able to:</p>\r\n<p>&#8226;&#160; Understand the architecture of a basic computer system and its components, and the role of performance in designing computer systems.</p>\r\n<p>&#8226;&#160; Understand how to design and instruction set and its impact on processor design. To design ALU and processor datapath and control.</p>\r\n<p>&#8226;&#160; Design pipeline processor including datapath and control, and design to detect and resolve hazards.</p>\r\n<p>&#8226;&#160; Understand memory hierarchy design and its impact on overall processor performance. Design cache memory based on the characteristics of the expected workload. Understand the workings of virtual memory and efficient design for TLBs</p>\r\n<p>&#8226;&#160; Understand the I/O system and its design. Be Knowledgeable about Busses and bandwidth requirements to support heterogeneous I/O devices. Understand the disk technology and its impact on performance.</p>\r\n<p><strong>ABET CONTENT CATEGORY:&#160;</strong>100% Engineering (Design component).</p>\r\n"
        }
    },
    "362": {
        "course_name": "Computer Architecture Project",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "TuTh 11-12:20",
        "winter_instructor": "G. Memik",
        "spring_time": "",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "COMP_ENG 361 and COMP_SCI 230 or COMP_SCI 211",
            "Description": "<p>Quarter long team project that entails designing a processor for a complete Instruction Set. Involves ISA design, design of components, datapath and control for a pipelined processor to implement the ISA. The design is performed using industry strength design tools and VHDL is used as the design specification language. The design is evaluated using benchmark programs for correctness and performance.</p>\r\n<p><strong>REQUIRED TEXTS:</strong>&#160;D. Patterson and J. Hennessey,&#160;<em>Computer Organization and Design: The Hardware/Software Interface&#160;</em>, Morgan Kaufmann, 3rd edition (2004)</p>\r\n<p><strong>REFERENCE TEXTS:</strong>&#160;J. Hennessey and D. Patterson,&#160;<em>Computer Architecture: A Quantitative Approach&#160;</em>, Morgan Kaufmann, 3rd edition (2002)</p>\r\n<p><strong><strong>INSTRUCTOR:</strong></strong> <strong>TBA&#160;</strong></p>\r\n<p><strong>COURSE COORDINATOR: <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/joseph-russ.html\" target=\"_self\">Prof. Russ Joseph</a></strong></p>\r\n<p><strong>COURSE GOALS:&#160;</strong>To learn designing and implementing processor architecture and learn to work in design teams. To understand the design process based on requirements and then implementing and evaluating the design using tools.</p>\r\n<p><strong>PREREQUISITES BY TOPIC:</strong></p>\r\n<ul>\r\n<li>Instruction Set Architecture</li>\r\n<li>Understanding adders, multipliers and dividers</li>\r\n<li>Datapath, Control, Pipelining</li>\r\n</ul>\r\n<p><strong>DETAILED COURSE TOPICS:</strong></p>\r\n<p><strong>Week 1:&#160;</strong>Form teams. Understand project. Learn instruction set for which processor will be designed.</p>\r\n<p><strong>Week 2:&#160;</strong>Each team presents a \"first\" plan for the processor design, validation and evaluation. Begin to assign OPCODES to ISA.</p>\r\n<p><strong>Week 3:&#160;</strong>Present a refined plan of processor. Start implementing components for ALU and control using design tools and VHDL.</p>\r\n<p><strong>Week 4:&#160;</strong>Present the progress in previous week and describe how the problems faced during last week were solved. Describe progress on component implementation. Present plan for component integration.</p>\r\n<p><strong>Week 5:&#160;</strong>Present the progress in previous week and describe how the problems faced during last week were solved. Describe progress on component implementation. Present the final design of the processor including control. Midterm presentations on the design.</p>\r\n<p><strong>Week 6:&#160;</strong>Present the progress in previous week and describe how the problems faced during last week were solved. Describe progress on component implementation. Demonstrate progress on integration of components. Present the testing of components and overall test and evaluation plan. Adapt application codes to be evaluated.</p>\r\n<p><strong>Week 7:&#160;</strong>Present the progress in previous week and describe how the problems faced during last week were solved. Describe progress on integration. Demonstrate the current design for initial evaluation.</p>\r\n<p><strong>Week 8:&#160;</strong>Present the progress in previous week and describe how the problems faced during last week were solved. Demonstrate simple programs running against the processor simulator (written in VHDL).</p>\r\n<p><strong>Week 9:&#160;</strong>Present the progress in previous week and describe how the problems faced during last week were solved. Demonstrate bug fixes and performance enhancements.</p>\r\n<p><strong>Week 10:&#160;</strong>Present the progress in previous week and describe how the problems faced during last week were solved. Demonstrate the final design against benchmark programs, Present the overall design report.</p>\r\n<p><strong>COMPUTER USAGE:&#160;</strong>Students use Mentor Graphics design tools and VHDL to implement a pipelined processor.</p>\r\n<p><strong>PROJECT:&#160;</strong>The class is a quarter long team project to design a pipelined processor.</p>\r\n<p><strong>GRADES:</strong></p>\r\n<ul>\r\n<li>Homeworks/Weekly Presentations - 25 %</li>\r\n<li>Project-Final Design - 75 %</li>\r\n</ul>\r\n<p><strong>COURSE OBJECTIVES: When a student completes this course, s/he should be able to:</strong></p>\r\n<ul>\r\n<li>Understand the design process for computers and learn how to work in teams to achieve the goals of the project.</li>\r\n<li>Understand the architecture of a basic computer system and its components, and the role of performance in designing computer systems.</li>\r\n<li>Understand how to design and instruction set and its impact on processor design. To design ALU and processor datapath and control. Design pipeline processor including datapath and control, and design to detect and resolve hazards.</li>\r\n<li>Understand how to use CAD tools to design a processor.</li>\r\n</ul>\r\n<p><strong>ABET CONTENT CATEGORY:&#160;</strong>100% Engineering (Design component).</p>"
        }
    },
    "371": {
        "course_name": "Knowledge Representation and Reasoning",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "2-3:20 TuTh",
        "winter_instructor": "Forbus",
        "spring_time": "",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "Prerequisite: COMP_SCI 348 or COMP_SCI 325, or equivalent experience with artificial intelligence.",
            "Description": "<p>Principles and practices of knowledge representation, including logics, ontologies, common sense knowledge, and semantic web technologies.</p>\r\n<ul>\r\n<li><em>This course satisfies the Project Requirement&#160;</em>&amp; AI Breadth Requirement.<span><span></span></span></li>\r\n</ul>\r\n<p><strong>REQUIRED TEXTBOOKS</strong>:</p>\r\n<ul>\r\n<li>R. Brachman &amp; H. Levesque, \"<em>Knowledge Representation and Reasoning</em>,\" Morgan-Kaufmann; ISBN-10: 1558609326, ISBN-13: 978-1558609327&#160;&#160;</li>\r\n<li>D. Allemang &amp; J. Hendler, <em>\"Semantic Web for the Working Ontologist: Effective Modeling in RDFS and OWL</em>,\" 2nd Edition, Morgan-Kaufmann; ISBN-13: 978-0123859655/ISBN-10:&#160; 0123859654</li>\r\n</ul>\r\n<p><strong>COURSE COORDINATOR:</strong> <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/forbus-ken.html\" target=\"_self\">Prof. Kenneth D. Forbus</a></p>\r\n<p><strong>COURSE INSTRUCTOR:</strong> <a href=\"mailto:mohammedalam2009@u.northwestern.edu\"></a><a href=\"mailto:forbus@northwestern.edu\">Prof. Forbus</a><a href=\"mailto:mohammedalam2009@u.northwestern.edu\"></a><br/> <br/> <strong>FINAL EXAM:</strong>&#160;No<br/> <br/> <strong>COURSE TYPICALLY OFFERED:</strong>&#160;Winter Term<br/> <br/> <strong>MAJOR:</strong>&#160;Computer Science<br/> <br/> <strong>MAJOR/MINOR REQUIREMENTS THIS COURSE MAY FULFILL:&#160;</strong><br/> AI Elective, also advanced Cognitive Science course for Cognitive Science majors in WCAS</p>"
        }
    },
    "376": {
        "course_name": "Game Design and Development",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "12-12:50 MWF",
        "fall_instructor": "Horswill",
        "winter_time": "",
        "winter_instructor": "",
        "spring_time": "",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "COMP_SCI 214, familiarity with calculus and vector algebra",
            "Description": "<p>Fundamental concepts of software for computer games and other simulation-based media.&#160; Topics will include game design (selecting rules, resources, and player objectives), 2D and 3D game programming, representation of space, physics and collision detection, 3D animation engines, and performance engineering issues for real-time rendering.&#160;</p>\r\n<ul>\r\n<li><em>This course fulfills the Interfaces Breadth requirement.</em></li>\r\n</ul>\r\n<p><strong>INSTRUCTOR:</strong> <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/horswill-ian.html\" target=\"_self\">Prof. Ian Horswill</a></p>\r\n<p><strong>TEXTBOOKS <em>Optional</em>:</strong></p>\r\n<ul>\r\n<li><em><a href=\"https://www.amazon.com/Engine-Architecture-Second-Jason-Gregory/dp/B00MMOJ076/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1470348191&amp;sr=1-1&amp;keywords=game+engine+architecture#nav-subnav\">Game Engine Architecture</a></em>, Jason Gregory, 2nd Edition; ISBN 9781466560017</li>\r\n<li><em><a href=\"https://urldefense.proofpoint.com/v2/url?u=https-3A__www.amazon.com_C-2DPlayers-2DGuide-2D2nd_dp_0985580127_ref-3Dsr-5F1-5F1-3Fs-3Dbooks-26ie-3DUTF8-26qid-3D1470348062-26sr-3D1-2D1-26keywords-3Dc-2523&amp;d=CwMFAg&amp;c=yHlS04HhBraes5BQ9ueu5zKhE7rtNXt_d012z2PA6ws&amp;r=4K452nJVo4yll8gVd5CODeFaMs4bD5dIGGzFC-pFi5A&amp;m=e9e_eb69pOm80lCHwkzUUCV5pStnbjly9WQacLWyV_o&amp;s=2xk-aoCpSTOEZMYjMWJdOrTlnUzEthub4vk15U2tg58&amp;e=\">The C# Player&#8217;s Guide</a></em>, RB Whitaker; <a href=\"https://urldefense.proofpoint.com/v2/url?u=https-3A__www.amazon.com_C-2DPlayers-2DGuide-2D2nd_dp_0985580127_ref-3Dsr-5F1-5F1-3Fs-3Dbooks-26ie-3DUTF8-26qid-3D1470348062-26sr-3D1-2D1-26keywords-3Dc-2523&amp;d=CwMFAg&amp;c=yHlS04HhBraes5BQ9ueu5zKhE7rtNXt_d012z2PA6ws&amp;r=4K452nJVo4yll8gVd5CODeFaMs4bD5dIGGzFC-pFi5A&amp;m=e9e_eb69pOm80lCHwkzUUCV5pStnbjly9WQacLWyV_o&amp;s=2xk-aoCpSTOEZMYjMWJdOrTlnUzEthub4vk15U2tg58&amp;e=\"></a>ISBN-10: 0985580100, ISBN-13: 978-0985580100 <strong>(Reference)</strong></li>\r\n</ul>"
        }
    },
    "377": {
        "course_name": "Game Development Studio ",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "6:30-7:50 MW",
        "winter_instructor": "Zubek",
        "spring_time": "",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "COMP_SCI 214 &amp; Comp_Sci 376 (Horswill)",
            "Description": "<p>In this course, students will design and develop games using the Unity game engine, with focus on team-based projects and agile development practices. Lectures will cover game design theory, game architecture and implementation, and the business of game development. Students will participate in class discussion and evaluation of projects in progress, to develop their skills in iterative design and implementation.</p>\r\n<p><strong><em>*Please note that this course requires significant amount of programming outside of class.*</em></strong></p>\r\n<ul>\r\n<li><em>This course satisfies the project requirement;&#160;Interfaces breadth; software development breadth</em></li>\r\n</ul>\r\n<p><strong>INSTRUCTOR: </strong><a href=\"http://robert.zubek.net/\" rel=\"noopener\" target=\"_blank\">Rob Zubek</a> (<a href=\"mailto:robert.zubek@gmail.com\">robert.zubek@gmail.com</a>)<strong><br/> </strong></p>\r\n<p><strong>REQUIRED TEXTS:</strong>&#160;Elements of Game Design, R Zubek</p>\r\n<p><strong>OPTIONAL TEXT:</strong> <strong><a href=\"https://www.amazon.com/C-Players-Guide-2nd/dp/0985580127\">The C# Player&#8217;s Guide</a></strong>, RB Whitaker (Reference)</p>\r\n<p><strong>GRADING:</strong> Based on homework assignments, project work, class participation, and final project demo. No midterms or finals. Class participation required.</p>"
        }
    },
    "393": {
        "course_name": "Software Construction",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "",
        "winter_instructor": "",
        "spring_time": "10-10:50 MWF Findler OR 11-11:50 MWF Findler",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "COMP_SCI 111 &amp; COMP_SCI 214",
            "Description": "<p>Software Construction is based on the premise that:</p>\r\n<p><em>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; <strong>programs are written for people, not computers.</strong></em></p>\r\n<p>Accordingly, the course focuses on the design and implementation of maintainable programs and how to present such programs to others.</p>\r\n<p>During the course, students synthesize knowledge from the pre-requite courses and learn the fundamental tools for maintaining programs:</p>\r\n<ul>\r\n<li>\r\n<p>testing (focusing on unit testing),</p>\r\n</li>\r\n<li>\r\n<p>design of new, simple data structures (how to use basic data structures to fit a new problem), and</p>\r\n</li>\r\n<li>\r\n<p>checkable program specification techniques (simple type systems, behavioral contracts, and sequence contracts)</p>\r\n</li>\r\n</ul>\r\n<ul>\r\n<li><strong><em>This course satisfies the Software Development Breadth and project requirement.</em></strong></li>\r\n</ul>\r\n<p><strong>COURSE INSTRUCTORS:</strong> <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/dimoulas-christos.html\">Prof. Christos Dimoulas</a> &amp; <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/findler-robert.html\">Prof. Robby Findler</a></p>\r\n<p><strong>COURSE ASSIGNMENTS:</strong> The course has nine assignments, one each week. The first two assignments expose students to the idea of modifying large programs and the design of a subscription-notification architecture. For assignments three through nine, students build and modify their own software. To date, the final product has been a complete implementation of an existing board game (<em>e.g.</em>, Scrabble or Parcheesi), including a rules manager, a GUI, automated players, and networked play.</p>\r\n<p><strong>COURSE</strong> <strong>OUTLINE: </strong>The course is organized as a studio course, following the tradition of art and architecture school. Each week, students present their programs and (with the instructor's guidance) learn from each others' experience. Final grades are based on the quality of the students' code and the quality of their presentations, with an emphasis on the later code and the later presentations.</p>"
        }
    },
    "394": {
        "course_name": "Agile Software Development",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "3:30-4:50 MW",
        "winter_instructor": "Riesbeck",
        "spring_time": "9:30-10:50 MW",
        "spring_instructor": "Riesbeck",
        "other": {
            "Prerequisites": "By permission only.",
            "Description": "<p><strong>See the course page on how to apply for this course: </strong><a href=\"http://www.cs.northwestern.edu/academics/courses/394/\" rel=\"noopener\" target=\"_blank\">http://www.cs.northwestern.edu/academics/courses/394/</a></p>\r\n<p><span>Developing mobile and web applications, using modern sustainable agile practices, such as backlogs, user stories, velocity charts, and test driven development, to deliver value as quickly as possible to end users, clients, developers, and the development organization.</span></p>\r\n<ul>\r\n<li><em>This course satisfies the&#160;Software Development Breadth &amp;</em> project requirement.</li>\r\n</ul>\r\n<p><strong>COURSE WEBSITE:</strong>&#160;<a href=\"http://www.cs.northwestern.edu/academics/courses/394/\" target=\"_self\">Read More</a></p>\r\n<p><strong>REQUIRED TEXTBOOK</strong>:&#160;<a href=\"https://pragprog.com/book/jtrap/the-agile-samurai\" target=\"_self\"><em>The Agile Samurai</em></a>&#160;by Jonathan Rasmusson</p>\r\n<p><strong>REFERENCE TEXTBOOKS:&#160;</strong>None</p>\r\n<p><strong>COURSE COORDINATOR:</strong>&#160;<a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/riesbeck-chris.html\" target=\"_self\">Prof. Chris Riesbeck</a></p>\r\n<p><strong>COURSE GOALS:&#160;</strong>The goal of this class is to provide students with skills in teamwork and objective-based development and give them the ability or build a development team as a leader and architect as well as a programmer and developer.</p>\r\n<p><strong>COURSE OUTCOMES:</strong>&#160;In the course of doing this work, individuals will develop skills in:</p>\r\n<ol>\r\n<li>Project planning and management</li>\r\n<li>Client management and project definition</li>\r\n<li>A testing based approach to development</li>\r\n<li>Team management and ongoing schedule tracking</li>\r\n<li>Pair programming</li>\r\n<li>Scope management</li>\r\n</ol>"
        }
    },
    "409": {
        "course_name": "Swarms and Multi-Robot Systems",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "2-3:20 TuTh",
        "fall_instructor": "Rubenstein",
        "winter_time": "",
        "winter_instructor": "",
        "spring_time": "",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "Instructor permission",
            "Description": "<p>Advances in technology have begun to allow for the production of large groups, or swarms, of robots; however, there exists a large gap between their current capabilities and those of swarms found in nature or envisioned for future robot swarms.&#160; These deficiencies are the result of two factors, difficulties in algorithmic control of these swarms, and limitations in hardware capabilities of the individuals.&#160; This class surveys the state of the art research that addresses these deficiencies.&#160; Coursework includes reading research papers, student presentations and discussion of select papers, and a final project implementing studied topics in a real or simulated robot swarm. &#160;&#160;</p>\r\n<ul>\r\n<li><em><strong>Formerly COMP_SCI 396/496.</strong></em></li>\r\n</ul>\r\n<p><strong>COURSE INSTRUCTOR:</strong> <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/rubenstein-michael.html\" rel=\"noopener\" target=\"_blank\">Prof. Rubenstein</a><strong><br/></strong><strong>COURSE COORDINATOR</strong>: <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/rubenstein-michael.html\" rel=\"noopener\" target=\"_blank\">Prof. Mike Rubenstein</a></p>"
        }
    },
    "410": {
        "course_name": "Quadrotor Design and Control",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "12:30-3:50 Th",
        "winter_instructor": "Rubenstein",
        "spring_time": "",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "C programming experience and instructor permission.",
            "Description": "<p>Centered around a project where teams (1 to 2 students per team) create and program a visually-guided autonomous quadrotor robot, this class focuses on advanced embedded control of an electromechanical system.&#160; Topics include mechanical/electrical assembly, programming interfaces between an embedded computer (such as a Raspberry PI running Linux) and external sensors/actuators (such as an IMU, camera, or motor controllers), programming and tuning a timing-critical control loop for stable flight, using pre-existing computer vision software for tracking optical targets, and creating a software stack that interacts with low-level code to create a desired high level behavior.</p>\r\n<ul>\r\n<li><em><strong>Formerly COMP_SCI 396/496.</strong></em></li>\r\n</ul>\r\n<p><strong>COURSE <span>COORDINATORS</span>:</strong> <a href=\"https://wcms.northwestern.edu/entity/open.act?type=page&amp;id=8a2b8a5d8169775b1537b5541ce7ae94&amp;confId=7652f4848169775b577c1a9f79699cba\" rel=\"noopener\" target=\"_parent\">Prof. Rubenstein</a><strong><br/></strong><strong>COURSE INSTRUCTOR: <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/rubenstein-michael.html\" rel=\"noopener\" target=\"_blank\">Prof. Mike Rubenstein</a></strong></p>"
        }
    },
    "446": {
        "course_name": "Kernel and Other Low-level Software Development",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "",
        "winter_instructor": "",
        "spring_time": "9:30-10:50 MW",
        "spring_instructor": "Dinda",
        "other": {
            "Prerequisites": "(COMP_SCI 213 or COMP_ENG 205) and (COMP_SCI 343 (OS) or COMP_ENG 361 (architecture) or COMP_ENG 366/466 (embedded systems)) or consent of Instructor.",
            "Description": "<p>The development of low-level software such as drivers, kernels, hypervisors, run-times, system libraries, JITs, and firmware is very different from the development of applications. The goal of this class is to teach students how such development is done, both in terms of the modes of thinking needed to design, implement, debug, and optimize low-level software, and in terms of how to leverage representative, widely-used tools to do so. Some of the techniques the class covers are also used in the design and optimization of the performance-critical parts of applications.&#160;</p>\r\n<p>Each student will apply what they are learning&#160; to an individual or small group low-level software development project. Ideally, each student would come to the class with their own low-level software development task in mind.</p>\r\n<p>The general environment we will consider is the Linux kernel on 64-bit x86 using the GCC and related compiler toolchains and tools. Other environments may include a custom kernel, a hypervisor, and firmware. Projects in the class can involve other platforms. The student will see:</p>\r\n<ul>\r\n<li>Features of the C language and special features of most C compilers that are designed to facilitate mapping of hardware interfaces to software constructs:&#160; bitfields, unions, forced alignment, packing, atomic and synchronization primitives,&#160; calling conventions, etc.</li>\r\n<li>Techniques to take complete control over the machine when necessary, or to build constructs that are not simple functions or data structures: inline assembly, separate assembly, self-modifying code, etc.</li>\r\n<li>Important attributes of code and data, such as position independence, relocatability, symbol/section inclusion, embedding, loaders, etc.</li>\r\n<li>Custom linking to build images that are not simple executables: linker scripts, ELF, static and dynamic linking (especially within a kernel).</li>\r\n<li>Hardware and related debugging methods: JTAG, SPI/I2C, PCI, QEMU, kgdb, scope, logic analyzer, etc.</li>\r\n<li>Debugging concurrency.</li>\r\n<li>The hardware environment: interrupts, concurrency, memory properties, state machines, the nature of hardware interfaces, hardware bugs, forced firmware (e.g. SMI), microcode, etc.</li>\r\n<li>The kernel environment in general: monolithic kernels, microkernels, hypervisors, executives,&#160; APIs versus ABIs versus kernel-internal interfaces, system calls, libc, etc.</li>\r\n<li>An in-depth view of a specific kernel environment: Linux kernel, kernel modules, Kbuild, etc.</li>\r\n<li>Why and when to distrust the compiler and other tools, or the hardware.</li>\r\n</ul>\r\n<p><strong>This course is intended for advanced CS and CE undergraduates and graduate students, particularly Ph.D.s. If you&#8217;re interested in this class, but not sure you have the background, please contact the instructor.</strong></p>\r\n<ul>\r\n<li><em>For CS undergraduates, this course counts towards the Project requirement. CE undergraduates can petition to have this course count within the Systems Software Area.</em></li>\r\n</ul>\r\n<p><strong>COURSE INSTRUCTOR:</strong>&#160;<strong><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/dinda-peter.html\" target=\"_self\">Prof. Peter Dinda</a></strong></p>\r\n<p><strong>BOOKS:</strong></p>\r\n<ul>\r\n<li>D. Bovet and M. Cesati, <em>Understanding the Linux Kernel</em>, 3rd Edition, O&#8217;Reilly, 2005. <strong>(required)</strong></li>\r\n<li>J. Corbet, A. Rubii, <em>G. Kroah-Hartman, Linux Device Drivers</em>, 3rd Edition, O&#8217;Reilly, 2005.&#160; <strong>(reference)</strong></li>\r\n<li>R. Love, <em>Linux Kernel Development</em>, 3rd Edition, Addison-Wesley, 2010. <strong>(reference)</strong></li>\r\n</ul>\r\n<p>The first two books may have 4th editions by the start of the class, if so, we will use the 4th editions.</p>\r\n<p><strong>SOFTWARE:</strong></p>\r\n<ul>\r\n<li>Linux kernel</li>\r\n<li>Palacios hypervisor</li>\r\n<li>Nautilus aerokernel</li>\r\n<li>Coreboot firmware</li>\r\n</ul>\r\n<p>and perhaps others.&#160;&#160;</p>\r\n<p>It will be useful if students have access to a virtual machine monitor on their hardware. The best choice for this is VMware.</p>\r\n<p><strong>GRADING:</strong></p>\r\n<ul>\r\n<li>60 % Project (quarter-long)</li>\r\n<li>20 % Project documentation and presentation</li>\r\n<li>20 % In-class discussion</li>\r\n</ul>\r\n<p>Students in the class will undertake significant development efforts within a kernel or other low-level codebase of their choice. These projects will ideally be something that students bring to the class as a matter of personal interest or. For example, a student might write a device driver for some new hardware. A project can be undertaken by a team whose size depends on the complexity of the project. Open source software needs (e.g., http://kernelnewbies.org/KernelProjects) could also be a source of educational and useful projects.</p>"
        }
    },
    "450": {
        "course_name": "Internet Security",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "9:30-10:50 MW",
        "winter_instructor": "Chen",
        "spring_time": "",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "Required: COMP_SCI 340 or COMP_SCI 343 or COMP_SCI 354 prior to this class’",
            "Description": "<p>Cybercrime has exploded over the past several decades. In this instructor-led course, we will start with the basic concepts of network security, then focus on the emerging security challenges of network and distributed systems as well as the counter-attack approaches.</p>\r\n<ul>\r\n<li><em>Approved for <strong>Systems Breadth</strong> in the CS curriculum in McCormick and Weinberg</em></li>\r\n<li><em>This course satisfies the project requirement.</em>&#160;</li>\r\n</ul>\r\n<p><strong>REQUIRED TEXTBOOK</strong>:&#160;There is no required textbook. All reading will be from papers which will be made available online.<br/> Recommended books and references</p>\r\n<ul>\r\n<li><strong><a href=\"https://vig.prenhall.com/catalog/academic/product/0,1144,0130460192,00.html\" rel=\"noopener\" target=\"_blank\">Network Security - Private Communication in a Public World</a></strong>, by Charlie Kaufman, Radia&#160;Perlman&#160;and Mike&#160;Speciner, 2nd Edition, Prentice Hall, 2002</li>\r\n<li><strong><a href=\"https://williamstallings.com/Crypto/Crypto4e.html\" rel=\"noopener\" target=\"_blank\">Cryptography and Network Security</a></strong>, by William Stallings, 4<sup>th</sup> Edition, Prentice Hall, 2006</li>\r\n<li><strong><a href=\"https://www.wilyhacker.com/\" rel=\"noopener\" target=\"_blank\">Firewalls and Internet Security: Repelling the Wily Hacker</a></strong>, 2<sup>nd</sup> edition, by&#160;<strong><a href=\"https://research.lumeta.com/ches/index.html\" rel=\"noopener\" target=\"_blank\">William R. Cheswick</a></strong>,&#160;<strong><a href=\"https://www.research.att.com/&#126;smb\" rel=\"noopener\" target=\"_blank\">Steven M.&#160;Bellovin</a></strong>, and&#160;<strong><a href=\"https://www.avirubin.com/\" rel=\"noopener\" target=\"_blank\">Aviel&#160;D. Rubin</a></strong>, Addison Wesley, 2003</li>\r\n<li>An&#160;<strong><a href=\"https://staff.washington.edu/dittrich/misc/ddos/\" rel=\"noopener\" target=\"_blank\">encyclopedia of&#160;DDoS</a></strong> by Dave&#160;Dittrich&#160;at&#160;Univ. of&#160;Washington.</li>\r\n</ul>\r\n<p><strong>COURSE <span>INSTRUCTOR</span>:</strong> <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/chen-yan.html\" target=\"_self\">Prof. Chen</a><br/><strong>COURSE COORDINATOR:</strong> <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/chen-yan.html\" target=\"_self\">Prof. Yan Chen</a></p>\r\n<p><strong>DETAILED COURSE TOPICS:&#160;</strong>Emerging threats on the next generation cloud platforms and on the new wireless/cellular networks, and their defense mechanisms, e.g., against the Advanced Persistent Threat (APT).</p>\r\n<p><strong>PROJECTS:&#160;</strong>Projects (done in groups of size 2+) are a critical component of this course. Your goal is to design, build and evaluate interesting systems that address issues, solve problems and exploit techniques from classroom discussions and readings.</p>\r\n<p>Projects must be written up in a term paper and teams will present their results at the end of the course in a mini-conference and write up a report. The list of potential ideas for projects will be posted soon. Feel free to use one, propose something completely different, or refine one of these into your own idea.</p>\r\n<p><strong>GRADES: &#160;</strong>No exams for this class.</p>\r\n<ul>\r\n<li>Class participation 10%</li>\r\n<li>Paper reading summary 10%</li>\r\n<li>In class paper presentation and debate 25%</li>\r\n<li>Project 55%<br/> - Proposal and survey 5%<br/> - Midterm presentation and report 10%<br/> - Weekly report and meeting 10%<br/> - Final presentation 10%<br/> - Final report 20%</li>\r\n</ul>"
        }
    },
    "452": {
        "course_name": "Advanced Computer Architecture I",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "MW 12:30-1:50",
        "winter_instructor": "G. Memik",
        "spring_time": "",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "COMP_ENG 361 or consent of the instructor.",
            "Description": "<p><strong>CATALOG DESCRIPTION:&#160;</strong>Design and evaluation of modern uniprocessor computing systems. Evaluation methodology/metrics and caveats, instruction set design, advanced pipelining, instruction level parallelism, prediction-based techniques, alternative architectures (VLIW, Vector and SIMD), memory hierarchy design, I/O, and recent trends in architecture (e.g., low-power architectures, application-specific processors). Case studies.</p>\r\n<p><strong>REQUIRED TEXT:&#160;</strong>None</p>\r\n<p><strong>RECOMMENDED TEXT:&#160;</strong>J. Hennessy and D. Patterson,&#160;<em>Computer Architecture: A Quantitative Approach&#160;</em>, Morgan Kaufmann, 3 rd edition, 2003. Research, survey, and case study papers.</p>\r\n<p><strong>COURSE DIRECTOR:&#160;<a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/memik-gokhan.html\" target=\"_self\">Prof. Gokhan Memik</a></strong></p>\r\n<p><strong>COURSE GOALS:&#160;</strong>Learn how to build the best processor/computing system understanding the underlying tradeoffs and ramifications.</p>\r\n<p><strong>PREREQUISITES BY COURSES:&#160;<a href=\"https://www.mccormick.northwestern.edu/electrical-computer/academics/courses/descriptions/361.html\" target=\"_self\">COMP_ENG 361</a></strong>&#160;or consent of the instructor.</p>\r\n<p><strong>PREREQUISITES BY TOPIC:&#160;</strong>Basic notions of computer architecture including programs, instruction sets, simple processor design and memories.</p>\r\n<p><strong>DETAILED COURSE TOPICS:</strong></p>\r\n<p><strong>Week 1:&#160;</strong>Review of basic system design, technology, evaluation methodology. Metrics: performance, cost and power.</p>\r\n<p><strong>Week 2:&#160;</strong>Instruction set architecture: implications and interaction with compilers.</p>\r\n<p><strong>Week 3:&#160;</strong>Advanced Pipelining and introduction to instruction-level parallelism.</p>\r\n<p><strong>Week 4:&#160;</strong>Instruction-level parallelism, superscalar processor design, register renaming and precise interrupt handling.</p>\r\n<p><strong>Week 5:&#160;</strong>Branch prediction, related static/dynamic techniques and other prediction-based techniques.</p>\r\n<p><strong>Week 6:&#160;</strong>VLIW, vector processors, multimedia targeted instruction sets. Memory system design introduction.</p>\r\n<p><strong>Week 7:&#160;</strong>Memory system design: memory operation scheduling/memory renaming, advanced caches, pre-fetching, main memory systems, modern DRAM technologies.</p>\r\n<p><strong>Week 8:&#160;</strong>Virtual memory support. I/O.</p>\r\n<p><strong>Week 9:&#160;</strong>Technology forecasts, state-of-the-art in modern processor design and case studies.</p>\r\n<p><strong>Week 10:&#160;</strong>Project Presentations.</p>\r\n<p><strong>COMPUTER USAGE:&#160;</strong>As required for the course project and assignments.</p>\r\n<p><strong>LABORATORY PROJECT:&#160;</strong>An extensive individual or group project on an advanced topic in computer architecture. While, a list of suggested project topics will be provided, students are strongly encouraged to suggest a project of their own. The default project is to do some&#160;<em>original&#160;</em>research in a group of two to three students. Alternatively, a student may work alone on a survey.</p>\r\n<p><strong>GRADES:</strong></p>\r\n<p>50% Project</p>\r\n<p>30% Final</p>\r\n<p>10% Homework assignments</p>\r\n<p>10% Class Participation</p>\r\n<p><strong>COURSE OBJECTIVES:</strong></p>\r\n<p>To provide students with: (1) a broad understanding of computer architecture and, (2) to the extent possible, an understanding of the current state-of-the-art in uniprocessor computer architecture. In 361 students learn how to build a working computer. In this course, we go a step further and study how to use technology to build the &#8220;best&#8221; computer/processor.</p>\r\n<p>Specifically, upon completion of this course, a student should have developed:</p>\r\n<p>&#8226;&#160; Broad understanding of the design of computer systems, including modern architectures and alternatives.</p>\r\n<p>&#8226;&#160; Understanding of the interaction amongst architecture, applications and technology.</p>\r\n<p>&#8226;&#160; Understanding of a framework for evaluating design decisions in terms of application requirements and performance measurements.</p>\r\n<p>&#8226;&#160; A historical perspective on computer system design.</p>\r\n<p>&#8226;&#160; Gain experience with using and modifying a state-of-the-art computer simulator.</p>\r\n<p>&#8226;&#160; Gain experience on identifying and pursuing a research project.</p>\r\n<p>&#8226;&#160; Gain experience with writing a research report.</p>\r\n<p>&#8226;&#160; Gain insight on evaluating research papers.</p>\r\n<p>&#8226;&#160; Gain experience in technical presentations.</p>"
        }
    },
    "453": {
        "course_name": "Parallel Architectures",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "",
        "winter_instructor": "",
        "spring_time": "MW 3:30-4:50",
        "spring_instructor": "Joseph",
        "other": {
            "Prerequisites": "COMP_ENG 361 or consent of instructor. COMP_ENG 452 and COMP_ENG 358 are useful but not required.",
            "Description": "<p><strong>CATALOG DESCRIPTION:&#160;</strong>Parallel computer architecture and programming models. Message passing and shared memory multiprocessors. Scalability, synchronization, memory consistency, cache coherence. Memory hierarchy design. Network design.</p>\r\n<p><strong>REQUIRED TEXTS:</strong> Michel Dubois, Murali Annavaram, and Per Stenstrom, <em>Parallel&#160;Computer&#160;Organization&#160;and Design</em>, Cambridge University Press, 2012 (ISBN: <span itemprop=\"isbn\">9780521886758</span>)</p>\r\n<p><strong>COURSE DIRECTOR:&#160;<a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/joseph-russ.html\" target=\"_self\">Prof. Russ Joseph</a></strong></p>\r\n<p><strong>PREREQUISITES BY COURSES:&#160;</strong>COMP_ENG 361 or consent of instructor.&#160;<strong><a href=\"https://www.mccormick.northwestern.edu/electrical-computer/academics/courses/descriptions/452.html\" target=\"_self\">COMP_ENG 452</a></strong>&#160;and&#160;<strong><a href=\"https://www.mccormick.northwestern.edu/electrical-computer/academics/courses/descriptions/358.html\" target=\"_self\">COMP_ENG 358</a></strong>&#160;are useful but not required.</p>\r\n<p><strong>PREREQUISITES BY TOPIC:&#160;</strong>Basic uniprocessor architecture, especially cache organization.</p>\r\n<p><strong>DETAILED COURSE TOPICS:</strong></p>\r\n<p><strong>Week 1:&#160;</strong>Introduction, overview of parallel architectures, fundamental design issues, examples of parallel programs and models. CSG Chapters 1 and 2.</p>\r\n<p><strong>Week 2:&#160;</strong>Workload-driven evaluation, introduction to symmetric multiprocessors and cache coherence. CSG Chapter 3 and 4.</p>\r\n<p><strong>Weeks 3 and 4:&#160;</strong>Symmetric multiprocessors continued: cache coherence, memory consistency, synchronization. Snoop-based multiprocessor design. CSG Chapters 4, 5 and 6.</p>\r\n<p><strong>Weeks 5 and 6:&#160;</strong>Scalable multiprocessors: scalability, programming models, clusters and networks of workstations and directory-based coherence. CSG Chapters 7 and 8.</p>\r\n<p><strong>Week 7:&#160;</strong>Relaxed consistency models and software/hardware tradeoffs. Introduction to interconnection network design.</p>\r\n<p><strong>Week 8:&#160;</strong>Dataflow, SIMD and other alternatives. AG Chapter 10.2.8.</p>\r\n<p><strong>Week 9:&#160;</strong>Research papers, case studies and work on projects.</p>\r\n<p><strong>Week 10:&#160;</strong>Project presentations.</p>\r\n<p><strong>COMPUTER USAGE:&#160;</strong>As required for the course project and assignments.</p>\r\n<p><strong>LABORATORY PROJECT:&#160;</strong>An extensive individual or group project on an advanced topic in parallel computer architecture. The default project is to do some original research in a group of two to three students. Alternatively, a student may work alone on a survey.</p>\r\n<p><strong>GRADES:</strong></p>\r\n<ul>\r\n<li>40% Project</li>\r\n<li>45% Midterm and Final</li>\r\n<li>10% Homework</li>\r\n<li>5% Class Participation</li>\r\n</ul>\r\n<p><strong>COURSE OBJECTIVES:&#160;</strong>The goal of this course is to provide students with (1) a broad understanding of parallel computer architecture and (2) to the extent possible, an understanding of the current state-of-the-art in parallel computer architecture.</p>\r\n<p>Specifically, upon completion of this course, a student should have developed:</p>\r\n<ul>\r\n<li>Broad understanding of the design of parallel computer systems, including modern parallel architectures and alternatives.</li>\r\n<li>Understanding of the interaction amongst parallel architecture, applications, and technology.</li>\r\n<li>Understanding of a framework for evaluating design decisions in terms of application requirements and performance measurements.</li>\r\n<li>Gain experience with using and modifying a parallel computer simulator.</li>\r\n<li>Gain experience on identifying and pursuing a research project.</li>\r\n<li>Gain experience with writing a research report.</li>\r\n<li>Gain insight on evaluating research papers.</li>\r\n<li>Gain experience in technical presentations.</li>\r\n</ul>"
        }
    },
    "456": {
        "course_name": "Modern Topics in Computer Architecture",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "",
        "winter_instructor": "",
        "spring_time": "TuTh 11:00 a.m. – 12:20 p.m.",
        "spring_instructor": "Hardavellas",
        "other": {
            "Prerequisites": "COMP_ENG 452 – Advanced Computer Architecture I (or equivalent out-of-order processor architecture course); Useful but not required: COMP_ENG 453 – Parallel Architectures",
            "Description": "<p>This course examines fundamental issues and design trade-offs in modern processor architectures. We will discuss some of the constraints that limit the design and programmability of modern processors, and promising techniques to mitigate these constraints. As such, we will draw material from seminal and recent publications in top computer architecture conferences and journals. By exposing the students to state-of-the-art research, the course serves as an entry point to further research in computer architecture. The course will cover a sample of research across a wide spectrum of topics from emerging architectures, including quantum computing, neuromorphic computing, space-time computing, silicon photonics in computer architectures, and advanced techniques in more traditional topics, including memory systems and advanced cache designs, memory consistency models and operational semantics, programmability (e.g., transactional memory, deterministic programming, speculative multithreading), on-chip interconnects, power/thermal management, reliability, and fault tolerance. The exact collection of topics varies across offerings, as the field itself evolves rapidly. The course has a seminar format, and the students are expected to lead multiple presentations throughout the quarter. The course requires the completion of a project in computer architecture. The project component of the course is open-ended, and students are encouraged to draw on their own research interests and prior background for inspiration.</p>\r\n<p><strong>REQUIRED TEXT:</strong> None; we'll draw material from seminal and recent publications in top conferences, as well as chapters from the Synthesis Lectures on Computer Architecture by Morgan &amp; Claypool.</p>\r\n<p><strong>COURSE COORDINATOR:</strong> <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/hardavellas-nikos.html\" target=\"_self\">Prof.&#160;Nikos Hardavellas</a></p>\r\n<p><strong>COURSE OBJECTIVES:</strong> The course aims to offer a firm background for research in computer architecture. The students that successfully complete the course will be exposed to a variety of cutting-edge research topics, be able to read and critique research publications in computer architecture, perform conference-quality paper reviews, perform research presentations, write research reports, and gain familiarity with state-of-the-art tools for research in computer architecture. Along with providing technical knowledge, the course also aims to develop the student's ethos as researchers and research referees, and sharpen the students team-participation skills.</p>\r\n<p><strong>GRADES:</strong> Grades are based on class presentations, project, homework assignments (if any), and class participation.</p>\r\n<p><strong>EXAMS:</strong> There are no exams in this course.</p>\r\n<p><strong>ABET CONTENT: </strong>100% Engineering</p>"
        }
    },
    "459": {
        "course_name": "VLSI Algorithmics",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "MW 2-3:20",
        "winter_instructor": "S. Memik",
        "spring_time": "",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "Senior or graduate standing in ECE majors.",
            "Description": "<p>Introduction to advanced topics in synthesis and modeling of complex VLSI systems at behavioral and logic level. Topics include resource allocation, resource binding, scheduling, and controller design in high level synthesis, C to hardware compilation flows, logic synthesis, survey of stat-of-the-art in high level and system level design methods and tools.</p>\r\n<p><strong>COURSE COORDINATOR:</strong>&#160;<strong><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/memik-ogrenci-seda.html\" target=\"_self\">Prof. Seda Ogrenci Memik</a></strong></p>\r\n<p><strong>COURSE OBJECTIVES:</strong>&#160;After a student completes this course he or she should be able to:</p>\r\n<ul>\r\n<li>Model computation in form of networks and task graphs.</li>\r\n<li>Conceptually construct an end-to-end synthesis flow with judicious choices on the allocation, binding, and scheduling algorithms for a given optimization objective and set of constraints.</li>\r\n<li>Cite one seminal and one recent academic work of last 3-5 years in high level synthesis methods and tools for allocation, binding, and scheduling and describe their relevance.</li>\r\n<li>Cite one current commercial product in use for C to hardware conversion.</li>\r\n</ul>\r\n<p><strong>PREREQUISITES:</strong>&#160;Senior or graduate standing in ECE majors.</p>\r\n<p><strong>RECOMMENDED PREPARATION:</strong>&#160;<strong><a href=\"https://www.mccormick.northwestern.edu/electrical-computer/academics/courses/descriptions/303.html\" target=\"_self\">COMP_ENG 303</a></strong>,&#160;<strong><a href=\"https://www.mccormick.northwestern.edu/electrical-computer/academics/courses/descriptions/361.html\" target=\"_self\">COMP_ENG 361</a></strong>,&#160;<strong><a href=\"336.html\" target=\"_self\">COMP_SCI 336</a></strong>.</p>\r\n<p><strong>REQUIRED TEXT:</strong>&#160;None</p>\r\n<p><strong>RECOMMENED READING MATERIALS:</strong>&#160;Synthesis and Optimization of Digital Circuits, G. De Micheli.</p>\r\n<p><strong>GRADES:</strong>&#160;Grades will be based on Homework Assignments, Literature Surveys &amp; Presentations</p>"
        }
    },
    "469": {
        "course_name": "Machine Learning and Artificial Intelligence for Robotics",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "12:30-1:50 TuTh",
        "fall_instructor": "Argall",
        "winter_time": "",
        "winter_instructor": "",
        "spring_time": "",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "Graduate-level standing (or permission of instructor) for the maths, some programming experience (in Matlab okay).",
            "Description": "<p>A coverage of artificial intelligence, machine learning and statistical estimation topics that are especially relevant for robot operation and robotics research. The focus is on robotics-relevant aspects of ML and AI that are not covered in depth in&#160;<strong><a href=\"348.html\" target=\"_self\">COMP_SCI 348</a></strong>&#160;or&#160;<strong><a href=\"349.html\" target=\"_self\">COMP_SCI 349</a></strong>. Course evaluation will be largely project-based.<br/><em><br/><strong>Cross-listed with MECH_ENG 469</strong></em></p>\r\n<p><strong>COURSE COORDINATOR</strong>:&#160;<strong><span><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/argall-brenna.html\" target=\"_self\">Prof. Brenna Argall</a></span></strong></p>\r\n<p><strong>PREREQUISITES</strong>: Graduate-level standing (or permission of instructor) for the maths, some programming experience (in Matlab okay).</p>\r\n<p><strong>REQUIRED TEXTS:&#160;Xandu has created a special textbook comprised of custom reprints, available at the bookstore.</strong></p>\r\n<p><strong>DETAILED COURSE TOPICS</strong>:</p>\r\n<p>I. Introduction: Crash course in robotics: sensors and sensing, effectors and actuators, probability basics</p>\r\n<p>II. State estimation and uncertainty filters</p>\r\n<p>&#160;&#160;&#160; 1. Bayes filters</p>\r\n<p>&#160;&#160;&#160; 2. Gaussian filters : Kalman, Information...</p>\r\n<p>&#160;&#160;&#160; 3. Nonparametric filters: Histogram, Particle...</p>\r\n<p>III.&#160; Machine Learning</p>\r\n<p>&#160;&#160;&#160; 1. Neural Nets : perceptron, multi-layered networks...</p>\r\n<p>&#160;&#160;&#160; 2. Genetic Algorithms</p>\r\n<p>&#160;&#160;&#160; 3. Instance-based Learning : nearest neighbors, regression (linear, locally-weighted, kernel-based)...</p>\r\n<p>&#160;&#160;&#160; 4. Reinforcement Learning : Bellman, Q-learning, T-D learning, actor-critic...</p>\r\n<p>&#160;&#160;&#160; 5. Demonstration-based Learning</p>\r\n<p>IV. Artificial Intelligence</p>\r\n<p>&#160;&#160;&#160; 1. Search</p>\r\n<p>&#160;&#160;&#160;&#160;&#160;&#160; 1. Uninformed</p>\r\n<p>&#160;&#160;&#160;&#160;&#160;&#160; 2. Informed : Greedy, A*, D*, heuristic functions...</p>\r\n<p>&#160;&#160;&#160;&#160;&#160;&#160; 3. Local/optimizing : gradient descent, hill-climbing, simulated annealing...</p>\r\n<p>&#160;&#160;&#160; 2. Planning</p>\r\n<p>&#160;&#160;&#160;&#160;&#160;&#160; 1. Navigational</p>\r\n<p>&#160;&#160;&#160;&#160;&#160;&#160; 2. Motion<br/> <br/> <strong>WEEKLY SCHEDULE:</strong></p>\r\n<ul>\r\n<li>Week 0 : Introduction</li>\r\n<li>Week 1 : State estimation and uncertainty filters</li>\r\n<li>Week 2 : ML: Bayesian Learning, Linear Classifiers, Expertsstyle</li>\r\n<li>Week 3 : ML: Programming, Genetic Algorithms</li>\r\n<li>Week 4 : ML: InstancebasedLearning</li>\r\n<li>Week 5 : ML: Reinforcement Learning</li>\r\n<li>Week 6 : AI: Planning</li>\r\n<li>Week 7 : AI: Search, BehaviorbasedRobotics</li>\r\n<li>Week 8 : Project presentations</li>\r\n<li>Week 9 : Project presentations, Special topics</li>\r\n</ul>"
        }
    },
    "496": {
        "course_name": "Computational Complexity ",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "",
        "winter_instructor": "",
        "spring_time": "",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "Permission of the instructor. In terms of background, COMP_SCI 335 is useful but not necessary if you have done some 300 level math courses. Mathematical maturity is an absolute must.",
            "Description": "<p>Computational Complexity theory looks at the computational resources (time, memory, communication, &#160;...) needed to solve computational problems that we care about, and it is especially concerned with the distinction between \"tractable\" problems, that we can solve with reasonable amount of resources, and \"intractable\" problems, that are beyond the power of existing, or conceivable, computers. It also looks at the trade-offs and relationships between different \"modes\" of computation (what if we use randomness, what if we are happy with approximate, rather than exact, solutions, what if we are happy with a program that works only for most possible inputs, rather than being universally correct, and so on).&#160;</p>\r\n<p>We will start with the basics of complexity theory&#160;and look at fundamental notions such as NP-completeness, alternations and the polynomial hierarchy, time and space complexity classes, distinctions between uniform and non-uniform computation and relations among these ideas. The second part of the course will broadly look at the power of randomness in computation and the revolution it led to in our understanding of computation.</p>\r\n<p>The course will closely follow these lecture notes:&#160;<a href=\"https://urldefense.proofpoint.com/v2/url?u=https-3A__people.eecs.berkeley.edu_-7Eluca_notes_complexitynotes01.pdf&amp;d=DwMFAw&amp;c=yHlS04HhBraes5BQ9ueu5zKhE7rtNXt_d012z2PA6ws&amp;r=2mjTbnHiISfL7aKUFQ4Nf6qRjMulEyNOpny5i7cWDNo&amp;m=FOAo-AAm99LUpvUUFu1gSAjDFUb59RIOaP5kbTnbedc&amp;s=zRYVygq1-PZ4RnqnlPO2lSOaUBlxA0oIH3tJlhx6Dvc&amp;e=\">https://people.eecs.berkeley.edu/&#126;luca/notes/complexitynotes01.pdf</a></p>\r\n<p><strong>INSTRUCTOR: <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/de-anindya.html\">Prof. Anindya De</a><br/> </strong></p>"
        }
    },
    "213-20": {
        "course_name": "Intro to Computer Systems",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "2-3:20 TuTh",
        "fall_instructor": "Dinda",
        "winter_time": "9:30-10:50 TuTh",
        "winter_instructor": "Ghena",
        "spring_time": "2-3:20 TuTh",
        "spring_instructor": "Hardavellas",
        "other": {
            "Prerequisites": "COMP_SCI 211",
            "Description": "<p>This course has four purposes: (1) to learn about the hierarchy of abstractions and implementations that comprise a modern computer system; (2) to demystify the machine and the tools that we use to program it; (3) to come up to speed on systems programming in C in the Unix environment; (4) to prepare students for upper-level systems courses.</p>\r\n<ul>\r\n<li><em>This course is a&#160;<strong>required Core course</strong>&#160;in the CS curriculum in McCormick and Weinberg</em></li>\r\n</ul>\r\n<p><strong>COURSE GOALS</strong>: This course has four purposes. First, you will learn about the hierarchy of abstractions and implementations that comprise a modern computer system. This will provide a conceptual framework that you can then flesh out with courses such as compilers, operating systems, databases, networks, security, real-time systems, and others. The second purpose is to demystify the machine and the tools that we use to program it. This includes telling you the little details that students usually have to learn by osmosis. In combination, these two purposes will give you the background to understand many different computer systems. The third purpose is to bring you up to speed in doing systems programming in a low-level language (C) in the Unix (Linux/GCC/GDB/etc) environment. The final purpose is to prepare you for upper-level courses in systems.</p>\r\n<p>This is a learn-by-doing kind of class. You will write pieces of code, compile them, debug them, disassemble them, measure their performance, optimize them, etc.</p>\r\n<p>This course is ideally taken after COMP_SCI 211 early in your academic career.&#160;<strong>This is a REQUIRED COURSE for the CS Major.</strong></p>\r\n<p>The current iteration of Prof. Peter Dinda's section is always at <a href=\"http://pdinda.org/ics/\">http://pdinda.org/ics</a></p>\r\n<p><strong>REQUIRED TEXTBOOK</strong>: Randal E. Bryant and David R. O&#8217;Hallaron, Computer Systems: A Programmer&#8217;s Perspective, Third Edition, Prentice Hall, 2015, (ISBN-13:978-0134092669,ISBN-10:013409266X)</p>\r\n<p><strong>RECOMMENDED TEXTS,</strong> <em>not required</em>:</p>\r\n<ul>\r\n<li>The C Programming Language, Second Edition, Prentice Hall, 1988 (ISBN 0-131-10370-9)(Reference)</li>\r\n<li>Richard Stevens and Stephen Rago, Advanced Programming in the Unix Environment, ThirdEdition, Addison-Wesley, 2013(ISBN-10: 0321637739 | ISBN-13: 978-0321637734) (Reference)</li>\r\n</ul>\r\n<p><strong>COURSE INSTRUCTORS:</strong>&#160;<a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/dinda-peter.html\" target=\"_self\">Prof. Peter Dinda</a> (Fall), <a href=\"mailto:branden@northwestern.edu\">Prof.&#160;Branden Ghena</a><strong>,</strong> (Winter), <a href=\"mailto:nikos@northwestern.edu\">Prof. Nikos&#160;Hardavellas</a> (Spring).</p>\r\n<p><strong>COURSE COORDINATOR:&#160;</strong><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/dinda-peter.html\" target=\"_self\">Prof. Peter Dinda</a></p>\r\n<p><strong>PREREQUISITES:</strong>&#160;<a href=\"211.html\">COMP_SCI 211</a></p>\r\n<p><strong>PREREQUISITE FOR:&#160;</strong><a href=\"322.html\">COMP_SCI&#160;322</a> (Compilers),&#160;<a href=\"339.html\">ELEC_ENG/COMP_ENG/COMP_SCI 339</a> (Databases), <a href=\"340.html\">COMP_SCI 340</a> (Networking), <a href=\"343.html\">COMP_SCI 343 </a>(Operating Systems), <a href=\"350.html\">COMP_SCI 350</a> (Security), <a href=\"397.html\">COMP_SCI 397</a> (Real-time), <a href=\"441.html\">COMP_SCI 441</a></p>"
        }
    },
    "295-396": {
        "course_name": "AI and Experimental Narrative",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "",
        "winter_instructor": "",
        "spring_time": "5-6:20 TuTh",
        "spring_instructor": "Horswill",
        "other": {
            "Prerequisites": "COMP_SCI 111 and (COMP_SCI 150 or 211)",
            "Description": "<p>Story games (or storygames) are narrative frameworks in which participants (players) collaborate with each other and with the system to tell stories they find compelling.&#160; Examples include story-centric computer role-playing games such as <em>Disco Elysium</em>, but also larp and story-centric tabletop role playing games such as those based on the Fate, PBtA, GUMSHOE, and DramaSystem systems, as well as smaller, more personal games of the lyric games movement.</p>\r\n<p>In this course we will study, play and design story games, study and build AI-based story-generation systems, and experiment with the use of AI systems in story games.&#160; No previous programming knowledge is necessary for the 295 section.&#160; The 396 section will go more deeply into the formal and algorithmic foundations of these technologies.</p>\r\n<p>AI assignments will use two experimental AI systems, <em>Step</em>, and <em>Imaginarium</em>, designed to be accessible to non-programmers.&#160; 295 students will use these systems as tools to make stories and story artifacts. &#160;396 students will additionally learn their detailed semantics and structure.&#160;</p>\r\n<h3>Grading</h3>\r\n<ul>\r\n<li>Individual assignments: 50% (AI assignments, weekly feedback from your group)</li>\r\n<li>Group assignments: 50% (game designs, weekly gameplay reports)</li>\r\n</ul>\r\n<h3>Reasons not to take this course</h3>\r\n<p>This class is not for everyone.&#160; One issue is that we really will play story games in class.&#160; These games involve acting, and effectively, fiction writing.&#160; If these things will make you feel exposed and uncomfortable, that&#8217;s okay, but you might not enjoy the course.&#160; That said, you will never be graded on your acting ability or artistry, only on whether you showed up prepared for your games and you made an honest effort.</p>\r\n<p>This is not intended to be a conceptually difficult course.&#160; But it will be a time-intensive course, since it will involve not only programming, but playing games, reading games, and watching videos of games being played.&#160; Students should expect to spend 10 hours a week on outside activities (gameplay, assigned readings and videos, game design, and working with the AI tools, guest speakers).</p>\r\n<p>Finally, we will be playing improvisational games that emphasize character and story, not combat-oriented RPGs like <em>Dungeons and Dragons</em> that make less contact with the AI and narrative issues we want to explore.&#160; So if you&#8217;re drawn to RPGs for combat, leveling up, min-maxing, etc., you may be disappointed by the course.</p>\r\n<h3>Thematic content and trigger warnings</h3>\r\n<p>These games tell stories; they&#8217;re a form of literature or theatre.&#160; As such, they address the same wide range of themes as traditional literature and theatre.&#160; While we will avoid playing games likely to produce emotional distress, we will discuss a wide range of games.&#160; Some of these games may address difficult issues such as race, gender, ethnic conflict, poverty, anti-capitalism, religion, sexuality, disability, illness, mortality, suicide, and mental health.</p>\r\n<p>Many games involve explicit depictions or simulations of violence.&#160; Although, we will not play games that mandate graphic depictions of violence, many of the games we discuss will have some notion of combat.&#160; Some games seek to raise awareness of intimate partner violence, child abuse, or sexual assault, although we will not play them.</p>\r\n<p>Horror has been an especially important genre in the historical development of narrative games.&#160; These include games involving threats from monsters, but also cosmic/existential horror.&#160; As with any horror literature, they can also involve themes or events deliberately chosen for their disturbing nature: serial killing, war crimes, child abuse, etc.&#160; These games also often represent mental illness, usually in ways chosen for dramatic effect more than clinical accuracy.</p>\r\n<p>Finally, contemporary game design is often critically and politically engaged.&#160; At least three different games we will mention touch on the issues of access to health care within the US.&#160; One of the collections we will discuss is named <a href=\"http://storytelling.pelgranepress.com/feminism-a-nano-game-anthology/\"><em>#feminism</em></a>.&#160; Some of the games we will discuss are designed by members LGBTQIA+ community and engage issues of queer experience, be it contemporary, historical or fantastical.</p>\r\n<p>Again, we will not play games in class that are likely to produce emotional distress.&#160; In the event of unanticipated emotional distress, any student may bow out of any game at any time.&#160; That said, if any of the content discussed above is problematic for you, you might prefer to avoid the course.</p>\r\n<p><strong>COURSE COORDINATOR: <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/horswill-ian.html\" target=\"_self\">Prof. Ian Horswil</a><br/>COURSE INSTRUCTOR: <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/horswill-ian.html\" target=\"_self\">Prof. Ian Horswil</a></strong></p>"
        }
    },
    "315-497": {
        "course_name": "Design, Technology, and Research ",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "12-3 F",
        "fall_instructor": "Zhang",
        "winter_time": "TBD",
        "winter_instructor": "Zhang",
        "spring_time": "TBD",
        "spring_instructor": "Zhang",
        "other": {
            "Prerequisites": "Permission of Instructor",
            "Description": "<p>Design, Technology, and Research (DTR) is an CS and Segal learning initiative that empowers students to drive cutting-edge research through the development of systems that shape new experiences with people and technology. Students participate in DTR through fast-paced, quarter-long programs (intended to be repeated). Students work with a mentor to identify a direction of research, explore and iterate over designs, prototype at varying fidelities, build working systems, conduct evaluative studies, and report findings through conference publications. As a cohort, each week students demo their prototypes, provide and receive feedback, and help each other resolve technical challenges. DTR adapts and extends agile development and design-based research practices with scrums, sprints, studio critique, design logs, and pair research. <strong><a href=\"http://dtr.northwestern.edu/\" rel=\"noopener noreferrer\" target=\"_blank\">View course website</a></strong></p>\r\n<ul>\r\n<li><em>This course satisfies the project requirement, Interfaces Breadth requirement.</em></li>\r\n</ul>\r\n<p><strong>COURSE INSTRUCTOR:&#160;</strong><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/zhang-haoqi.html\">Prof. Haoqi Zhang</a> (Fall &amp; Winter), <a href=\"mailto:yk@u.northwestern.edu\">Prof. Kim</a> (Spring)</p>\r\n<p><strong><span>COURSE OBJECTIVES:</span></strong></p>\r\n<p><strong>Below is a rough schedule for the course. Students meet with the instructor weeks prior to signing up for the course to determine a research direction.</strong></p>\r\n<ul>\r\n<li>Weeks 1 &amp; 2: Learn relevant web, mobile, and wearable technologies.</li>\r\n<li>Weeks 1 to 5: Rapidly prototype at increasingly higher fidelities and go through numerous design iterations based on frequent user feedback and in-lab testing.</li>\r\n<li>Weeks 6 to 8: Setting up and conducting user studies to test key hypotheses.</li>\r\n<li>Weeks 8 to 10: Analyze collected data and report on their findings. Write academic papers for submission to leading publications as well as blog articles for the general audience.</li>\r\n</ul>\r\n<p><strong><span>PROJECTS:</span></strong> Undergraduates participate in DTR for one or more quarters. Each quarter is a well-scoped, self-contained research project that culminates in a working prototype, a user study or deployment, and an academic paper. The first time a student participates, the student meets with their mentor in the weeks before a session starts to brainstorm project ideas and research directions. They start with as many as 10-15 ideas, narrow down to a handful that the student&#8217;s most interested in, and then dive in to brainstorm and identify a specific project for the quarter. Once a project is identified, a student works individually or in a small group to drive the research.</p>\r\n<p><strong><span>COURSE GOALS:</span></strong> A first-time participant is expected to build a functioning prototype, conducting a small scale study (10-40 users), and write most of an academic paper (e.g., all sections with the exception of related work). A student continuing beyond a quarter will typically expand on their project by building a scalable, deployable system, conducting medium to large scale studies (100-1000+ users), and writing the entire research paper themselves. As students develop their design, technical, research, and communication skills, they are expected to mentor other DTR students, and to help others with both technical challenges and the research process.</p>"
        }
    },
    "325-1": {
        "course_name": "Artificial Intelligence Programming",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "4-4:50 MWF",
        "fall_instructor": "Riesbeck",
        "winter_time": "",
        "winter_instructor": "",
        "spring_time": "",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "COMP_SCI 110 or COMP_SCI 111, or equivalent programming experience",
            "Description": "<p>Introduction to Lisp and programming knowledge-based systems and interfaces. Strong emphasis on writing maintainable, extensible systems. Topics include: semantic networks, frames, pattern matching, deductive inference rules, case-based reasoning, discrimination trees. Project-driven. Substantial programming assignments.</p>\r\n<ul>\r\n<li><em>This course satisfies the AI Breadth Requirement</em></li>\r\n</ul>\r\n<p><strong><a href=\"http://www.cs.northwestern.edu/academics/courses/325/\" rel=\"noopener\" target=\"_blank\">http://www.cs.northwestern.edu/academics/courses/325/</a></strong></p>\r\n<p><strong>REQUIRED TEXTBOOK</strong>: Paul Graham<em>,&#160;<a href=\"http://www.paulgraham.com/acl.html\"><strong>ANSI Common Lisp</strong></a></em>, Pearson/Prentice-Hall</p>\r\n<p><strong>COURSE COORDINATOR:&#160;</strong><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/riesbeck-chris.html\">Prof. Chris Riesbeck</a></p>\r\n<p><strong>COURSE GOALS:&#160;</strong>This course is about</p>\r\n<p>&#8226; designing and implementing intelligent components for interactive distributed computational media</p>\r\n<p>&#8226; developing tools for authoring the knowledge needed by such systems</p>\r\n<p>&#8226; doing it all with maintainable code</p>\r\n<p><strong>PREREQUISITES:&#160;</strong>COMP_SCI 110 and COMP_SCI 111, or equivalent programming experience</p>\r\n<p><strong>DETAILED COURSE TOPICS:</strong></p>\r\n<p>&#8226; Common Lisp programming, including</p>\r\n<p>&#8226; Symbols, lists, strings, arrays, and other built-in data structures</p>\r\n<p>&#8226; Structures and the Common Lisp Object System (CLOS)</p>\r\n<p>&#8226; Functions and macros</p>\r\n<p>&#8226; Recursion and higher-order functions</p>\r\n<p>&#8226; Symbolic knowledge representation techniques, including</p>\r\n<p>&#8226; Hierarchically organized frame systems</p>\r\n<p>&#8226; Horn-style deductive reasoners</p>\r\n<p>&#8226; Test-driven development</p>\r\n<p>&#8226; Semantics and the Web:</p>\r\n<p>&#8226; Web clients and servers in Lisp</p>\r\n<p>&#8226; XML-RPC clients and servers in Lisp</p>\r\n<p>&#8226; XML and knowledge representations</p>\r\n<p><strong>HOMEWORK ASSIGNMENTS:&#160;</strong>The normal model of homework assignments does not apply to this course. Instead, students work as rapidly as possible through several dozen programming exercises involving a wide range of concepts and challenges. The exact set of exercises depends on each student's interests and skill development.</p>\r\n<p><strong>LABORATORY PROJECTS:</strong>&#160;Class lectures and class assignments will be organized around the class project. The class project will be some sort of intelligent web-based information system, but exactly what will be determined in class discussions, as we try to answer the AI question: why are computers so stupid?</p>\r\n<p><strong>GRADES:</strong></p>\r\n<ul>\r\n<li>Homework: 95%</li>\r\n<li>Participation in class and the newsgroup: 5%</li>\r\n</ul>\r\n<p><strong>COURSE OBJECTIVES:&#160;</strong>After this course, students will be able to</p>\r\n<ul>\r\n<li>develop standalone and web-based AI programs in Lisp using symbolic knowledge representation techniques</li>\r\n<li>apply software engineering best practices, especially test-driven development, to the development of maintainable code</li>\r\n</ul>"
        }
    },
    "330-2": {
        "course_name": "Human Computer Interaction",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "3-4 MW",
        "fall_instructor": "Zhang",
        "winter_time": "",
        "winter_instructor": "",
        "spring_time": "",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "COMP_SCI 211",
            "Description": "<p>Introduction to Human-Computer Interaction (HCI) and the design of systems that work for people and their organizations. HCI serves as the bridge between computing and humanity. The effective design of HCI systems requires a keen understanding of how interfaces and computer systems usefully support human endeavors (or not). Why would a particular set of characteristics of a system lead to reaching a desired outcome, while others encounter an obstacle? How might a good argument for a design be instantiated with effective interface and system models? Taking a step back, are our solutions actually addressing the underlying problem that humans face? What is actually the problem?</p>\r\n<p>We will, as a learning community, learn to ask and answer these questions for ourselves. One focus will be on developing our critical thinking and problem solving skills through team projects and studio critique, with special emphasis on learning more effective structures and representations for thinking about the design of HCI systems. Another focus will be on learning to soften into a deeper understanding of problems that people encounter than we might at first assume - that is, developing our capacities for humility, empathy, and curiosity. Last but not least, we focus on *doing* &#8212; agile sprints, rapid prototyping and testing, iterating &#8212; learning to face and embrace fears, imperfections, failures that may otherwise hold us back from moving forward. Through this we will learn to become more skillful in how we work on difficult problems.</p>\r\n<ul>\r\n<li><em>This course satisfies the CS Project Course &amp; CS Breadth: Interfaces requirement.</em></li>\r\n<li><em><strong>Spring:</strong> Students will be required to attend two lectures (MW) and one lab (Th or F).</em><em><span class=\"_Tgc\"></span></em></li>\r\n</ul>\r\n<p><strong>REQUIRED TEXTBOOK:</strong>&#160;None</p>\r\n<p><strong>REFERENCE TEXTBOOKS:</strong>&#160;None&#160;</p>\r\n<p><strong>COURSE INSTRUCTOR:</strong>&#160;<a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/zhang-haoqi.html\">Prof. Haoqi Zhang</a></p>"
        }
    },
    "334.html\">ELEC_ENG/COMP_ENG 334</a></td>\n    <td class=\"footable-visible footable-last-column\"><a href=\"descriptions/334.html\">Fundamentals of Blockchains and\n        Decentralization</a></td>\n    <td class=\"\" style=\"display: none;\"><br></td>\n    <td class=\"\" style=\"display: none;\">TuTh 9:30-10:50<br>Guo</td>\n    <td class=\"\" style=\"display: none;\"><br></td>\n    <td class=\"\" style=\"display: none;\"><br></td>\n</tr>\n<tr class=\"zebra\" style=\"display: table-row;\">\n    <td class=\"footable-visible footable-first-column\"><span class=\"footable-toggle\"></span><a\n            href=\"descriptions/335": {
        "course_name": "Intro to the Theory of Computation",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "",
        "winter_instructor": "",
        "spring_time": "12:30-1:50 TuTh",
        "spring_instructor": "Vijayaraghavan",
        "other": {
            "Prerequisites": "",
            "Description": ""
        }
    },
    "338-1": {
        "course_name": "Practicum in Intelligent Information Systems",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "11-12:20 TuTh",
        "winter_instructor": "Hammond",
        "spring_time": "11am-12:20 TuTh",
        "spring_instructor": "Hammond",
        "other": {
            "Prerequisites": "COMP_SCI 348 or COMP_SCI 349 or COMP_SCI 330 or COMP_SCI 339",
            "Description": "<p>A practical excursion into the building of Intelligent Information Systems. Each student will develop a working program in the area of information access, management, capture, or retrieval. Project definition, data collection, technology selection, implementation, and project management. Semantics-oriented introduction to natural language processing, broadly construed. Representation of meaning and knowledge inference in story understanding, script/frame theory, plans and plan recognition, counter-planning, and thematic structures.<em><br/> </em></p>\r\n<ul>\r\n<li><em>This course satisfies the&#160;Software Development Breadth and project requirement.</em></li>\r\n</ul>\r\n<p><strong><strong>COURSE</strong>&#160;INSTRUCTOR:&#160;</strong><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/birnbaum-larry.html\"></a><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/hammond-kristian.html\">Prof. Kristian Hammond</a> (Winter &amp; Spring)<strong><br/> </strong></p>\r\n<p><strong>COURSE COORDINATORS:&#160;</strong>Prof. Larry Birnbaum &amp; Prof. Kristian Hammond</p>\r\n<p><strong>REQUIRED TEXTS:&#160;</strong>None<strong>&#160;</strong></p>\r\n<p><strong>PREREQUISITES:&#160;</strong>None</p>"
        }
    },
    "338-2": {
        "course_name": "Practicum in Intelligent Information Systems",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "5-7:50 M",
        "fall_instructor": "Birnbaum",
        "winter_time": "",
        "winter_instructor": "",
        "spring_time": "",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "Refer to CAESAR for more detail",
            "Description": "<p>A practical excursion into the building of Intelligent Information Systems. Each student will develop a working program in the area of information access, management, capture, or retrieval. Project definition, data collection, technology selection, implementation, and project management. Semantics-oriented introduction to natural language processing, broadly construed. Representation of meaning and knowledge inference in story understanding, script/frame theory, plans and plan recognition, counter-planning, and thematic structures.<em><br/> </em></p>\r\n<ul>\r\n<li><em>This course satisfies the&#160;Software Development Breadth and project requirement.</em></li>\r\n</ul>\r\n<p><strong><strong>COURSE</strong>&#160;INSTRUCTOR:&#160;</strong><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/birnbaum-larry.html\">Prof. Larry Birnbaum</a> (Fall)<strong><br/> </strong></p>\r\n<p><strong>COURSE COORDINATORS:&#160;</strong>Prof. Larry Birnbaum &amp; Prof. Kristian Hammond</p>\r\n<p><strong>REQUIRED TEXTS:&#160;</strong>None<strong>&#160;</strong></p>\r\n<p><strong>PREREQUISITES:&#160;</strong>None</p>"
        }
    },
    "351-1": {
        "course_name": "Intro to Computer Graphics",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "9-9:50 MWF",
        "fall_instructor": "Tumblin",
        "winter_time": "",
        "winter_instructor": "",
        "spring_time": "1-1:50 MWF",
        "spring_instructor": "Tumblin",
        "other": {
            "Prerequisites": "CS 214-0 or Graduate Students",
            "Description": "<p>First in a 3-course series to teach the core principles, ideas &amp; math behind all forms of computer-assisted picture-making; complementary/compatible with computer-game design interests. After this course you can write your own programs to depict animated 2D and 3D objects that respond to mouse and keyboard inputs, yet run in any modern web browser. We write WebGL programs in Javascript to create GPU-driven high-performance 3D graphics in any up-to-date web browser (Skeptical? try try&#160;<strong><a href=\"http://www.chromeexperiments.com/webgl/\">http://www.chromeexperiments.com/webgl/</a></strong> )</p>\r\n<ul>\r\n<li><em>This course satisfies the Interfaces&#160;</em>Breadth <em>&amp;</em> project requirement.</li>\r\n</ul>\r\n<p>Don&#8217;t worry if you know C/C++ but not Javascript &#8211; the course helps you through the transition. We use the Google Chrome browser on any operating system (Windows, OS-X, Linux, etc.) which gives you a very nice debugging and tracing tools, and the course supplies you with already-working &#8216;starter code&#8217; examples to help you through the tough and/or confusing parts. You can always begin with starter code.</p>\r\n<p>We will &#8216;learn by doing&#8217;: no exams. Instead, you&#8217;ll design your own programs in these 4 projects: 1) Moving Shapes From Math: colored points, lines &amp; triangles moved interactively by matrix transforms; 2) Graceful 3D Views: Quaternions &amp; Scene Graphs let us fly over a colorful scene filled with moving shapes. 3) Better Lights &amp; Materials: compute, pose &amp; move 3D lights for surface materials both diffuse and shiny;<br/> 4) Textures &amp; Buffer tricks; Learn to &#8216;paint&#8217; photos onto 3D surfaces to add details &amp; richness.</p>\r\n<p><strong>COURSE GOAL:</strong>&#160;Comfort and ease in programming any desired interactive 2D or 3D shapes using OpenGL.</p>\r\n<p><strong>COURSE COORDINATOR:&#160;</strong><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/tumblin-john.html\" target=\"_self\">Prof. Jack Tumblin</a></p>\r\n<p><strong>COURSE INSTRUCTOR : <a href=\"mailto:j-tumblin@northwestern.edu\"></a></strong><a href=\"mailto:j-tumblin@northwestern.edu\">Prof. Tumblin</a><strong><br/></strong></p>\r\n<p><strong>REQUIRED TEXTBOOKS</strong>: &#160;</p>\r\n<p><strong>\"WebGL Programming Guide: Interactive 3D Graphics Programming with WebGL (OpenGL)\"</strong>&#160;By Kouichi Matsuda and Rodger Lea. (First edition) Addison-Wesley, &#169; 2013 Pearson Education, Inc. (Paperback or Kindle E-book &#8211; either is OK).</p>\r\n<p><strong>Also Required:</strong>&#160;Several miscellaneous PDFs to be posted on CANVAS throughout the quarter.</p>\r\n<p><strong>OTHER GOOD BOOKS: (Recommended but NOT REQUIRED)</strong></p>\r\n<p>&#160; &#160; &#160; &#160; &#160;&#160;<strong>--\"Mathematics for 3D Game Programming and Computer Graphics\" (3rd Edition)</strong>&#160;By Eric Lengyel Cengage Learning, &#169;2012 Course Technology (Paperback or Kindle E-Book &#8211; either is OK) (Also used in \"Intermediate Graphics\" course).</p>\r\n<p>&#160;&#160; &#160; &#160; &#160;&#160;<strong>&#160;--Website: Learningwebgl.com</strong>&#160;: free, quick, terse but complete tutorial with user comments/additions</p>\r\n<p>&#160;&#160; &#160; &#160;<strong>&#160;&#160;&#160; --Website: OpenGL.org</strong>&#160;: full of goodies! tutorials, FAQs, msg boards, complete OpenGL reference pages.<br/> <span></span></p>\r\n<p><strong>DETAILED COURSE TOPICS:</strong>&#160;Webpage Basics, Javascript Basics, WebGL within HTML-5 Canvas; keyboard and mouse control. Vector math, Homogeneous Coords, matrix transforms in a scene graph. Shape description with points, lines and polys. Viewing and camera matrices. GLSL basics, vertex shaders, fragment shaders; vertex colors and fragment shaders. Quaternions and trackball controls. &#8216;LookAt&#8217;, frustum &amp; 3D projections. Lights attached to moving objects. Phong lighting model, Phong shading model, surface normals. Specular reflection in shaders. Texture map basics. Antialiasing.</p>\r\n<p><strong>COMPUTER USAGE:</strong>&#160;Yes; required. Must be familiar and comfortable programming in C/C++ and/or JavaScript (Course assumes you have no background in JavaScript).</p>\r\n<p><strong>HOMEWORK ASSIGNMENTS:</strong>&#160;3 or 4 take-home quizzes. In-class exercises; reading to prep for class discussions; recommended problem sets from book..</p>\r\n<p><strong>LABORATORY PROJECTS:</strong> Three or Four guided programming projects aided by &#8216;starter code.&#8217;&#160;&#160;</p>\r\n<p><strong>GRADES:</strong></p>\r\n<ul>\r\n<li>3 or 4 projects with in-class demo and report</li>\r\n<li>3 or 4 quizzes + class participation points</li>\r\n<li>No Midterm or Final Exam.</li>\r\n</ul>"
        }
    },
    "351-2": {
        "course_name": "Intermediate Computer Graphics ",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "2-3:20 TuTh",
        "winter_instructor": "Tumblin",
        "spring_time": "",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "COMP_SCI 351-1 Intro. to Comp. Graphics or equiv.(ask—you may already know enough!)",
            "Description": "<p>Second in a 3-course series on the methods and theory of computer graphics, this project-oriented course explores how to describe shapes, movement, and lighting effects beyond the built-in abilities of WebGL. It includes interactive particle systems, simple rigid-body dynamics, explicit and implicit dynamics solvers (suitable for smoke, simple fluids and cloth) and an introduction to ray tracing (chrome, glass, and diffraction) with a few basic ideas for global illumination.</p>\r\n<ul>\r\n<li><em>This course satisfies the Technical Elective &amp; the Project Requirement.</em></li>\r\n</ul>\r\n<p><strong>COURSE GOALS:</strong> Comfort and ease creating visually accurate interactive non-polygonal objects such as smoke, fire, cloth, sand, ropes, with multi-bounce computed light transport via ray-tracing.</p>\r\n<p><strong>DETAILED COURSE TOPICS:</strong> The course has just two topics, but they are very broad:&#160;<br/> <strong>A. Particles and Movement:</strong> 1) Abandon triangle meshes to make 'shapeless' shapes (fireworks, swarms of bees, rain, snow, grass, etc.) from clouds of particles.&#160; How close can we get to modeling each particle in a cloud of steam?&#160; 2) Moving particles coupled together can simulate many interesting materials (rope, water, smoke, cloth, etc.). We'll explore both 'explicit' and 'implicit' solvers that make soft things move and behave realistically in mass-aggregate systems, combined with basic collision detection and rigid-body dynamics.<br/> <strong>B. Light Done Right:</strong> we'll learn ray tracing, BRDFs and light units, extended light sources (soft shadows), and some basic global illumination ideas. You will make pictures that look much more like photographs than drawings, with shadows, chrome reflections, transparency, and complex surfaces.</p>\r\n<p><strong>GRADES:</strong></p>\r\n<ul>\r\n<li>4 &#8216;reading&#8217; quizzes,</li>\r\n<li>2 progressively-graded projects with Demo Days and written project reports.</li>\r\n<li>No midterm exam, no final exam.</li>\r\n</ul>\r\n<p><strong>COURSE COORDINATOR</strong>: <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/tumblin-john.html\" target=\"_self\">Prof. Jack Tumblin</a></p>\r\n<p><strong>COURSE INSTRUCTOR : <a href=\"mailto:j-tumblin@northwestern.edu\"></a></strong><a href=\"mailto:j-tumblin@northwestern.edu\">Prof. Tumblin</a><strong><br/></strong></p>\r\n<p><strong>COMPUTER USAGE:</strong> Yes, required. WebGL usage builds on COMP_SCI 351-1</p>\r\n<p><strong>REQUIRED TEXTBOOK</strong>:&#160;<em><a href=\"https://www.routledge.com/Foundations-of-Physically-Based-Modeling-and-Animation/House-Keyser/p/book/9781482234602\" rel=\"noopener noreferrer\" target=\"_blank\">\"</a></em><a href=\"https://www.routledge.com/Foundations-of-Physically-Based-Modeling-and-Animation/House-Keyser/p/book/9781482234602\" rel=\"noopener noreferrer\" target=\"_blank\">Foundations of Physically-Based Modeling and Animation\"</a> &#169; 2017, Donald H. House and John C. Keyser; AK Peters / CRC Press. <strong>Note:</strong> available as hard-cover or as Kindle Edition (both cost $56).</p>\r\n<p><strong>REFERENCE TEXTBOOKS:</strong></p>\r\n<ul>\r\n<li><strong>&#8220;Game Physics-Engine Development&#8221;</strong> 2nd Ed.(2010), Ian Millington, CRC Press (former course text)</li>\r\n<li><strong>&#8220;Fluid Simulation for Computer Graphics&#8221;</strong> by Robert Bridson (c)2008 AK Peters.</li>\r\n<li><strong>&#8220;Game Physics Pearls&#8221;</strong> Gino van den Bergen, Dirk Gregorius (Eds.) (c)2010 AK Peters.</li>\r\n<li>SIGGRAPH/Pixar Short Course Notes <strong>&#8220;Particle Dynamics&#8221;</strong> by Witkin, Baraff.</li>\r\n<li>Handouts and misc. PDF documents written by instructor and others</li>\r\n</ul>\r\n<p><strong>LABORATORY PROJECTS:</strong> CS352 is a project-oriented course: lectures and reading are important, but for a deep and genuine understanding of computer graphics methods you really need to write some code and make some pictures of your own.&#160; Step-by-step, week-by-week, you will build two large programming projects that make astonishing pictures and animations.</p>"
        }
    },
    "365-465": {
        "course_name": "Internet-of-Things Sensors, Systems, and Applications",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "",
        "winter_instructor": "",
        "spring_time": "TuTh 12:30-1:50",
        "spring_instructor": "Hester",
        "other": {
            "Prerequisites": "Helpful but not required: experience with embedded systems and microprocessors (e.g. COMP_ENG 346, 347, 366), basic understanding of signals and systems (e.g. COMP_SCI 213, ELEC_ENG 222); knowledge of communication systems (e.g. ELEC_ENG) and data structures (e.g. COMP_SCI 214).",
            "Description": "<p>Buildings that recognize and adapt to their occupants, teams of drones that perform search and rescue or survey architectural digs, invisible implantable or wearables devices that support and protect patients in hospitals and homes, swarms of postage-stamp sized satellites orbiting earth supporting global scale space experiments. These applications and others have motivated the development of the Internet-of-Things; a paradigm for computing where trillions of tiny, even invisible computers support daily life, infrastructure, and humanity in general. While promising to revolutionize computing and the world, this vision of computing is far from fully realized&#8211;with many challenges in energy efficiency, miniaturization, networking, information retrieval and processing, security and privacy, and many other areas. <br/> <br/> This seminar style course will cover recent exciting work, and important early work in embedded systems, wireless sensor networks, computer architectures and languages, and other IoT related literature. We will investigate energy aware computing on tiny devices, new ultra low power communication paradigms, and emerging hardware platforms and operating systems. We will also discuss and analyze security, privacy, sustainability, and ethical issues that arise from the ubiquitous, invisible information gathering devices of the IoT. Finally, we will propose, exchange, analyze, and defend new ideas, systems, and applications for the future IoT.</p>\r\n<p><strong>INSTRUCTOR: <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/hester-josiah.html\">Prof. Josiah Hester</a></strong></p>\r\n<p><strong>COURSE GOALS:</strong> This course aims to (1) provide an introduction to the research and systems problems encountered at the edge of the IoT, (2) equip students with the ability to conduct original systems research, including generating and communicating ideas, (3) educate on the societal, security, and ecological impacts of ubiquitous computing.</p>\r\n<p><strong>DELIVERABLES:</strong></p>\r\n<ul>\r\n<li>Paper reviews: Papers will be read before each meeting and reviews written on merits</li>\r\n<li>Spirited in-class discussion: students are expected to defend ideas and reviewed papers</li>\r\n<li>Final project consisting of short research paper. This will NOT require building a system, just proposing and defending an idea, outlining possible experiments, and showing mastery of the scientific method as well as the literature. This project will have multiple milestones throughout the course.</li>\r\n</ul>\r\n<p><strong>GRADING:</strong> Paper Reviews 40%, Project 45%, In-class discussion / participation 15%</p>"
        }
    },
    "368-468": {
        "course_name": "Programming Massively Parallel Processors with CUDA",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "TuTh 2:00 – 3:20",
        "winter_instructor": "Hardavellas",
        "spring_time": "",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "COMP_SCI 213 and (COMP_SCI 211 or COMP_SCI 230) or consent of instructor",
            "Description": "<p>This course focuses on developing and optimizing applications software on massively parallel graphics processing units (GPUs). Such processing units routinely come with hundreds to thousands of cores per chip and sell for a few hundred to a few thousand dollars. The massive parallelism they offer allows applications to run 2x-450x faster than on conventional multicores. However, to reach this performance improvement, the application must fully utilize the computational, storage and communication resources provided by the device. This course discusses state-of-the-art parallel programming optimization methods to achieve this goal.</p>\r\n<p>Ideally this course will bring together people with strong programming skills, with people with a strong need for solving compute-intensive problems that can benefit from programming graphics processors. The initial part of the course will discuss a popular programming interface for graphics processors, the CUDA programming tools for NVIDIA processors. The course will continue with a closer view of the internal architecture of graphics processors and how it impacts performance. Finally, implementations of applications and algorithms on graphics processors will be discussed.</p>\r\n<p>The course is lab intensive, and it will utilize the machines at the Wilkinson lab. Students taking the course for COMP_ENG/EECS-368 credit will work on labs that utilize advanced parallel programming, data layout, and algorithm decomposition concepts. Students taking the course for COMP_ENG/EECS-468 credit will work on the same labs and also a quarter-long open-ended final project that draws upon their own interests and line of research. Ideally, in their final project these students will form interdisciplinary teams and complete the first steps of optimizing a real-world compute-intensive problem in science or engineering (e.g., materials science, astrophysics, civil engineering, etc.).</p>\r\n<br/>\r\n<p><strong>COURSE COORDINATOR:</strong>&#160;&#160;<strong><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/hardavellas-nikos.html\" target=\"_self\">Prof. Nikos Hardavellas</a></strong>&#160;(Instructor)</p>\r\n<p><strong>TEXTBOOK:&#160;</strong></p>\r\n<p><em><strong>Required:</strong></em></p>\r\n<ul>\r\n<li>\r\n<p>Programming Massively Parallel Processors: A Hands-on Approach. D. Kirk and W.-M. Hwu. Morgan-Kaufman</p>\r\n</li>\r\n</ul>\r\n<p><strong><em>Reference textbooks (not required):</em></strong></p>\r\n<ul>\r\n<li>CUDA by Example. J. Sanders and E. Kandrot. Pearson/Addison-Wesley</li>\r\n<li>GPU Computing Gems Emerald Edition.&#160;W.-M. Hwu. Morgan-Kaufman</li>\r\n<li>GPU Computing Gems Jade Edition.&#160;W.-M. Hwu. Morgan-Kaufman</li>\r\n<li>Patterns for Parallel Programming. T.G. Mattson, B.A. Sanders, and B.L. Massingill. Pearson/Addison-Wesley</li>\r\n<li>Introduction to Parallel Computing. A. Grama, A. Gupta, G. Karypis, and V. Kumar. Pearson/Addison-Wesley</li>\r\n<li>Heterogeneous Computing with OpenCL. B.R. Gaster, L. Howes, D.R. Kaeli, P. Mistry, and D. Schaa. Morgan Kaufmann</li>\r\n</ul>\r\n<p><strong>LAB ASSIGNMENTS</strong></p>\r\n<p>There will be several programming assignments. Each programming assignment will involve successively more sophisticated programming skills. The labs will be done in groups of two. The list below is tentative and subject to change:</p>\r\n<ol>\r\n<li>Matrix multiplication. The lab&#8217;s focus is on producing correct code. This project reinforces the acquisition of basic GPU/CUDA programming skills, the software interface, and the basic architecture of the device.</li>\r\n<li>Tiled matrix multiplication. This lab focuses on data layout and decomposition, and full utilization of shared memory resources and global bandwidth through bank conflict avoidance and memory coalescing.</li>\r\n<li>Histograms. In this lab you are called to define optimization goals and strategy, implement them, and keep a research lab journal on which you report statistics and analyze every optimization you tried, even ones that did not work or degraded performance. For this assignment you will need to read recent research papers that outline some of the best-known ways to solve this problem.</li>\r\n<li>Parallel prefix sum / vector reduction. This lab focuses on the application of efficient parallel algorithms that utilize shared memory and synchronization and minimize path divergence.</li>\r\n<li>2D convolution (tentative &#8211; typically we do not have time for it, but I always try). While the previous labs involved detailed instructions and scaffolding code, this lab provides students only with a problem statement, along with optimization goals and hints. This lab&#8217;s focus is on independent thinking and reinforces concepts learned in the previous labs.</li>\r\n</ol>\r\n<br/>\r\n<p><strong>FINAL PROJECT: </strong>(COMP_ENG 468 only)</p>\r\n<p>The project focuses on open-ended research. The work will be a quarter-long open-ended final project that draws upon the students&#8217; own interests and line of research. Ideally, in their final project the students will form interdisciplinary teams and complete the first steps of optimizing a real-world contemporary compute-intense problem in science or engineering (e.g., materials science, astrophysics, civil engineering, etc.). The students are expected to base their ideas on recent literature and their own line of research and needs. It is the students responsibility to propose a research project suitable for this class. The project selection requires the permission of the instructor. For this, there will be a project proposal phase. The final project will culminate to a paper report, and a presentation/demo held at the final few class meetings.</p>\r\n<p><strong>COURSE OBJECTIVES: </strong>When a student completes this course, s/he should be able to:</p>\r\n<ul>\r\n<li>(a) Apply knowledge of mathematics, science, and engineering (parallel programming techniques, kernel decomposition, synchronization, memory access optimizations, data layout transformations, branching/loop optimizations, algorithm cascading, Brent&#8217;s theorem, input diagonalization, FP representations, regularization, compaction, binning, thread coarsening).</li>\r\n<li>(b) Design and conduct experiments, analyze, and interpret data (design and conduct experiments on real massively parallel applications written using CUDA, utilize industrial tools to identify and overcome performance bottlenecks, measure execution time and speedup on GPU devices).</li>\r\n<li>(c) Design a software system to meet desired needs within realistic constraints (design optimized massively parallel programs for GPUs by amplifying the utilization of constrained resources including PCIe bandwidth, global memory bandwidth, shared memory banks, texture and constant memory, warps, thread blocks, SMP registers, etc.).</li>\r\n<li>(d) Ability to function on multidisciplinary teams (the collaborative term projects will ideally pair together computer scientists and engineers with domain experts).</li>\r\n<li>(e) Ability to identify, formulate, and solve engineering problems using industry-strength CUDA tools.</li>\r\n<li>(g) Ability to communicate effectively (research papers and reports, presentations, posters).</li>\r\n<li>(i) Recognize the need for, and have the ability to engage in life-long learning (read recent research papers in an unfamiliar subject and assimilate knowledge without direct supervision).</li>\r\n<li>(j) Gain knowledge of contemporary issues (state-of-the-art in GPU programming, energy-efficiency in computer architectures, high-performance parallel programming, heterogeneous computing).</li>\r\n<li>(k) Ability to use the techniques, skills, and modern engineering tools necessary for engineering practice (GPUs, CUDA, occupancy calculator, Ocelot, OpenCL, parallel programming techniques).</li>\r\n</ul>\r\n<p><strong>TENTATIVE SCHEDULE</strong></p>\r\n<ul>\r\n<li><strong>Week 1:</strong> Introduction to GPUs and their Programming Model. Topics include: grids, blocks, threads, memory model, execution model, software architecture, basic API.</li>\r\n<li><strong>Week 2:</strong> GPU Architecture Overview and Execution API.&#160;Topics include: streaming processors, streaming multiprocessors, texture clusters, streaming arrays, block&#160;scheduling and execution, warps, scoreboarding, memory parallelism, register file, execution&#160;staging, subtyping, measuring time, compilation overview.</li>\r\n<li><strong>Week 3:</strong> Memory Performance and Control Flow; Example application: Matrix Transpose.&#160;Topics include: coalescing, bank conflicts, DRAM memory controller organization, DRAM burst mode, tiling,&#160;padding, flow divergence.</li>\r\n<li><strong>Week 4:</strong> Performance and Occupancy;&#160;PTX Assembly and Profiler. Topics include: TLP, ILP, OoO execution, RAW/WAW hazards, occupancy measurements,&#160;hardware counters, visual profiler, predicated execution, PTX assembly overview.</li>\r\n<li><strong>Week 5:</strong> Putting everything to work: Parallel Reductions.&#160;Topics include: global synchronization, kernel decomposition, memory coalescing, non-divergent branching,&#160;eliminating shared-memory bank conflicts, loop unrolling, Brent&#8217;s Theorem, algorithm cascading.</li>\r\n<li><strong>Week 6:</strong> Work with atomics: Histograms; Vector Programming.&#160;Topics include: data races, atomics, input diagonalization, privatization, bank mapping, warp voting, vector loop&#160;semantics, order of evaluation, vectorization with forward dependencies, pragma directives for data,&#160;temporal evolution, elemental functions, uniform/linear clauses, outer loop vectorization,&#160;vectorizing function calls.</li>\r\n<li><strong>Week 7:</strong> Parallel Prefix Scan;&#160;Sparse Arrays.&#160;Topics include: inclusive scan, enforcing block ordering, exclusive scan, multi block/kernel parallel prefix scan, warp&#160;voting, fences,&#160;gpu implementations of&#160;compressed sparse array representations (CSR, diagonal, ellpack, coordinate, hybrid&#160;ell/coo, packet format).</li>\r\n<li><strong>Week 8:</strong>&#160;Advanced Blocking/Tiling; Convolution;&#160;Textures.&#160;Topics include:&#160;thread coarsening, stencil computation on GPUs, cache blocking, register tiling, two-pass methods, loop skewing,&#160;texture arrays, nearest point&#160;sampling, linear filtering, clamping, CUDA arrays, 2D texture locality.</li>\r\n<li><strong>Week 9:</strong> Input Binning, Parallel Programming Overview. Topics include: binning, scatter/gather, cut-off summation, bin design, thread coarsening and binning, horizontal vs. vertical scaling, shared memory programming, message passing, data sharing models,&#160;algorithm structures vs. parallel programming coding styles, parallel program models vs.&#160;programming models, regularization, compaction, binning, data layout transformations, thread&#160;coarsening, scatter/gather, tessellation, limiter theory.</li>\r\n<li><strong>Week 10:</strong> (optional reading) Floating Point Considerations;&#160;Introduction to OpenCL. Topics include:&#160;floating-point representation, flush-to-zero,&#160;denormalization, rounding, units-in-the-last-place, mixed-precision methods, OpenCL kernel&#160;structure and invocation, context, devices, command queues, memory allocation, argument&#160;construction.</li>\r\n<li><strong>Week 11-12:</strong> Project Demos and Project Deliverables (Report Paper, Code, Presentation)</li>\r\n</ul>\r\n<p><strong>ABET Content Category:&#160;</strong>100% Engineering (Design component)</p>"
        }
    },
    "372-472": {
        "course_name": "Designing and Constructing Models with Multi-Agent Languages",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "",
        "winter_instructor": "",
        "spring_time": "3:30-4:50 TuTh",
        "spring_instructor": "Wilensky",
        "other": {
            "Prerequisites": "COMP_SCI 472 requires graduate school enrollment.",
            "Description": "<div class=\"item-page\">\r\n<p>This course focuses on the exploration, construction and analysis of multi-agent models. Sample models from a variety of content domains are explored and analyzed. Spatial and network topologies are introduced. The prominent agent-based frameworks are covered as well as methodology for replicating, verifying and validating agent-based models. We use state of the art ABM and complexity science tools. This course can help satisfy the project course and artificial intelligence area course requirement for CS and CIS majors, and satisfy the breadth requirement in artificial intelligence for Ph.D. students in CS. It also satisfies a design course requirement for Learning Sciences graduate students, counts towards the Cognitive Science specialization and as an advanced elective for the Cognitive Science major.</p>\r\n<ul>\r\n<li>Joint with&#160;<strong><a href=\"472.html\" target=\"_self\">COMP_SCI 472</a></strong>.&#160;Please refer to the description for&#160;<strong><a href=\"472.html\" target=\"_self\">COMP_SCI 342</a></strong>.&#160;</li>\r\n<li><em>This course satisfies the AI Breadth</em> Requirement</li>\r\n<li><em>This course has been cross-listed with LRN_SCI 372/472 (Spring 2021).</em></li>\r\n</ul>\r\n<p><strong>COURSE COORDINATOR:&#160;</strong><strong><a href=\"http://eecs.northwestern.edu/people/userprofile/uwilensky2010\" target=\"_self\">Prof. Uri Wilensky</a></strong></p>\r\n<p><strong>REQUIRED TEXTBOOKS:</strong>&#160;Introduction to agent-based Modeling: Modeling natural, social and engineered complex systems with NetLogo - Uri Wilensky, MIT Press&#160;</p>\r\n<p><strong>COURSE GOAL:</strong>&#160;Construct and analyze multi-agent models in both spatial and network topologies</p>\r\n<p><strong>DETAILED COURSE TOPICS:</strong></p>\r\n<ul>\r\n<li>What is an agent?</li>\r\n<li>Stationary and moveable agents</li>\r\n<li>Interactions between agents</li>\r\n<li>Agent topologies</li>\r\n<li>Properties of networks</li>\r\n<li>Applications of ABM</li>\r\n<li>Artificial Life</li>\r\n<li>Comparison with Systems Dynamics Models</li>\r\n<li>Integration of Machine Learning</li>\r\n<li>Evolutionary computation</li>\r\n<li>Systematic exploration of model parameter space</li>\r\n<li>Verification of model specification</li>\r\n<li>Replication of models</li>\r\n<li>Validation of models</li>\r\n<li>Connecting ABM with physical devices</li>\r\n<li>Sensors and motors</li>\r\n<li>Combining human and virtual agents</li>\r\n<li>Participatory simulations</li>\r\n</ul>\r\n<p><strong>GRADES:</strong></p>\r\n<ul>\r\n<li>No exams for this class</li>\r\n<li>20% Participation</li>\r\n<li>30% Homework</li>\r\n<li>50% Final Project</li>\r\n</ul>\r\n<p><strong>COURSE OBJECTIVES FOR STUDENTS:</strong></p>\r\n<p>When a student completes this course, he/she should be able to:</p>\r\n<ul>\r\n<li>Identify core mechanisms of novel agent-based models</li>\r\n<li>Identify trade-offs in the design and use of agent topologies</li>\r\n<li>Construct original multi-agent models</li>\r\n<li>Use behavior run and analysis tools to analyze model parameter space</li>\r\n<li>Verify and validate agent-based models</li>\r\n<li>Apply agent-based modeling to both scientific and everyday phenomena</li>\r\n</ul>\r\n"
        }
    },
    "396-1": {
        "course_name": "Introduction to Cryptography",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "12:30-1:50 TuTh",
        "fall_instructor": "Wang",
        "winter_time": "",
        "winter_instructor": "",
        "spring_time": "",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "(COMP_SCI 212 and COMP_SCI 214) or Graduate (MS or Ph.D) student standing",
            "Description": "<p>This course covers the basic knowledge in understanding and using cryptography.&#160;The main focus is on definitions, theoretical foundations, and rigorous proofs of security, with some programming practice.&#160;Topics include symmetric and public-key encryption, message integrity, hash functions, block-cipher design and analysis, number theory, and digital signatures.</p>\r\n<h2>Overview</h2>\r\n<p>This course is an undergraduate introduction to cryptography, aiming to present the theoretical foundations of cryptosystems used in the real world. In this class, we will look \"under the hood\" about common cryptographic objects to get a better understanding of various cryptographic primitives, algorithms, attacks, and protocols.&#160;<br/> <br/><strong>RECOMMENDED TEXTBOOK: </strong><strong>Introduction to Modern Cryptography, 2nd edition</strong>. Students are strongly advised to obtain a physical copy of the book since exams will be \"open book\" with no electronic devices permitted.&#160;Assignments will be picked from this book.</p>\r\n<p><strong>Prerequisites.&#160;</strong>No advanced mathematics background is assumed, but students are expected to have \"mathematical maturity\" since many of the concepts will be abstract, rigorous definitions and proofs will be given, and some new mathematics (e.g., group theory, number theory) will be introduced. Basic background in discrete mathematics (probability, modular arithmetic) and a basic background in algorithms (big-O notation and worst-case analysis, reading pseudocode) is assumed.</p>\r\n<p><strong>DETAILED COURSE TOPICS:<br/></strong></p>\r\n<p><strong>Symmetric-key Cryptography.</strong><br/> - The syntax of private-key encryption. The classical ciphers.&#160;Elementary cryptanalysis and frequency analysis. &#160;<br/> - Perfect secrecy. The one-time pad.<br/> - A computational notion of security. Pseudorandomness and pseudorandom generators. The pseudo-OTP.&#160;<br/> - Proofs by reduction, and a proof of security for the pseudo-OTP. Pseudorandom functions, Pseudorandom permutations and block ciphers.</p>\r\n<p>- Security for multiple encryptions.&#160; CPA-security from pseudorandom functions.&#160;<br/> - Block-cipher and stream-cipher modes of operation.<br/> - Chosen-ciphertext attacks and CCA-security.&#160;<br/> - Defining security for MACs. A fixed-length MAC. MACs for arbitrary-length messages. CBC-MAC and HMAC.&#160;<br/> - Padding-oracle attacks. Authenticated encryption and generic constructions.&#160;<br/> - Hash functions and collision resistance. Birthday attacks on hash functions. The Merkle-Damgard transform.&#160;Hash functions as random oracles. Additional applications of hash functions.</p>\r\n<p><strong>Public-key Cryptography.<br/> - </strong>Group theory.<br/> - The discrete-logarithm assumption and the Diffie-Hellman assumption.<br/> - Diffie-Hellman key-exchange protocol.&#160;<br/> - El-Gamal encryption.&#160;<br/> - Hybrid encryption and the KEM/DEM paradigm.&#160;<br/> - Digital signatures.<br/> - The hash-and-sign paradigm.&#160;<br/> - Certificates and public-key infrastructures.</p>\r\n<p><strong>COURSE COORDINATOR: </strong><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/wang-xiao.html\">Prof. Xiao Wang</a><strong><br/>COURSE INSTRUCTOR: </strong><a href=\"mailto:wangxiao@northwestern.edu\">Prof. Wang</a></p>"
        }
    },
    "396-10": {
        "course_name": "Modeling Relationships with Causal Inference",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "5-6:20 MW",
        "winter_instructor": "Wood-Doughty",
        "spring_time": "",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "Permission of Instructor",
            "Description": "<p>We know that correlation does not imply causation, but careful analyses of correlations are often our only way to quantify cause and effect in domains ranging from healthcare to education. This courses introduces causal inference methods, primarily using probabilistic graphical models, to identify and estimate counterfactual quantities as functions of observational data. We will discuss common challenges to causal inference, including confounding bias, missing data, measurement error, and selection bias. The final project will allow students to choose a dataset on which to perform a causal data analysis.</p>\r\n<p><strong>REFERENCE TEXTBOOKS: N/A</strong><br/><strong>REQUIRED TEXTBOOK: </strong><em>Causal Inference: What If</em> by Miguel Hern&#225;n and James M. Robins (2020)<strong><br/> <a href=\"https://urldefense.com/v3/__https:/www.hsph.harvard.edu/miguel-hernan/causal-inference-book/__;!!Dq0X2DkFhyF93HkjWTBQKhk!GZC3eBirXz0jVO5GGg9ScyfMdzBuztdRmcntW4Bq-B2FwLQsxGaK4_11AuQcYgbSeD2sFWxmjw$\">https://www.hsph.harvard.edu/miguel-hernan/causal-inference-book/</a><br/></strong></p>\r\n<p><strong>COURSE COORDINATORS: </strong><a href=\"emailto:zach@northwestern.edu\">Zach Wood-Doughty</a><span></span></p>\r\n<p><strong>COURSE INSTRUCTOR : </strong><a href=\"emailto:zach@northwestern.edu\">Prof. Zach Wood-Doughty</a><span></span></p>\r\n<p><strong>COURSE GOALS: </strong>By the end of the course, each student should be comfortable:<br/> &#160;- Explaining how different sources of bias can invalidate causal inferences<br/> &#160;- Creating a graphical model that represents a given dataset<br/> &#160;- Identifying whether a causal effect is identified in a given graphical model<br/> &#160;- Critiquing published papers and articles that make causal claims<strong><br/></strong><strong><br/></strong></p>"
        }
    },
    "396-11": {
        "course_name": "Communicating Computer Science",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "5-6:20 MW",
        "winter_instructor": "Bain",
        "spring_time": "",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "Permission of Instructor - https://forms.gle/gPoUiR47pviccDgw9",
            "Description": "<p>In this class we will work together to a) examine how people in the real world communicate about computer science and b) practice how we might communicate computational ideas to various members of the public.&#160;The core idea is to explore&#160;cultural, practical, and policy-related roles of computer science communication in wider society.</p>\r\n<p>We'll talk about how to communicate to various audiences (e.g. general public; press; policy makers; academics; etc.) and do a number of practical assignments that help us practice our communication skills in various formats (i.e. talks; classes; interviews; etc.).&#160;Much of the class will be centered on reading, watching, and critiquing existing computing-related materials (e.g. magazine/newspaper articles; TED Talks; media interviews; etc.). Other assignments will be more practice focused with idea that each student will be able to select both the types of communication (e.g. spoken; written; YouTube video; etc.) and content (e.g. cryptocurrency; quantum computing; etc.) that are of interest to them for most&#160;assignments.</p>\r\n<p><strong>COURSE GOALS:</strong><br/>This course would be ideal for students interested in:</p>\r\n<p>+ Communicating your own research to both academic and non-academic audiences<br/>+ Working in public outreach to spread awareness of CS<br/>+ Thinking about how we might inform policymakers of ideas in CS that have cultural and legal&#160;&#160;&#160;&#160; significance</p>\r\n<p><strong>REFERENCE TEXTBOOKS: N/A</strong><br/><strong>REQUIRED TEXTBOOK: N/A<br/></strong></p>\r\n<p><strong>COURSE COORDINATORS: </strong><a href=\"mailto:zach@cs.jhu.edu\"></a><a href=\"mailto:connor.bain@northwestern.edu\">Prof. Connor Bain<br/></a><span></span><strong>COURSE INSTRUCTOR : </strong><a href=\"mailto:connor.bain@northwestern.edu\">Prof. Connor Bain</a><span></span><strong><br/></strong></p>"
        }
    },
    "396-12": {
        "course_name": "Proving Properties of Programs with Mechanized Logic",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "11-11:50 MWF",
        "fall_instructor": "Findler",
        "winter_time": "",
        "winter_instructor": "",
        "spring_time": "",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "COMP_SCI 212 and COMP_SCI 214; Recommended (but not required): 321 or 325",
            "Description": "<p>This course will explore the state of the art in how to implement and prove facts about software. We will focus on small, functional programs and expressing properties of them via an (extremely) sophisticated dependent type system.</p>\r\n<p>By the end of this course, expect to have a better understanding of how to think about properties of programs, how to write code that demonstrates that those properties are true, and some experience programming in Agda.</p>\r\n<p><strong>COURSE TEXT:</strong> <em>Verified Functional Programming in Agda</em>, by Aaron Stump: <a href=\"https://dl.acm.org/citation.cfm?id=2841316\">https://dl.acm.org/citation.cfm?id=2841316</a>&#160;<a href=\"https://dl.acm.org/citation.cfm?id=2841316\"></a>(access via Northwestern's network to download PDF)</p>\r\n<p><strong>COURSE INSTRUCTOR:</strong> <strong><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/findler-robert.html\" target=\"_self\">Prof. Robby Findler</a></strong></p>"
        }
    },
    "396-14": {
        "course_name": "Introduction to Computational Linguistics",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "2-3:20 MW",
        "fall_instructor": "Voigt",
        "winter_time": "",
        "winter_instructor": "",
        "spring_time": "",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "CS 110, 111 or Permission of Instructor",
            "Description": "<p>Hands-on introduction to computational methods in empirical linguistic analysis and natural language processing. Topics include language modeling, text classification, linguistic annotation, computational semantics, and machine translation. Students will implement and apply computational models to real linguistic datasets, and conclude the course with a final project.&#160; </p>\r\n<ul>\r\n<li><em><span class=\"_Tgc\">Cross-listed</span> as <a href=\"https://catalogs.northwestern.edu/undergraduate/courses-az/ling/\">LING 334-0</a></em></li>\r\n</ul>\r\n<p><strong>REFERENCE TEXTBOOKS: N/A</strong><br/><strong>REQUIRED TEXTBOOK: N/A<br/></strong></p>\r\n<p><strong>COURSE COORDINATORS: </strong><a href=\"http://faculty.wcas.northwestern.edu/robvoigt\">Rob Voigt</a></p>\r\n<p><strong>COURSE INSTRUCTOR : </strong><a href=\"mailto:robvoigt@northwestern.edu\">Prof. Rob Voigt</a><span></span></p>\r\n<p><strong>COURSE GOALS: N/A<br/></strong><strong><br/></strong></p>"
        }
    },
    "396-15": {
        "course_name": "Social Networks Analysis",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "6:30-9:20 Th (Discussion: F 12-12:50, 3-3:50)",
        "winter_instructor": "Contractor",
        "spring_time": "",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "The course has no formal pre-requisites but will be most beneficial to students who have had an introductory statistics course",
            "Description": "<p>The use of social network analysis to understand the growing connectivity and complexity in the world around us on different scales, ranging from small groups to the World &#8216;Wide Web. How we create social, economic, and technological networks, and how they enable and constrain attitudes and behaviors.</p>\r\n<ul>\r\n<li>This course is an MS elective for Industrial Engineering.</li>\r\n<li><em><strong>Cross-listed with </strong></em>IEMS 341 &amp; Comm_St 352.</li>\r\n</ul>\r\n<p><strong><em>&#160;</em>LEARNING OBJECTIVES</strong></p>\r\n<ul>\r\n<li>The use of social network analysis to understand the growing connectivity and complexity in the world around us on different scales, ranging from small groups to the World Wide Web.</li>\r\n<li>How we create social, economic, and technological networks, and how they enable and constrain attitudes and behaviors.</li>\r\n</ul>\r\n<p><strong>&#160;</strong><strong>TOPICS</strong></p>\r\n<ul>\r\n<li>Social network concepts and theories</li>\r\n<li>Visual-analytic methods</li>\r\n<li>Network mapping</li>\r\n<li>Recommender systems</li>\r\n<li>Search engines</li>\r\n<li>Social networking sites</li>\r\n</ul>\r\n<p><strong>MATERIALS</strong></p>\r\n<p>All readings will be posted on the course Canvas site</p>\r\n<p><strong>ADDITIONAL INFORMATION</strong></p>\r\n<p>The course will discuss how social networks concepts, theories, and visual-analytic methods are being used to map, measure, understand and design a wide range of phenomena such as social networking sites (e.g., Facebook, Twitter), recommender systems (e.g., Amazon, Netflix, Pandora), trust and reputation systems (e.g., eBay, Epinions, Slashdot), search engines (e.g., Google, Bing), P2P file-sharing (e.g., BitTorrent), user-generated content (e.g., Flickr, Wikipedia, Yelp), social news sites (e.g. reddit) and virtual worlds (e.g., Second Life, EverQuest, World of Warcraft).</p>\r\n<p><strong>COURSE COORDINATORS: </strong><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/contractor-noshir.html\">Noshir Contractor</a><span></span></p>\r\n<p><strong>COURSE INSTRUCTOR : </strong><a href=\"mailto:nosh@northwestern.edu\">Prof. Contractor</a><span></span><strong><br/></strong></p>"
        }
    },
    "396-2": {
        "course_name": "Online Markets",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "",
        "winter_instructor": "",
        "spring_time": "2-3:20 TuTh",
        "spring_instructor": "Hartline",
        "other": {
            "Prerequisites": "Comp_sci 212 and 214 or 336 or ECON 380-1(Game Theory)",
            "Description": "Online markets are causing significant changes to society. &#160;Examples include eBay, airBnB, tinder, Uber, stackexchange, and Amazon. &#160;This class gives an introduction to the science of online markets combining topics from game theory and economics with topics from machine learning and algorithms. &#160;The two main topics of interest are how individuals in these market places optimize their strategies and how the market designer optimizes the rules of the market place so that, when individuals optimize their strategies, desired market outcomes are achieved. &#160;Student work will be a mix of problem sets and short projects.<br/>\r\n<p><strong>COURSE INSTRUCTOR: </strong><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/hartline-jason.html\">Prof. Jason Hartline</a><a href=\"http://www.mccormick.northwestern.edu/research-faculty/directory/profiles/hartline-jason.html\"></a></p>"
        }
    },
    "396-295": {
        "course_name": "AI and Experimental Narrative",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "",
        "winter_instructor": "",
        "spring_time": "5-6:20 TuTh",
        "spring_instructor": "Horswill",
        "other": {
            "Prerequisites": "COMP_SCI 111 and (COMP_SCI 150 or 211)",
            "Description": "<p>Story games (or storygames) are narrative frameworks in which participants (players) collaborate with each other and with the system to tell stories they find compelling.&#160; Examples include story-centric computer role-playing games such as <em>Disco Elysium</em>, but also larp and story-centric tabletop role playing games such as those based on the Fate, PBtA, GUMSHOE, and DramaSystem systems, as well as smaller, more personal games of the lyric games movement.</p>\r\n<p>In this course we will study, play and design story games, study and build AI-based story-generation systems, and experiment with the use of AI systems in story games.&#160; No previous programming knowledge is necessary for the 295 section.&#160; The 396 section will go more deeply into the formal and algorithmic foundations of these technologies.</p>\r\n<p>AI assignments will use two experimental AI systems, <em>Step</em>, and <em>Imaginarium</em>, designed to be accessible to non-programmers.&#160; 295 students will use these systems as tools to make stories and story artifacts. &#160;396 students will additionally learn their detailed semantics and structure.&#160;</p>\r\n<h3>Grading</h3>\r\n<ul>\r\n<li>Individual assignments: 50% (AI assignments, weekly feedback from your group)</li>\r\n<li>Group assignments: 50% (game designs, weekly gameplay reports)</li>\r\n</ul>\r\n<h3>Reasons not to take this course</h3>\r\n<p>This class is not for everyone.&#160; One issue is that we really will play story games in class.&#160; These games involve acting, and effectively, fiction writing.&#160; If these things will make you feel exposed and uncomfortable, that&#8217;s okay, but you might not enjoy the course.&#160; That said, you will never be graded on your acting ability or artistry, only on whether you showed up prepared for your games and you made an honest effort.</p>\r\n<p>This is not intended to be a conceptually difficult course.&#160; But it will be a time-intensive course, since it will involve not only programming, but playing games, reading games, and watching videos of games being played.&#160; Students should expect to spend 10 hours a week on outside activities (gameplay, assigned readings and videos, game design, and working with the AI tools, guest speakers).</p>\r\n<p>Finally, we will be playing improvisational games that emphasize character and story, not combat-oriented RPGs like <em>Dungeons and Dragons</em> that make less contact with the AI and narrative issues we want to explore.&#160; So if you&#8217;re drawn to RPGs for combat, leveling up, min-maxing, etc., you may be disappointed by the course.</p>\r\n<h3>Thematic content and trigger warnings</h3>\r\n<p>These games tell stories; they&#8217;re a form of literature or theatre.&#160; As such, they address the same wide range of themes as traditional literature and theatre.&#160; While we will avoid playing games likely to produce emotional distress, we will discuss a wide range of games.&#160; Some of these games may address difficult issues such as race, gender, ethnic conflict, poverty, anti-capitalism, religion, sexuality, disability, illness, mortality, suicide, and mental health.</p>\r\n<p>Many games involve explicit depictions or simulations of violence.&#160; Although, we will not play games that mandate graphic depictions of violence, many of the games we discuss will have some notion of combat.&#160; Some games seek to raise awareness of intimate partner violence, child abuse, or sexual assault, although we will not play them.</p>\r\n<p>Horror has been an especially important genre in the historical development of narrative games.&#160; These include games involving threats from monsters, but also cosmic/existential horror.&#160; As with any horror literature, they can also involve themes or events deliberately chosen for their disturbing nature: serial killing, war crimes, child abuse, etc.&#160; These games also often represent mental illness, usually in ways chosen for dramatic effect more than clinical accuracy.</p>\r\n<p>Finally, contemporary game design is often critically and politically engaged.&#160; At least three different games we will mention touch on the issues of access to health care within the US.&#160; One of the collections we will discuss is named <a href=\"http://storytelling.pelgranepress.com/feminism-a-nano-game-anthology/\"><em>#feminism</em></a>.&#160; Some of the games we will discuss are designed by members LGBTQIA+ community and engage issues of queer experience, be it contemporary, historical or fantastical.</p>\r\n<p>Again, we will not play games in class that are likely to produce emotional distress.&#160; In the event of unanticipated emotional distress, any student may bow out of any game at any time.&#160; That said, if any of the content discussed above is problematic for you, you might prefer to avoid the course.</p>\r\n<p><strong>COURSE COORDINATOR: <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/horswill-ian.html\" target=\"_self\">Prof. Ian Horswil</a><br/>COURSE INSTRUCTOR: <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/horswill-ian.html\" target=\"_self\">Prof. Ian Horswil</a></strong></p>"
        }
    },
    "396-3": {
        "course_name": "Introduction to the Data Science Pipeline",
        "summer_time": "10 -11:40 TuTh Eight-week format",
        "summer_instructor": "Hu",
        "fall_time": "2-3:20 TuTh",
        "fall_instructor": "Hu",
        "winter_time": "",
        "winter_instructor": "",
        "spring_time": "2-3:20 TuTh",
        "spring_instructor": "Hu",
        "other": {
            "Prerequisites": "(CS 211 and CS 212) or graduate student or instructor consent",
            "Description": "<p>This course aims to cover various tools in the process of data science for obtaining, cleaning, visualizing, modeling, and interpreting data. Most of the tools introduced in this course will be based on Python, although the idea can be applied to similar tools in other programming languages. The goal of this course is not about the foundation of relevant technologies but rather when and how to use them in the pipeline of data science. The student will finish a quarter-long self-defined course project to exercise the data-science tools covered in the lecture. As the outcome of this course, the students should be able to independently work on real-life datasets with large scales and gain insights from them.</p>\r\n<p><strong>COURSE INSTRUCTOR: </strong><a href=\"mailto:huiling.hu@northwestern.edu\">Huiling Hu</a><strong><br/> </strong></p>\r\n<p><strong>COURSE COORDINATOR: <a href=\"mailto:huiling.hu@northwestern.edu\"></a></strong><a href=\"mailto:huiling.hu@northwestern.edu\">Huiling Hu</a><strong><br/></strong></p>\r\n<h3>Related Materials</h3>\r\n<ol>\r\n<li><span>&#8220;Python Data Science Handbook: Essential Tools for Working with Data&#8221; by Jake VanderPlas</span></li>\r\n<li>&#8220;Learning Data Mining with Python&#8221; by Robert Layton</li>\r\n</ol>\r\n<h3>Grading</h3>\r\n<p><span>Grades will be assigned according to the description below. Letter grades will be assigned based on a percentage-to-letter-grade mapping.</span></p>\r\n<ul>\r\n<li><span> </span><span>Homework assignments (35%)<br/></span><span></span><span></span>\r\n<ul>\r\n<li><span> </span><span>5 individual assignments</span></li>\r\n</ul>\r\n</li>\r\n<li><span> </span><span>Midterm exam (25%)</span></li>\r\n<li><span> </span><span>Course Project (40%) Students can define their own topic. The project includes<br/></span>\r\n<ul>\r\n<li><span> </span><span>Proposal</span></li>\r\n<li><span> </span><span>Milestone</span></li>\r\n<li><span>Presentation</span></li>\r\n<li><span> </span><span>Final Report<br/></span><span></span></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<h3>Course Outline<span><br/></span></h3>\r\n<h4>Main Topics Include<br/><span></span></h4>\r\n<ul>\r\n<li><span> </span><span>Course overview and logistics</span></li>\r\n<li><span> </span><span>Obtaining and managing Data</span></li>\r\n<li><span> </span><span>Data cleaning</span></li>\r\n<li><span> </span><span>Exploratory Data Analysis</span></li>\r\n<li><span> </span><span>Statistics</span>\r\n<ul>\r\n<li><span> </span><span>Correlation, Independence and Association</span></li>\r\n<li><span> </span><span>Hypothesis Testing</span></li>\r\n</ul>\r\n</li>\r\n<li><span> </span><span>Basic machine learning</span>\r\n<ul>\r\n<li><span> </span><span>Basic concepts and algorithms</span></li>\r\n<li><span> </span><span>Assessment and Overfitting</span></li>\r\n<li><span> </span><span>Feature selection</span></li>\r\n</ul>\r\n</li>\r\n<li><span> </span><span>Text mining</span></li>\r\n<li><span> </span><span>Data Visualization and Storytelling</span></li>\r\n<li><span>Ethics in Data Science</span><span></span></li>\r\n</ul>\r\n<p>&#160;</p>\r\n<p>&#160;</p>"
        }
    },
    "396-4": {
        "course_name": "Computing, Ethics, and Society",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "11-12:20 TuTh",
        "fall_instructor": "Van Wart",
        "winter_time": "",
        "winter_instructor": "",
        "spring_time": "",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "Instructor permission - To apply, please fill out the Fall 2021 Application: https://forms.gle/NZYYf8fE5u1eRJB28",
            "Description": "<p>Computing technologies shape our personal, social, and political lives in increasingly complex and consequential ways &#8211; providing tremendous benefits (e.g. convenient access to information, connecting to one another across time and space) and harms (e.g. biased decision-making, mass surveillance, disinformation campaigns, and exclusion from critical material opportunities) that are important to examine and understand.&#160;</p>\r\n<p>At the same time, these technologies are born and shaped by the societies in which they are developed. Thus, grappling with the ethics of technologies (i.e considering the harms and benefits, how and why they were created in the first place, and how and to what ends they are used) is important not only for ultimately creating more moral technologies but a more moral society. Thus, our approach to the ethics of computing technologies requires a multifaceted assessment of their harm and benefit to our individual, cultural, and political lives, and simultaneously a critical examination of the values, ideologies, and contexts through which computing technologies emerge.&#160;</p>\r\n<p>To accomplish this, we will engage in critical reading and synthesizing across a range of topics drawn from computer science and HCI, education and learning sciences, as well as ethics and philosophy. We will also engage in hands-on activities to help us consider how technical decisions (e.g. sampling, data collection practices, categorization and classification, prediction, system design, etc.) involve human judgements that can have both intended and unintended consequences. Specifically, students will:</p>\r\n<ul>\r\n<li>Examine the design choices and tradeoffs that various computing infrastructures make (and have made) in relation to important societal values (e.g. individual autonomy, free speech, equity, privacy, justice, security, access to opportunity, etc.).</li>\r\n<li>Consider some of the intended and unintended consequences of computing applications within our communities, institutions, and social systems (e.g. schooling, employment, policing, transportation, business, etc.). This involves paying attention to who wins and who loses, as well as how these technologies might amplify existing marginalities and privileges.</li>\r\n<li>Develop a variety of analytic lenses for examining computing technologies in terms of their social, ethical, and political consequences.</li>\r\n</ul>\r\n<p>The course is open to all students. For CS majors and minors, the course aims to help students to consider and grapple with ethical dimensions of their work, in order to inform a more critical technical practice. For students pursuing non-computing disciplines, the course aims to provide a solid foundation for thinking about the possibilities, risks, and impacts of computer-mediated infrastructures on society.</p>\r\n<p>The <strong>course format</strong> will consist of:</p>\r\n<ol>\r\n<li>Readings and in-class discussions of current and enduring socio-technical dilemmas, and how they relate to applications of AI, Big Data, and the Internet.</li>\r\n<li>Hands-on activities to help students to consider the potential impacts of different kinds of technical decisions (e.g. sampling, data collection practices, categorization and classification strategies, prediction, system design, etc.).</li>\r\n<li>Reflective writing assignments that will ask you to analyze the social and ethical dimensions of contemporary technology debates.</li>\r\n</ol>\r\n<p>To <strong>apply</strong>, please fill out the Fall 2021 Application: <a href=\"https://forms.gle/NZYYf8fE5u1eRJB28\"></a><a href=\"https://forms.gle/NZYYf8fE5u1eRJB28\">https://forms.gle/NZYYf8fE5u1eRJB28</a><a href=\"https://forms.gle/NZYYf8fE5u1eRJB28\"></a></p>\r\n<p>There will be<strong> no pre-registration</strong> for this course, but anyone who fills out this form will be kept up to date, via email, of where they are on the waiting list. For those accepted into the course, you will be given a permission number the week before classes begin.</p>\r\n<p><strong>COURSE COORDINATORS: </strong><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/vanwart-sarah.html\">Prof.&#160;Sarah Van Wart</a><span></span></p>\r\n<p><strong>COURSE INSTRUCTOR : </strong><a href=\"mailto:vanwars@northwestern.edu\">Prof.&#160;Sarah Van Wart</a> <span></span></p>"
        }
    },
    "396-496-10": {
        "course_name": "Programming Languages Seminar ",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "1-1:50 MWF",
        "fall_instructor": "Dimoulas",
        "winter_time": "",
        "winter_instructor": "",
        "spring_time": "",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "Register by consent of instructor only.",
            "Description": "<p>This course is a PL reading seminar aimed at graduate students (or undergraduates who have taken 321 and 322 and want more). The content varies from year to year; contact the instructor for this year's topic.</p>\r\n<p><strong>COURSE INSTRUCTOR:</strong> <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/dimoulas-christos.html\"><strong>Prof. Christos Dimoulas</strong></a></p>\r\n<p><strong>COURSE COORDINATOR:</strong> <strong><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/findler-robert.html\" target=\"_self\">Prof. Robby Findler</a></strong></p>\r\n<p><strong><strong>REQUIRED TEXT: None</strong></strong></p>\r\n<p><strong>COURSE OBJECTIVES</strong>: To learn about programming languages and programming languages research.</p>\r\n<p><strong>DETAILED COURSE TOPICS:</strong> varies from year to year.</p>\r\n<p><strong>GRADES:</strong> based on participation and presentation.</p>\r\n<p><strong>HOMEWORK ASSIGNMENTS:</strong> Typically students are asked to present some research material from PL.</p>"
        }
    },
    "396-496-13": {
        "course_name": "Conversational Interfaces",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "",
        "winter_instructor": "",
        "spring_time": "3:30-4:50 MW",
        "spring_instructor": "Forbus",
        "other": {
            "Prerequisites": "COMP_SCI 371",
            "Description": "<p>Principles and practice of creating AI conversational interface systems.&#160; This includes knowledge-rich natural language understanding, multimodal interaction (speech and sketching), principles of dialogue drawn from cognitive science, question-answering, and architectures for building conversational systems.&#160; Involves substantial programming and project work.</p>\r\n<p><strong>SYLLABUS (subject to change):</strong></p>\r\n<ul>\r\n<li>Introduction: Basics of conversational assistants, survey of historical efforts, introduction to first set of tools</li>\r\n<li>Psychology of dialogue: common ground, Gricean principles</li>\r\n<li>Computational models of dialogue systems: chatbots, collaborative problem solving model, dialogue acts</li>\r\n<li>Architecture for dialogue systems: Pipelines behind common assistant programs, cognitive architectures</li>\r\n<li>Question Answering: Sources of knowledge, IBM&#8217;s Deep Q/A approach</li>\r\n<li>Use cases: Information kiosks (including Mudd Kiosk), social robots, eldercare</li>\r\n</ul>\r\n<p><strong>TEXTBOOK:</strong> None. Papers from the literature and draft materials from textbooks in progress will be provided via Canvas</p>\r\n<p><strong>COURSE INSTRUCTOR: <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/forbus-ken.html\">Prof. Ken Forbus</a></strong></p>"
        }
    },
    "396-496-15": {
        "course_name": "Dynamics of Programming Languages",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "",
        "winter_instructor": "",
        "spring_time": "2-3:20 TuTh",
        "spring_instructor": "Dimoulas",
        "other": {
            "Prerequisites": "",
            "Description": "<p>The focus of the course is the rigorous analysis of programming languages. Where COMP_SCI 321 looks at languages through the lens of interpreter-based implementation, this course strips the languages down to their essential parts and describes them mathematically. This mathematical description of languages allows us to state and prove properties that validate their design.</p>\r\n<p>Through a series of lectures, you will learn:&#160;</p>\r\n<p>(i) how to describe the essence of programming languages in math;&#160;</p>\r\n<p>(ii) how to state and prove their basic properties;&#160;</p>\r\n<p>(iii) how to use PLT Redex, a domain-specific language, to turn the math&#160;into programs that you can test and experiment with.&#160;&#160;</p>\r\n<p>To put these lessons in good use, you will investigate programming language&#160;designs from the research literature, translate them into Redex programs, test&#160;them and present your findings in class.</p>\r\n<p><strong>COURSE INSTRUCTOR:</strong> <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/dimoulas-christos.html\"><strong>Prof. Christos Dimoulas</strong></a></p>\r\n<p><strong>RECOMMENDED TEXT:</strong> Semantics Engineering with PLT Redex</p>\r\n<p><strong>SUGGESTED PREREQUISITE:</strong> COMP_SCI 321 (but not required)</p>"
        }
    },
    "396-496-16": {
        "course_name": "Advanced Topics in Modern Cryptography",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "9:30-10:50 TuTh",
        "winter_instructor": "Wang",
        "spring_time": "",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "CS 396 (Introduction to Cryptography) or Graduate students or instructor permission",
            "Description": "<p>Large-scale computing environments nowadays bring great opportunities in terms of the ubiquity and omnipresence of data, communication, and computation. However, such opportunities often come with concerns on trust and security when exchanging data and computing on joint data. Modern cryptography features precise definitions and rigorous proofs of security for complicated protocols. It is a cornerstone for many large-scale systems used now and crucial for newly emerging systems like e-voting and blockchain.&#160;</p>\r\n<p>This course is a graduate-level introduction to modern cryptography. The course will cover definitions, constructions, and proofs used in modern cryptography. Topics include secure multi-party computation, zero-knowledge proofs, oblivious computation, fully homomorphic encryption, decentralized cryptocurrencies, and blockchain applications. Various techniques and assumptions will be introduced in the course, including simulation-based security, Diffie Hellman (DH) assumption, Learning With Error (LWE) assumption, etc.</p>\r\n<strong><strong>INSTRUCTOR:</strong></strong> <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/wang-xiao.html\">Prof. Xiao Wang</a><strong><br/> </strong>"
        }
    },
    "396-496-17": {
        "course_name": "Statistical Machine Learning",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "",
        "winter_instructor": "",
        "spring_time": "9:30-10:50 TuTh",
        "spring_instructor": "Demeter",
        "other": {
            "Prerequisites": "COMP_SCI 214",
            "Description": "<p>This course introduces statical machine learning methods from a theoretical perspective. Topics include the maximum likelihood inference, regularization principle, risk minimization framework, cross-validation, high dimensional inference and nonparametric methods.&#160;</p>\r\n<p><strong>COURSE INSTRUCTOR: </strong><a href=\"mailto:david.jr1@northwestern.edu\">Prof. David Demeter</a></p>\r\n<p><strong>REQUIRED TEXTS:</strong> None;</p>\r\n<p><strong>COMPUTER USAGE:</strong> The python and R programming language</p>\r\n<p><strong>GRADING:</strong> TBD</p>\r\n<p><strong>COURSE OUTCOMES:</strong> When a student completes this course, s/he should be able to:</p>\r\n<ul>\r\n<li>Understand the state-of-the-art of statistical machine learning Become familiar with some fundamental principles of machine learning methods</li>\r\n</ul>"
        }
    },
    "396-496-18": {
        "course_name": "Topics in Software Engineering",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "2-3:20 TuTh",
        "winter_instructor": "St-Amour",
        "spring_time": "",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "",
            "Description": "<p>Many important issues and tradeoffs in software engineering appear only once projects reach a certain scale: large codebases, large teams, long periods of time. In this class, we will study a number of such issues, as well as practices and processes to help manage them.</p>\r\n<p>The target audience for this class is undergraduate students (or exceptional graduate students) with extensive software development experience, ideally outside the classroom, and ideally on large, long-term projects.</p>\r\n<p>The class will be structured around readings (from the research literature and elsewhere) and discussions around these readings. All students will be expected to contribute meaningfully to these discussions, drawing on their own development experience.</p>\r\n<p><strong>COURSE INSTRUCTOR:</strong> <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/st-amour-vincent.html\">Prof. Vincent St-Amour</a></p>"
        }
    },
    "396-496-19": {
        "course_name": "Introduction to Kolmogorov Complexity",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "12:30-1:50 TuTh",
        "winter_instructor": "Stull",
        "spring_time": "",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "COMP_SCI 335 or 336",
            "Description": "<p>Kolmogorov complexity uses computer science to measure the amount of information (or randomness) contained in finite objects. In addition to being interesting philosophically, Kolmogorov complexity can be fruitfully applied to a variety of topics. This course provides an introduction to this theory, with a minimum of prerequisites. This course will also cover applications of Kolmogorov complexity to various fields, including computational complexity theory, algorithms and combinatorics.&#160;</p>\r\n<p><strong>REFERENCE TEXTBOOKS: N/A</strong><br/><strong>REQUIRED TEXTBOOK: N/A<br/></strong></p>\r\n<p><strong>COURSE COORDINATORS: </strong><a href=\"mailto:donald.stull@northwestern.edu\">Donald Stull</a><span></span></p>\r\n<p><strong>COURSE INSTRUCTOR : </strong><a href=\"mailto:donald.stull@northwestern.edu\">Prof. Donald Stull</a><span></span></p>\r\n<p><strong>COURSE GOALS:<br/></strong><strong><br/></strong></p>"
        }
    },
    "396-496-2": {
        "course_name": "Advanced Algorithm Design through the Lens of Competitive Programming",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "2-4:50 F",
        "winter_instructor": "Makarychev",
        "spring_time": "",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "CS 336 or Permission of Instructor",
            "Description": "<p>This is an advanced undergraduate course on algorithms. This course examines such topics as greedy algorithms, dynamic programming, graph algorithms, string processing, and algorithms for computational geometry. We will discuss how to use these techniques for solving real-world problems in C++. Most assignments and examples will be based on competitive programming problems.</p>\r\n<p>The course assumes background in algorithms (CS 336) and some experience with C++.</p>\r\n<ul>\r\n<li><strong><em>This course fulfills the Technical Elective.</em></strong></li>\r\n</ul>\r\n<p><strong>REFERENCE TEXTBOOKS: N/A</strong><br/><strong>REQUIRED TEXTBOOK: N/A<br/></strong></p>\r\n<p><strong>COURSE COORDINATORS: <a href=\"mailto:katherine.compton@northwestern.edu\"></a><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/makarychev-konstantin.html\"></a></strong><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/makarychev-konstantin.html\">Prof. Konstantin Makarychev</a><span></span></p>\r\n<p><strong>COURSE INSTRUCTOR : </strong><a href=\"mailto:konstantin@northwestern.edu\">Prof. Konstantin Makarychev</a><span></span><strong><br/></strong></p>"
        }
    },
    "396-496-4": {
        "course_name": "Deep Learning",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "",
        "winter_instructor": "",
        "spring_time": "10-10:50 MWF",
        "spring_instructor": "Pardo",
        "other": {
            "Prerequisites": "Doctoral Student Standing or completion of CS 349 ",
            "Description": "<p>Deep learning is a branch of machine learning based on algorithms that try to model high-level abstract representations of data by using multiple processing layers with complex structures. Some representations make it easier to learn tasks (e.g., face recognition or spoken word recognition) from examples. One of the promises of deep learning is replacing handcrafted features with efficient algorithms for unsupervised or semi-supervised feature learning and hierarchical feature extraction.</p>\r\n<p>In this course students will study deep learning architectures such as autoencoders, , convolutional deep neural networks, and recurrent neural networks. They will read original research papers that describe the algorithms and how they have been applied to fields like computer vision, automatic speech recognition, and audio event recognition.</p>\r\n<p>For projects, students can work on their own or in groups (recommended) to write a codebase that reproduces a landmark research paper. This course is aimed at advanced undergraduates, masters, and PhD students.</p>\r\n<p>&#160;<strong>REQUIRED TEXTBOOK:</strong>&#160; None.</p>\r\n<p><strong>REFERENCE TEXTBOOKS:</strong>&#160;The Deep Learning Book (<a href=\"https://www.deeplearningbook.org\">https://www.deeplearningbook.org</a>) , Excerpts from Tom Mitchell&#8217;s Machine Learning, academic papers published in the field.</p>\r\n<p><strong>COURSE COORDINATOR:</strong>&#160;<a href=\"http://eecs.northwestern.edu/people/userprofile/pardo\"><strong>Prof. Bryan Pardo</strong></a></p>\r\n<p><strong>COURSE INSTRUCTOR:</strong> <a href=\"mailto:pardo@northwestern.edu\">Prof. Pardo</a></p>\r\n<p><strong>COURSE GOALS:</strong>&#160;The goal of this course is to familiarize graduate students (and advanced undergraduates) with the current state-of-the-art in machine perception of images and sound using Deep Learning architectures.</p>\r\n<p><strong>DETAILED COURSE TOPICS:</strong></p>\r\n<p>What follows is an example syllabus. As topics of current interest in the field shift, course content will vary to reflect research trends.</p>\r\n<p>Week 1: Perceptrons &amp; gradient descent<br/>Week 2: Multilayer Perceptrons &amp; nonlinear activation functions<br/>Week 3: Convolutional networks + residual networks<br/>Week 4: Embeddings, latent spaces &amp; control<br/>Week 5: Recurrent networks<br/>Week 6: LSTMs and GRUs<br/>Week 7: Attention Networks<br/>Week 8: Auto Encoders<br/>Week 9: Variational Auto Encoders (VAEs)<br/>Week 10: Generative Adversarial Networks</p>\r\n<p><strong>ASSIGNMENTS:</strong></p>\r\n<p>Homework assignments (30%)<br/>Readings (30%)<br/>Final projects (30%)<br/>Class participation (10%)</p>\r\n<p><strong>COURSE OBJECTIVES:</strong>&#160;When a student completes this course, the student should:</p>\r\n<ul>\r\n<li>Have an understanding of the current state-of-the art in Deep Learning.</li>\r\n<li>Be able to distill large amounts of research into coherent summaries.</li>\r\n<li>Be able to think critically about work in the field.</li>\r\n<li>Be able to duplicate an existing project.</li>\r\n</ul>"
        }
    },
    "396-496-6": {
        "course_name": "Data Science Seminar",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "11-12:20 TuTh",
        "fall_instructor": "Rogers",
        "winter_time": "",
        "winter_instructor": "",
        "spring_time": "",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "213-level knowledge needed, will benefit from 339 (DB) and/or 343 (OS) background.",
            "Description": "<p>In this seminar, we will survey the fundamentals of data science by reading state of the art research papers in this area. This class will cover the basics of how to manipulate, integrate, and analyze data at scale. To receive credit, students must give in-class presentations and complete a final project.</p>\r\n<ul>\r\n<li><em>This course fulfills the CS Technical Elective requirement.</em></li>\r\n</ul>\r\n<p><strong>COURSE INSTRUCTOR: <span class=\"cbListFieldCont cbUserListFC_name\"><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/rogers-jennie.html\">Prof. Jennie Rogers</a></span></strong></p>\r\n<p><strong>Grading:</strong></p>\r\n<ul>\r\n<li>40% - final project</li>\r\n<li>20% - class participation</li>\r\n<li>30% - in-class presentation</li>\r\n<li>10% - weekly write ups</li>\r\n</ul>"
        }
    },
    "396-496-7": {
        "course_name": "Foundations of Quantum Computing and Quantum Information",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "3:30-4:50 MW",
        "winter_instructor": "Rao & Vijayaraghavan",
        "spring_time": "",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "Pre-requisites: CS 336 or CS 335 or equivalent. Instructor permission required otherwise. A strong undergraduate background in linear algebra, and some familiarity with discrete probability is encouraged.",
            "Description": "<p>This course will be an introduction to the theory of quantum computation from a computer science perspective. Quantum computing holds great promise for obtaining substantial computational improvements over classical computing for many problems.&#160; In this course, we will cover the basics of quantum computation, and different topics that explore both the capabilities and limitations of quantum computers.&#160; Topics will include (subject to change) the basics of quantum information, quantum circuits, quantum algorithms, quantum complexity theory, quantum query complexity, and quantum communication complexity.&#160;</p>\r\nNo knowledge of quantum mechanics is required. We will cover the necessary physics concepts that are needed for this course.<br/>\r\n<p><strong>REQUIRED TEXTBOOK: N/A<br/></strong></p>\r\n<p><strong>COURSE COORDINATORS:&#160;</strong><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/vijayaraghavan-aravindan.html\">Prof. <span class=\"mail_link\">Aravindan&#160;Vijayaraghavan</span></a> &amp; <a href=\"mailto:shravas@northwestern.edu\" title=\"Prof. Rao\">Prof. Shravas Rao</a><span></span></p>\r\n<p><strong>COURSE INSTRUCTOR : </strong><a href=\"mailto:shravas@northwestern.edu\" title=\"Prof. Rao\">Prof. Shravas Rao</a> &amp; <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/vijayaraghavan-aravindan.html\">Prof. <span class=\"mail_link\">Aravindan&#160;Vijayaraghavan</span></a></p>"
        }
    },
    "396-5": {
        "course_name": "Generative Methods",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "8-9:20 MW",
        "winter_instructor": "Compton",
        "spring_time": "",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "Instructor permission - To apply, please fill out the Winter 2022 Application https://forms.gle/AJgdzsav2ZUxH84g6",
            "Description": "<p>Generative Methods are algorithms which can be used to create. Programmers use grammars to make humorously chatty Twitterbots, Voronoi diagrams to create virtual cities and landscapes, and machine-learned models to generate realistic oil portraits from selfies. This class will explore a range of different methods and tools, exposing you to the modern cutting-edge of creative coding as you develop your own portfolio of JS/HTML apps.</p>\r\n<p>Topics may include particle systems, casual creators, grammars, L-systems, genetic algorithms, machine-learned models, and other emerging areas of interest to the class.&#160;</p>\r\n<p>No prior knowledge of JavaScript is required for the course, but students should be comfortable programming in general, especially helpful if you are familiar&#160;with functional languages.</p>\r\n<p>No graded requirements will happen during the scheduled class time. &#160;Instead, the scheduled time will be used for office hours and Q&amp;A with guest speakers.</p>\r\n<p><strong>REFERENCE TEXTBOOKS: N/A</strong><br/><strong>REQUIRED TEXTBOOK: N/A<br/></strong></p>\r\n<p><strong>COURSE COORDINATORS: <a href=\"mailto:katherine.compton@northwestern.edu\">Prof. Katherine E Compton</a></strong><span></span></p>\r\n<p><strong>COURSE INSTRUCTOR : </strong><a href=\"mailto:katherine.compton@northwestern.edu\">Prof. Katherine E Compton</a> (Winter &amp; Spring)<span></span></p>\r\n<p><strong>COURSE GOALS:<br/>PREREQUISITES: </strong>Instructor permission<strong> - To apply, please fill out the Winter 2022 Application <a href=\"https://forms.gle/AJgdzsav2ZUxH84g6\">https://forms.gle/AJgdzsav2ZUxH84g6</a><br/></strong></p>"
        }
    },
    "396-6": {
        "course_name": "Intro to Web Development",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "12:30-1:50 MW",
        "winter_instructor": "Van Wart",
        "spring_time": "1-1:50 MWF",
        "spring_instructor": "Van Wart",
        "other": {
            "Prerequisites": "COMP_SCI 150 or COMP_SCI 211",
            "Description": "<p>What does it take to build a website from scratch? How do designers create beautiful and functional interfaces? How do websites send, store, and use data? This course aims to answer these questions by giving students exposure to some of the technologies and techniques of web development &#8211; with particular focus on front-end web interfaces.&#160;</p>\r\n<h3>Course Format</h3>\r\n<p>The course format is synchronous: class time will be used to discuss concepts and techniques and work on short coding and design activities. There will also be weekly discussion sections, where you will work with a member of the teaching staff to complete short assignments. You will be assessed based on (a) weekly homework assignments, and (b) a final project (which can be completed individually or in a group) &#8211; where you will create a website of your choosing.</p>\r\n<h3>Learning Goals</h3>\r\n<p>The learning goals for the course include:</p>\r\n<ol>\r\n<li aria-level=\"1\">Gaining exposure to the various components of a &#8216;full-stack&#8217; web application and how the pieces fit together (e.g. database, web server, user authentication, and front-end client).</li>\r\n<li aria-level=\"1\">Building proficiency with commonly-used tools and technologies related to web development (e.g. HTML, CSS, JavaScript, GitHub, Node.js, Heroku, and React).</li>\r\n<li aria-level=\"1\">Gaining familiarity with different types of design architectures across the web stack (REST, MVC, etc.)</li>\r\n<li aria-level=\"1\">Learning some fundamental UX/UI design principles (usability, accessibility, visual design, prototyping) in the context of web development</li>\r\n</ol>\r\n<p><strong>REFERENCE TEXTBOOKS: </strong>N/A<br/><strong>REQUIRED TEXTBOOK: </strong>N/A<strong><br/></strong></p>\r\n<p><strong>COURSE INSTRUCTOR :&#160;</strong><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/vanwart-sarah.html\">Prof.&#160;Sarah Van Wart</a> (Winter &amp; Spring)<span></span></p>"
        }
    },
    "396-8": {
        "course_name": "Creative Applications with Machine Learning",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "8-8:50 MWF",
        "fall_instructor": "Compton",
        "winter_time": "",
        "winter_instructor": "",
        "spring_time": "",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "CS 211 or 214",
            "Description": "<p>Computers have been generating images, music, stories, and poetry since the 1950s. With machine learning, computers are even more powerful creative tools. But how do we move beyond push-button-get-art to involve ML systems in our creative practices?&#160; In this class you will use a range of modern ML systems to create new art, learn how to understand and diagram an ML architecture you read about online, and create a few small ML projects of your own.&#160; No previous ML experience, Python or Javascript needed: we will use many tools that you have never seen&#160;before and will learn as we go.</p>\r\n<p><strong>REFERENCE TEXTBOOKS: N/A</strong><br/><strong>REQUIRED TEXTBOOK: N/A<br/></strong></p>\r\n<p><strong>COURSE COORDINATORS: <a href=\"mailto:katherine.compton@northwestern.edu\"></a></strong><a href=\"mailto:katherine.compton@northwestern.edu\">Prof. Katherine E Compton</a><span></span></p>\r\n<p><strong>COURSE INSTRUCTOR : </strong><a href=\"mailto:katherine.compton@northwestern.edu\">Prof. Katherine E Compton</a><span></span></p>\r\n<p><strong>COURSE GOALS: N/A<br/></strong><strong><br/></strong></p>"
        }
    },
    "397-3": {
        "course_name": "HCI Studio",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "",
        "winter_instructor": "",
        "spring_time": "11-12:20 MW",
        "spring_instructor": "Jacobs",
        "other": {
            "Prerequisites": "CS 214",
            "Description": "<p>Human-Computer Interaction (HCI) serves as the bridge between computing and humanity. The effective design of HCI systems requires a keen understanding of how interfaces and computer systems usefully support human endeavors (or not). Why would a particular set of characteristics of a system lead to reaching a desired outcome, while others encounter an obstacle? How might a good argument for a design be instantiated with effective interface and system models? Taking a step back, are our solutions actually addressing the underlying problem that humans face? What is actually the problem?<br/> <br/> Through the studio method, we will, as a learning community, learn to ask and answer these questions for ourselves. One focus will be on developing our critical thinking and problem solving skills through team projects and studio critique, with special emphasis on learning more effective structures and representations for thinking about the design of HCI systems. Another focus will be on learning to soften into a deeper understanding of problems that people encounter than we might at first assume - that is, developing our capacities for humility, empathy, and curiosity. Last but not least, we focus on *doing* &#8212; agile sprints, rapid prototyping and testing, iterating &#8212; learning to face and embrace fears, imperfections, failures that may otherwise hold us back from moving forward. Through this we will learn to become more skillful in how we work on difficult problems.<br/> <br/> REQUIREMENTS FOR ENROLLING, PLEASE READ CAREFULLY:<br/> While the course has no formal pre-requisites, learning via a studio method demands that students are open to constructive feedback and critique from the instructor, TAs, and/or peers. It also demands a willingness to learn together, as a community.<br/> <br/> Given the course&#8217;s ambitious learning objectives&#8212;both in the subject area and more generally in how we approach difficult problems&#8212;students taking the course should have a strong willingness in learning and growing personally. The course will demand a significant amount of self-direction: students need to be able and willing to learn on their own and in groups through their own volition, and in doing so, still thoughtfully approach challenges new, unfamiliar, and (potentially) uncomfortable ways. In other words, the course is meant for students who are serious about learning how to design computing systems for human use, *and* of ways to work with themselves and teammates through challenges.</p>\r\n<ul>\r\n<li><em>This course satisfies the project requirement or Technical Elective.</em></li>\r\n</ul>\r\n<p><strong>COURSE COORDINATORS: </strong><span class=\"mail_link\"><a href=\"mailto:maia.jacobs@northwestern.edu\">Prof. Maia Jacobs</a></span><strong><br/></strong></p>\r\n<p><strong>COURSE INSTRUCTOR: </strong><span class=\"mail_link\"><a href=\"mailto:maia.jacobs@northwestern.edu\">Prof. Maia Jacobs</a></span></p>"
        }
    },
    "397-497-11": {
        "course_name": "Internet-scale Experimentation",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "",
        "winter_instructor": "",
        "spring_time": "",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "COMP_SCI 340 or COMP_SCI 345",
            "Description": "<p>Internet-scale Experimentation is a graduate-level seminar exploring the challenges of large-scale networked system experimentation and measurements.</p>\r\n<ul>\r\n<li><em>This course satisfies the Systems requirement &amp; the project requirement.</em></li>\r\n</ul>\r\n<p><strong>COURSE INSTRUCTOR: <span class=\"cbListFieldCont cbUserListFC_name\"><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/bustamante-fabian.html\">Prof. Fabi&#225;n Bustamante</a></span></strong></p>\r\n<p><strong>DESCRIPTION:</strong></p>\r\n<p><em>How would you &#8230;</em></p>\r\n<p><em>- Evaluate the effectiveness of a feature you added to your startup&#8217; new app?</em></p>\r\n<p><em>- Understand the tense relationship between Netflix and ISP?</em></p>\r\n<p><em>- Characterize the impact of population growth on urban spaces?</em></p>\r\n<p><em>- Understand what determines the quality of experience of Internet users?</em></p>\r\n<p><em>- Measure the consequences of network censorship on user experience?</em></p>\r\n<p>The answers to this seemingly disparate set of questions share a common requirement &#8211; carrying experimentation at Internet-scale.</p>\r\n<p>Internet-scale Experimentation is a graduate-level seminar exploring the challenges of large-scale networked system experimentation and measurements. Over the last few decades, networked systems have become an integrated part of everyday life and a critical piece of our economic, educational, health and defense systems. This fact is normally brought up as evidence of the success and broader impact of our field of work.</p>\r\n<p>The other, typically avoided, side of the story is the complications that this translates into for experimentalists. Today it is virtually impossible to run a randomized controlled experiment at even fractions of the scale of many of our systems. Despite this, as we explore new ideas in these uncharted territories we are reasonably asked to provide better evidence of the effects of interventions. In this seminar we will discuss ongoing projects on networked systems experimentation and their applications, in wired and wireless settings, that address some of these challenges.</p>\r\n<p>The class consists of two major components: reading and reviewing papers and doing a research project on your own. For the research part of the course, you will have the chance to work (and expand) some existing platforms and datasets as you formulate and try to answer these and other interesting questions of Internet scale.</p>\r\n<p><strong><a href=\"http://oldaqualab.cs.northwestern.edu/classes/eecs-395-ISE\">http://oldaqualab.cs.northwestern.edu/classes/eecs-395-ISE</a><a href=\"http://www.aqualab.cs.northwestern.edu/classes/eecs-395-ISE\"></a></strong></p>\r\n<p><strong>COURSE TOPICS:</strong></p>\r\n<ul type=\"disc\">\r\n<li>Introductory notes: Internet architecture, practical issues and good practices for Internet-scale experimentation</li>\r\n<li>Experimental platforms: Experimental design, context of experiments</li>\r\n<li>Experimental design</li>\r\n<li>End-to-end and up-the-stack</li>\r\n<li>Network infrastructure</li>\r\n<li>Traffic</li>\r\n<li>Applications and distributed services: DNS, Web, P2P, VoD, OSN, ..</li>\r\n<li>Botnets and other maladies</li>\r\n<li>Security and ethical issues</li>\r\n</ul>\r\n<p><strong>PREREQUISITES:</strong></p>\r\n<p><a href=\"340.html\">COMP_SCI 340 \"Intro to Computer Networking\"</a> or <a href=\"345.html\">COMP_SCI 345 \"Distributed Systems\"</a>.</p>\r\n<p>If you have taken similar courses somewhere else or have not taken any of these courses, but would like to register for this seminar, please contact <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/bustamante-fabian.html\"><strong>Prof. Fabi&#225;n E Bustamante</strong></a>.</p>\r\n<p><strong>COURSE ORGANIZATION:</strong></p>\r\n<p>The course is organized as a series of paper discussions and a single term-long project.</p>\r\n<p>Most class meetings will be centered around one or two paper presentations and discussion. You should read each paper <em>before</em> coming to class and be prepared to discuss it.</p>\r\n<p>The class will run as mini-conference with <strong>you</strong> as the Program Committee member. We will use the papers included in the schedule as our set of submissions. Each of you will write reviews for 3-4 of them. We will discuss the papers in a two-part PC meeting (around midterm and the end of the quarter) to decide what paper \"should be accepted\" for publication.</p>\r\n<p><strong>READING PAPERS AND ANSWERING QUESTIONS:</strong></p>\r\n<p>We will read between 2-4 papers per week. The papers will be first presented to the group by one or more students and then discussed in a round-table manner.</p>\r\n<p>To ensure lively discussions, you will be responsible for reading the assigned papers before each class. <strong>I will post a question about each paper 24hr before class.</strong> Your answer need only be long enough to demonstrate that you understand the paper; a paragraph or two should be enough. I will check your answers to make sure they make sense and they will count for part of the paper discussion grade.</p>\r\n<p>You may find the following documents useful:</p>\r\n<ul type=\"disc\">\r\n<li><a href=\"http://ccr.sigcomm.org/online/files/p83-keshavA.pdf\"><strong>How to Read a Paper</strong></a> by S. Keshav, ACM SIGCOMM CCR, 37(3), 2007.</li>\r\n<li><a href=\"http://aqualab.cs.northwestern.edu/docs/efficientReading.html\"><strong>Efficient reading of papers in Science and Technology</strong></a> by Michael J. Hanson, 1990, revised 2000 Dylan McNamee.</li>\r\n</ul>\r\n<p><strong>WRITING REVIEWS:</strong></p>\r\n<p>At one time or another, every researcher is asked to review papers submitted for publication at a conference or journal; a process known as peer review. We will work on this skill by running a mini-conference - <strong><span>WINE (We do INternet Experimentation)</span></strong></p>\r\n<p>All class members will be part of the \"Program Committee\" for our mini-conference and we will consider all papers listed in our schedule as our submissions.</p>\r\n<p>Each paper will receive three reviews and each PC member will be responsible for writing 3-4 reviews (you are welcome to write additional reviews). We will discuss all papers in a two-part PC meeting (around midterm and during final weeks) to decide what paper \"should be accepted\" for publication. Each paper discussion will be led by one of the reviewers (assigned by the PC chair).</p>\r\n<p>Some useful readings on reviewing:</p>\r\n<ul type=\"disc\">\r\n<li>Mark Allman, <a href=\"http://icir.net/mallman/papers/reviewing-ccr-apr08.pdf\"><strong>Thoughts on Reviewing,</strong></a> ACM SIGCOMM CCR, 38(2), 2008.</li>\r\n<li>T. Roscoe, <a href=\"http://people.inf.ethz.ch/troscoe/pubs/review-writing.pdf\"><strong>Writing reviews for systems conferences,</strong></a> Written for the SOSP 2007 Shadow PC.</li>\r\n</ul>\r\n<p><strong>PRESENTING PAPERS:</strong></p>\r\n<p>Class meetings will be centered around a paper presentation and discussion. Each student will be responsible for presenting one of the papers in the schedule. Giving a good presentation is hard work. Please make sure to allocate enough time to prepare for yours. There are some good <a href=\"http://research.microsoft.com/en-us/um/people/simonpj/papers/giving-a-talk/giving-a-talk.htm\"><strong>pointers</strong></a> around that you may want to look at.</p>\r\n<p>Here is an incomplete list of dos and don'ts:</p>\r\n<ul type=\"disc\">\r\n<li>Don't try to present the whole work; remember the talk is just a taster.</li>\r\n<li>Think of your primary audience to decide what/what not to expand on.</li>\r\n<li>Use examples to motivate the work and approach, and illustrate the key points.</li>\r\n<li>Don't put too much on a slide - prune and then prune again.</li>\r\n<li>Don't put too much on a slide - just one figure/graph per slide!</li>\r\n<li>Don't put too much on a slide - don't waste the header/slide title!</li>\r\n<li>Careful with use of animation - not for show, just for clarity</li>\r\n<li>Please put numbers in your slides</li>\r\n<li>Seriously consider dropping the typical \"overview/roadmap\" slide</li>\r\n<li>Saying enough without saying too much - enough depth to convey your ideas, not so much as to overwhelm your audience</li>\r\n</ul>\r\n<p><strong>PROJECTS:</strong></p>\r\n<p>There will be one single project on which you will work throughout the quarter - this is a critical component of the course. Your goal is to propose and tackle a research problem that requires the use of (or explores challenges with) Internet-scale experimentation.</p>\r\n<p>Project reports must be written up in a term paper (due during finals week) and teams will present a summary of their findings at the end of the course as part of a systems class mini-conference. Projects ideas will be suggested by the instructor, but you are strongly encouraged to come up with your own ideas. Based on the topic of your project, you will be assigned a project leader to help you through the quarter.</p>\r\n<p>This is the schedule of meetings and deliverables (mainly to ensure steady progress):</p>\r\n<ul type=\"disc\">\r\n<li>Form a group: <em>First week of classes.</em></li>\r\n<li>Project meeting with instructor: <em>Second week of classes.</em></li>\r\n<li>Project initial presentation (you should read the <a href=\"http://www.hpl.hp.com/research/ssp/papers/HPL-CSP-90-42.pdf\"><strong>CSP project startup</strong></a> or look at the <a href=\"http://en.wikipedia.org/wiki/George_H._Heilmeier#Heilmeier.27s_Catechism\"><strong>Questions that any project proposal should answer -- the Heilmeier \"Catechism\"</strong></a>). The presentation should be 4 slides long, including (1) Project name and team members, (2) What are the research contributions of the project? List of new/interesting concepts to be investigated, (3) Why do we care if you are successful?, and (4) Project milestones and schedule for the rest of the quarter: <em>&#160;Third week of classes.</em></li>\r\n<li>Midterm presentation and report. The presentation should be 4 slides long, including (1) Project name and team members, (2) Revised statement of project goals and list of new/interesting concepts to be investigated, (3) List of issues addressed and pending, and (4) Updated project milestones, highlighting accomplishments to date, and schedule for the rest of the quarter: <em>Fourth/Fifth week of classes.</em></li>\r\n<li>Project meeting with instructor: <em>Ninth week of classes.</em></li>\r\n<li>Final presentation: <em>Finals week</em>.</li>\r\n<li>Final report due: <em>During finals week.</em></li>\r\n</ul>\r\n<p>The final report has to conform to the format used by the <a href=\"http://www.sigcomm.org/events/hotnets-workshop\"><strong>Workshop on Hot Topics in Networks</strong></a>. Reports should be no longer than 6 pages (you can use appendices or a webpage to document details). The following structure is suggested:</p>\r\n<ul type=\"disc\">\r\n<li>Abstract: <em>What did you do, why is important and what are your high-level results?</em></li>\r\n<li>Problem statement: <em>What is the problem you tried to solve?</em></li>\r\n<li>Prior work: <em>How others have addressed the problem before and why that was not enough?</em></li>\r\n<li>Research approach: <em>What was your approach to solving the problem? What did you design, build? What was your experimental methodology?</em></li>\r\n<li>Results: <em>What were your results? How did you evaluate your work? What were your figures of merit?</em></li>\r\n<li>Lessons learned and future work: <em>If you knew what you know now, what would you do differently? What questions are left for future work?</em></li>\r\n<li>Summary and conclusions.</li>\r\n</ul>\r\n<p><strong>GRADES:</strong></p>\r\n<p>In use, will be a criterion-referenced method to assign your grade; in other words, your grade will be based on how well you do relative to predetermined performance levels, instead of in comparison with the rest of the class. Thus, if a test has 100 possible points, anyone with a score of 90 or greater will get an A, those with scores of 80 or greater will get a B, those with scores of 70 or greater will get a C, and so on. Total scores (between 0 and 100) will be determined, roughly, as follows:</p>\r\n<ul type=\"disc\">\r\n<li>Paper discussion participation (and questions) 10%</li>\r\n<li>Paper review and PC meeting participation 20%</li>\r\n<li>Paper presentation 20%</li>\r\n<li>Project 50%</li>\r\n</ul>"
        }
    },
    "397-497-12": {
        "course_name": "Selected Topics in Computer Networks",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "",
        "winter_instructor": "",
        "spring_time": "12:30-1:50 TuTh",
        "spring_instructor": "Kuzmanovic",
        "other": {
            "Prerequisites": "Recommended: CS 340 or equivalent networking course",
            "Description": "<p>The course will cover a broad range of topics including congestion control, routing, analysis and design of network protocols (both wired and wireless), data centers, analysis and performance of content distribution networks, network security, vulnerability, and defenses, net neutrality, and online social networks.</p>\r\n<h3>Projects</h3>\r\n<p>Students will form teams of two or three; each team will tackle a well-defined research project during the quarter. A list of suggested project topics will be provided. All projects are subjected to approval by the instructor. The project component will include a short written project proposal, a short mid-term project report, a final project presentation, and a final project report. Each component adds some significant element to the paper, and the overall project grade will be based on the quality of each component of your work.</p>\r\n<p>The above project components are due by email to the instructor by the end of the given day of the respective week.&#160;</p>\r\n<ol>\r\n<li>Week 1: Project presentations by group leaders</li>\r\n</ol>\r\n<ol start=\"2\">\r\n<li>Week 2: Form groups of 2 or 3, choose a topic for your project, and meet with the project leader.</li>\r\n</ol>\r\n<ol start=\"3\">\r\n<li>Week 3: Write an introduction describing the problem and how you plan to approach it (what will you actually do?). Include motivation (why does the problem matter?) and related work (what have others already done about it?). 2 pages total.</li>\r\n</ol>\r\n<ol start=\"4\">\r\n<li>Week 6: Midterm presentation. Update your paper to include your preliminary results. 5 pages total.</li>\r\n</ol>\r\n<ol start=\"5\">\r\n<li>Week 11: Presentations by all groups.</li>\r\n</ol>\r\n<ol start=\"6\">\r\n<li>Week 12: Turn in your completed paper. 10 pages total. You should incorporate the comments received during the presentation.</li>\r\n</ol>\r\n<h3>Each team will have a weekly meeting with project leaders. Grading</h3>\r\n<ol>\r\n<li>Paper reviews (15%), presentations (20%) and debating in the class (15%): 50%</li>\r\n</ol>\r\n<ol start=\"2\">\r\n<li>Projects 50% (Project proposal: 5%; Midterm report: 5%; weekly report and meeting: 10%; project presentation: 10%; final project report: 20%)</li>\r\n</ol>\r\n<ol start=\"3\">\r\n<li>Research idea report (optional, 3 pages): 10%</li>\r\n</ol>\r\n<p><strong>PREREQUISITES: </strong>Recommended: CS 340 or equivalent networking course&#160;</p>\r\n<h3>Classes, Textbook, and other readings&#160;</h3>\r\n<p>There will be no textbook for this class. A key part of the class will be to review and discuss networking research papers. Students must read the assigned papers and submit paper reviews before each lecture. Two teams of students will be chosen to debate and lead the discussion. One team will be designated the offense and the other the defense. In class, the defense team will present first. For 30 minutes the team will discuss the work as if it were their own.&#160;</p>\r\n<ol>\r\n<li>The team should present the work and make a compelling case why the contribution is significant. This will include the context of the contribution, prior work, and in cases where papers are previously published, how the work has influenced the research community or industry's directions (impact). If the paper is very recent, the defense should present arguments for the potential impact. Coming up with potential future work can show how the paper opens doors to new</li>\r\n</ol>\r\n<ol start=\"2\">\r\n<li>The presentation should go well beyond a paper \"summary\". The defense should not critique the work other than to try to pre-empt attacks from the offense (e.g., by explicitly limiting the scope of the contribution).</li>\r\n</ol>\r\n<ol start=\"3\">\r\n<li>The defense should also try to look up related work to support their case (CiteSeer is a good place to start looking.)</li>\r\n</ol>\r\n<p>After the defense presentation, the offense team will state their case for 20 minutes.&#160;</p>\r\n<ol>\r\n<li>This team should critique the work, and make a case for missing links, unaddressed issues, lack of impact, inappropriateness of the problem formulation,</li>\r\n</ol>\r\n<ol start=\"2\">\r\n<li>The more insightful and less obvious the criticisms the better.</li>\r\n</ol>\r\n<ol start=\"3\">\r\n<li>While the offense should prepare remarks in advance, they should also react to the points made by the defense.</li>\r\n</ol>\r\n<ol start=\"4\">\r\n<li>The offense should also try to look up related work to support their case.</li>\r\n</ol>\r\n<p>Next, the defense and offense will be allowed follow up arguments, and finally, the class will question either side either for clarifications or to add to the discussions and controversy and make their own points on either side. The presentations should be written in Powerpoint format and will be posted on the course web page after each class.&#160;</p>\r\n<h3>Writing and Submitting Reviews&#160;</h3>\r\n<p>All students must read the assigned papers and write reviews for the papers before each lecture. Email the reviews to the instructor (akuzma@cs.northwestern.edu) prior to each lecture and the reviews will be posted on the course web page. Periodically, the instructor will evaluate a random subset of the reviews and provide feedback and grades to students.&#160;</p>\r\n<p>Please send one review in plain text per email in the body of the email message.&#160;</p>\r\n<p>A review should summarize the paper sufficiently to demonstrate your understanding, should point out the paper's contributions, strengths as well as weaknesses. Think in terms of what makes good research? What qualities make a good paper? What are the potential future impacts of the work? Note that there is no right or wrong answer to these questions. A review's quality will mainly depend on its thoughtfulness. Restating the abstract/conclusion of the paper will not earn a top grade. Reviews are roughly half-page and should cover all of the following aspects:&#160;</p>\r\n<ol>\r\n<li>What is the main result of the paper? (One or two sentence summary)</li>\r\n</ol>\r\n<ol start=\"2\">\r\n<li>What strengths do you see in this paper? (Your review needs have at least one or two positive things to say)</li>\r\n</ol>\r\n<ol start=\"3\">\r\n<li>What are some key limitations, unproven assumptions, or methodological problems with the work?</li>\r\n</ol>\r\n<ol start=\"4\">\r\n<li>How could the work be improved?</li>\r\n</ol>\r\n<ol start=\"5\">\r\n<li>What is its relevance today, or what future work does it suggest?</li>\r\n</ol>\r\n<h3>COMMUNICATION</h3>\r\n<p>Course web site: TBA.</p>\r\n<p>Check it out regularly for schedule changes and other course-related announcements.</p>\r\n<p><strong>Group Email: </strong>TBA<strong><br/></strong></p>\r\n<p><strong>COURSE COORDINATOR:</strong> <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/kuzmanovic-aleksandar.html\" target=\"_self\">Aleksandar Kuzmanovic</a></p>\r\n<p><strong>COURSE INSTRUCTOR: </strong><a href=\"mailto:akuzma@northwestern.edu\" title=\"Prof. Kuzmanovic\">Prof. Kuzmanovic</a></p>"
        }
    },
    "397-497-14": {
        "course_name": "Wireless and Mobile Health (mHealth)",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "5-6:20 TuTh",
        "winter_instructor": "Alshurafa & Pedram",
        "spring_time": "",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "",
            "Description": "<p>Wireless and Mobile health (mHealth) aims to improve our health and well-being by utilizing data provided by technologies such as wearables, IoT devices, and mobile phones. In this course, we will cover foundational knowledge and topical work in mHealth. Students will learn the essential steps needed to create an mHealth system from conception to evaluation through assigned reading, group discussions, and some hands-on programming tasks. Since mHeath is an interdisciplinary field, we will cover a range of literature in human-computer interaction, wearable systems, machine learning, and health. Readings and in-class activities will prepare students for their final creative assignment that involves writing and presenting a research proposal for a mHealth system or research idea. Although this course will cover some technical aspects of mHealth, we encourage students with different backgrounds to enroll as they will work in interdisciplinary teams.</p>\r\n<p><strong>By the end of this course, students should be able to:</strong></p>\r\n<ul>\r\n<li>Understand the process of creating and evaluating a mHealth system</li>\r\n<li>Critically examine the impact of mHealth systems on people and society</li>\r\n<li>Analyze different types of data obtained from mHealth systems&#160;</li>\r\n<li>Design experiments to validate mHealth systems</li>\r\n<li>Write a proposal for an mHealth system or framework</li>\r\n</ul>\r\n<p><strong>Deliverables:</strong></p>\r\n<ul>\r\n<li>Weekly paper reviews based on weekly readings</li>\r\n<li>In-class discussion of the reading materials</li>\r\n<li>Final mHealth project paper. This will NOT require building a system, just proposing and defending an idea, outlining possible experiments, and showing mastery of the research method as well as the literature. This project will have multiple milestones throughout the course</li>\r\n<li><strong>For CS students:</strong> This course fulfills the Project Course requirements.</li>\r\n<li><strong>For CE students:</strong> This course fulfills your CE Embedded Systems Area (via petition form).</li>\r\n</ul>\r\n<p><em>This course is intended for advanced CS and CE undergraduates and graduate students. If you&#8217;re interested in this class, but not sure you have the background, please contact the instructor.</em></p>\r\n<p><strong>COURSE INSTRUCTOR:&#160;</strong><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/affiliated/ashurafa-nabil.html\">Nabil Alshurafa</a> &amp; <a href=\"mailto:mahdi.pedram@wsu.edu\">Mahdi Pedram</a></p>\r\n<p><strong>PREREQUISITES: N/A</strong><a href=\"214.html\"></a></p>"
        }
    },
    "397-497-15": {
        "course_name": "Innovation Lab: Building Technologies for the Law",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "2:35-5:30 Tu",
        "winter_instructor": "Hammond & Linna Jr.",
        "spring_time": "TBD",
        "spring_instructor": "Hammond",
        "other": {
            "Prerequisites": "",
            "Description": "<p>The Innovation Lab is an interdisciplinary course designed to immerse students in the innovation process. This course focuses on the legal, business, technical, teamwork, design, presentation, and other skills involved in that process. Students will work as part of a multidisciplinary team to explore a problem relating to the legal profession, understand the stakeholders' needs, brainstorm, prototype, and test ideas, and iterate through the develop.</p>\r\n<p>Our process combines user and audience research, design thinking, critical and analytical work, iterative building, storytelling, new technology, and a healthy dose of experimentation--often within the confines of a single, specific problem.&#160;</p>\r\n<p>Each quarter, we create multidisciplinary teams of Northwestern students, faculty, and professionals to collaborate on projects we believe are important for the future of media. That could mean everything from making obscure data more available to journalists to solving questions around how to best navigate space in virtual reality. The Lab places students at the center of these important problems for 10 weeks. We work together to identify problems and to find solutions.&#160; &#160;</p>\r\n<p>The class is a team-based, cooperative lab experience for students who want to create and explore new tools, stories, story forms, and physical devices. We expect students to spend at least six hours a week on the project outside of class, preferably with their team.&#160; &#160;</p>\r\n<p>Students are at the center of each project, determining the best roadmap based on research, creative work, and iterative design based on user testing and interviews. Each project we're tackling this quarter, then, has its own&#160;set of milestones, some of which will be generated by the students. Final project will also vary in nature, but each&#160;final presentation will include a demo,&#160;supporting materials (a Github repository, prototypes, and/or technical documentation, depending on the group. Whenever possible the Lab tries to work in the open&#8212;we're open-sourcing not only our code, but the thought process behind our work.<br/> <br/> The Lab is designed&#160;to facilitate collaboration, productivity, and project-driven learning. We follow an agile development process that includes design-based research, scrum, structured critiques, pair research and programming, and code review.&#160; &#160;</p>\r\n<p>All students will work in teams with responsibility shared among members. In particular, students work in cross-functional teams. Our expectation is that all team members will participate in the framing, architecture and implementation of projects.&#160;</p>\r\n<p>When a group presents to the larger class, students are expected to explain what they did, why they did it, and how it addresses the user needs identified by the team. Students are not required to put together a slide deck, but structured presentations are a must. Our meetings will move quickly, so we aim to make the most of our time together. All team members must present at least twice during the quarter.&#160; &#160;</p>\r\nAt the end of the quarter, students will present a working prototype or researching findings, as well as a companion piece that details their process along the way. <br/>\r\n<ul>\r\n<li><em><strong>This course fulfills the Technical Elective &amp; Project Course requirement.</strong></em></li>\r\n</ul>\r\n<p><strong>COURSE INSTRUCTOR: </strong><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/hammond-kristian.html\" target=\"_self\">Prof. Kristian Hammond</a> &amp; <a href=\"mailto:daniel.linna@law.northwestern.edu\">Prof. Daniel W. Linna Jr.</a></p>"
        }
    },
    "397-497-2": {
        "course_name": "Advanced Topics in Compilers",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "",
        "winter_instructor": "",
        "spring_time": "6:30-9:20pm M",
        "spring_instructor": "Campanoni",
        "other": {
            "Prerequisites": "COMP_SCI 322 &amp; COMP_SCI 323",
            "Description": "<p>Production compilers often do not include the latest compilation techniques proposed by the research community. This is because the latest techniques are often not yet as robust as they need to be to be included in a production compiler. My other compiler classes (<a href=\"https://users.cs.northwestern.edu/&#126;simonec/CC.html\" rel=\"noopener\" target=\"_blank\">COMP_SCI 322</a>&#160;and&#160;<a href=\"https://users.cs.northwestern.edu/&#126;simonec/CAT.html\" rel=\"noopener\" target=\"_blank\">COMP_SCI 323</a>) teach well-established compilation techniques included in production compilers (e.g., register allocation, instruction selection). This class, instead, focuses on the advanced compilation techniques the research community has proposed that are not yet included in production compilers. This class covers the large number of compilation techniques proposed by the research community across several years. Specifically, we organize these compilation techniques in topics. Every year we will focus only on up to two topics (e.g., automatic parallelizing compilers, autotuning) to allow a deep dive study.&#160; <a href=\"https://users.cs.northwestern.edu/&#126;simonec/ATC.html\">Syllabus</a></p>\r\n<p><strong>COURSE COORDINATOR:</strong> <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/campanoni-simone.html\">Prof. Simone Campanoni</a></p>\r\n<p><strong>COURSE INSTRUCTOR: </strong><a href=\"mailto:simone.campanoni@northwestern.edu\">Prof. Campanoni</a></p>"
        }
    },
    "397-497-20": {
        "course_name": "Wireless Protocols for the Internet of Things",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "",
        "winter_instructor": "",
        "spring_time": "3:30-4:50 TuTh",
        "spring_instructor": "Ghena",
        "other": {
            "Prerequisites": "Instructor permission - To apply, please fill out this Survey: https://forms.gle/oxPsMR42LYzCu97DA",
            "Description": "<p>The Internet of Things promises a world of computers woven into our physical&#160;world. A common need for these devices is low-power, wireless communication. The goal of this course is to introduce students to a variety of wireless networks that target low-power, machine-to-machine communication as is common in the Internet of Things. While we introduce the physical layer and have a goal of getting data to the internet at large, the focus of this course is on the wireless protocols themselves. How are packets structured, and why? How are they designed to enable low-power communication? How do they deal with contention and reliability? What makes them more or less suitable for different applications? We will explore local-area protocols such as Bluetooth Low Energy, Thread (and other 802.15.4 protocols), low-power, wide-area networks (LPWANs) such as LoRaWAN and Sigfox, and other related topics such as backscatter and localization.<br/> <br/> The class will include lectures on these topics as well as practical hands-on lab sessions interacting with networks. Starting very early in the class, students will form groups for their final project and create a proposal, allowing them at least 5 weeks for project work. Projects will culminate in a research-paper-style writeup and a class presentation.<br/> <br/> Note that this class will be held remotely in Winter 2021 and will require the purchase of microcontroller dev kits with wireless communication capabilities totaling less than $100. Accommodations will be made for students unable to afford this cost.<br/><em></em></p>\r\n<ul>\r\n<li><em>This course satisfies the Project requirement.</em></li>\r\n</ul>\r\n<p><strong>COURSE COORDINATORS: <a href=\"mailto:branden@northwestern.edu\">Prof. Branden Ghena<br/></a></strong><span></span><strong>COURSE INSTRUCTOR : </strong><a href=\"mailto:branden@northwestern.edu\"><strong>Prof. Branden Ghena</strong></a> (Winter)<span></span></p>\r\n<p><strong>PREREQUISITES: </strong>Instructor permission. Experience preferred in microcontroller programming (possibly CE346) and computer networks (CS340).<span></span></p>\r\n<p>Survey:&#160;<a href=\"https://forms.gle/oxPsMR42LYzCu97DA\">https://forms.gle/oxPsMR42LYzCu97DA</a><br/> Note:&#160;This is a first-time course offering. I'm enrolling students in the course with instructor permission only to ensure that students have the right experience to learn a lot from the course. However, you definitely don't have to know everything already. Please fill out the survey, and I'll reach out to you with a permission number shortly afterwards.&#160;</p>"
        }
    },
    "397-497-21": {
        "course_name": "Advanced Graphics Seminar",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "",
        "winter_instructor": "",
        "spring_time": "",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "Completion of one or more of these courses, or graduate enrollment: • COMP_SCI 331 Introduction to Computational Photography • ELEC_ENG 395/495 Computational Photography Seminar • COMP_SCI 351-1 Introduction to Computer Graphics • COMP_SCI 351-2 Intermediate Computer Graphics • COMP_SCI 376 Game Design and Development • COMP_SCI 377 Game Development Studio",
            "Description": "<p>What is the long-term outlook for this field? How will computer graphics and computational photography advance beyond its current state? What are the &#8216;dead end&#8217; methods, and what approaches are most likely to transform the field and have lasting impact?</p>\r\n<p>This broad-ranging survey of recently published research papers in computer graphics and computational photography will attempt to identify and explore new directions and important emerging topics in computer-assisted synthesis, capture, analysis, and assessment of visual information.</p>\r\n<p>In the initial &#8216;idea gathering&#8217; phase, students work together to build a large bibliography from recent juried papers published at reputable conferences and journals, prioritize them by titles and abstracts, and through class discussions identify specific topics that are likely to yield significant advances and have long-term impact. In the second &#8216;in-depth study&#8217; phase, we pursue these student-selected topics by surveys of paper abstracts, selective in-depth reading, in-class presentations, and a final written survey paper, or alternatively, a demonstration project to illustrate key principles and methods.</p>\r\n<p><strong>COURSE GOALS:</strong></p>\r\n<ul>\r\n<li>Familiarity with a broad set of current research topics and methods in computational photography and computer graphics, and a fair understanding of their connections and relationships to other fields;</li>\r\n<li>Ability to discuss cogently the strengths, weaknesses and applicability of the methods to broader problems</li>\r\n<li>Readiness and/or motivation to pursue research work in at one or more student-selected topic areas</li>\r\n</ul>\r\n<p><strong>Grades:</strong></p>\r\n<ul>\r\n<li>Class participation, 4 short-form reports, 1 in-class presentation, 1 Literature Survey(written) or Demo Project</li>\r\n</ul>\r\n<p><strong>COURSE COORDINATORS: <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/tumblin-john.html\" target=\"_self\"></a></strong><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/tumblin-john.html\" target=\"_self\">Prof. Jack Tumblin</a><span></span></p>\r\n<p><strong>COURSE INSTRUCTOR : </strong><a href=\"mailto:j-tumblin@northwestern.edu\">Prof. Tumblin</a><span></span></p>"
        }
    },
    "397-497-22": {
        "course_name": "Wearable and Mobile Computing",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "9:30-10:50 MW",
        "fall_instructor": "Hester",
        "winter_time": "",
        "winter_instructor": "",
        "spring_time": "",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "COMP_ENG 203 and (COMP_ENG 205 or COMP_SCI 213) is helpful to have a clear idea of what is going on underneath the covers, however, an introductory programming class is sufficient. Instructor Consent Required.",
            "Description": "<p>Computing is everywhere, powerful mobile computers are on our wrists and in our pockets, IoT<br/>devices are in our homes and offices, and innumerable tiny devices facilitate processes invisible to us,<br/>yet enable critical applications in health and wellness, smart buildings, infrastructure monitoring, and<br/>everything else. These devices combine a vast array of sensors, like accelerometers and gyroscopes,<br/>with sophisticated algorithms and inference that allow for new types of interaction and wholly new<br/>applications of computing.<br/><br/>This class explores the boundary between the computing and physical world, specifically in the<br/>realms of wearable devices. We will develop and play with innovative wearable devices that can<br/>understand your health, learn or anticipate your emotions, provide novel gestural interfaces, and even<br/>broaden your senses. The class will touch on topics across energy-efficient computing, wearable<br/>mechanical design, human health and behavior, and human computer interaction, to facilitate<br/>exploration of the usefulness and limits of physical computing. We will build wearable computing<br/>devices from scratch (software, hardware, mechanical), program them to be energy-efficient and<br/>useful, and deploy them for various applications. We will host visitors virtually who are experts in<br/>particular areas of wearable computing, and learn from them while designing unique individual<br/>projects and demonstrations.<br/><br/>To enable rapid prototyping and be as accessible as possible, In this class we will use the M icro:bit<br/>device for all our prototyping and building. This means that students can program their wearables in<br/>Python/JavaScript/Blocks and also C/C++ if they choose.&#160;</p>\r\n<p><strong>*<em>This class <span class=\"_Tgc\">Cross-listed</span> as CE 395/495</em></strong><br/>*<strong><em>This course fulfills CS major Technical Elective requirements.</em></strong><br/><br/>COURSE TOPICS<br/>&#9679; Basics of physical computing: sensors, actuators, computation<br/>&#9679; Basics of wearable design (hardware): power, energy, size, weight<br/>&#9679; Programming wearable devices<br/>&#9679; Motion sensing and signal processing<br/>&#9679; Bio-signal sensing and processing<br/>&#9679; Deep dive on exotic sensing modalities<br/>&#9679; Wearable interfaces and actuators<br/>&#9679; Energy harvesting wearables<br/>&#9679; Comfort, form factor, and human centered design</p>\r\n<p><br/>Instructor: <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/hester-josiah.html\"><strong>Prof. Josiah Hester</strong></a></p>"
        }
    },
    "397-497-23": {
        "course_name": "Data Privacy",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "3:30-4:50 TuTh",
        "winter_instructor": "Bhagavatula",
        "spring_time": "",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "(COMP_SCI 212 and 214) or (Programming experience and familiarity with basics of discrete math and statistics/probability)",
            "Description": "<p>Data breaches, privacy breaches, and concerns about algorithmic decision-making have been on the rise. As a result, data privacy has become an increasingly significant concern in the past several years. Individuals and organizations often trust institutions with their data with the expectation that one's data is private from others or to the handling institutions and that it is not used for unfair practices. To ensure the privacy of sensitive data, privacy mechanisms have been developed to preserve the privacy of data without reducing its functionality.</p>\r\n<p>The goal of this course is to introduce students to the concept and implications of data privacy, including mechanisms and protocols that are used to preserve data privacy in practice. We will study concepts such as differential privacy, database anonymization, anonymous communication, and algorithmic fairness. We will also discuss privacy in the context of web privacy, social network privacy, human factors, and machine learning along with any policy implications.</p>\r\n<ul>\r\n<li><strong><em>This course fulfills the Project area.</em></strong></li>\r\n</ul>\r\n<strong>REFERENCE TEXTBOOKS: N/A</strong><br/>\r\n<p><strong>REQUIRED TEXTBOOK: </strong>There is no assigned textbook for this course. Course materials will include slides, online resources, and assigned readings.<strong><br/></strong></p>\r\n<p><strong>COURSE COORDINATORS: </strong><a href=\"mailto:srutib@northwestern.edu\">Sruti Bhagavatula</a><span></span></p>\r\n<p><strong>COURSE INSTRUCTOR : </strong><a href=\"mailto:srutib@northwestern.edu\">Prof. Bhagavatula</a><span></span></p>\r\n<p><strong>Assessments:</strong></p>\r\n<ul>\r\n<li aria-level=\"1\">50% course project: Students will work in teams of two or three on a course project for the whole quarter. Projects will be research-focused and can take on a variety of forms, from developing privacy-focused tools or analyzing the privacy guarantees of existing tools to replicating privacy-focused studies. Projects will be evaluated through a proposal and midterm and final presentations.</li>\r\n<li aria-level=\"1\">30% written assignments: Every other week, students will be assigned problem sets that expose them to the applications of privacy concepts learned in class.</li>\r\n<li aria-level=\"1\">10% student presentations: Each lecture will have a team of approximately two students presenting on the topic from the previous lecture for 20 minutes. Each team will only present once during the quarter. These presentations will tackle real-world news items and articles about the implications of privacy technologies or related research and will involve student discussion.</li>\r\n<li aria-level=\"1\">10% participation: Each lecture will have a quiz with open-ended questions which will be used to evaluate students&#8217; participation.</li>\r\n</ul>\r\n<p><strong><br/></strong><strong><br/></strong></p>"
        }
    },
    "397-497-3": {
        "course_name": "Sports, Technology and Learning",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "",
        "winter_instructor": "",
        "spring_time": "9:30-10:50 TuTh",
        "spring_instructor": "Worsley",
        "other": {
            "Prerequisites": "N/A",
            "Description": "<p>Sports, Technology and Learning will examine the apparent alignment and discrepencies among these three areas. Students will read conference and journal papers, watch sports-related movies, critique existing sports-related technologies and prototype their own technologies. The course also plans to include guest speakers from other universities, industry and sports teams and more.</p>\r\n<p>&#160;In addition to in-class discussions and student reflections, students will complete a course project. The course projects can take on many different forms. Some possible project areas include creating a custom wearable device, using data mining to model or predict sports-related behaviors or actions, or designing a curriculum to engage student-athletes in consequential learning experiences. Projects can be completed in groups or individually. Some elements of the course will involve students using different computer programming tools. However, no prior experience with programming is required. Current and former student-athletes are strongly encouraged to enroll.</p>\r\n<p><em>Cross-listed as <a data-id=\"68\" href=\"https://classplanning.northwestern.edu/wen/4800/07c30/#\">LRN_SCI 351-0-23</a> &amp; <a data-id=\"7518\" href=\"https://classplanning.northwestern.edu/wen/4800/07c30/#\">LRN_SCI 451-0-23</a><br/></em></p>\r\n<p><strong>INSTRUCTOR: <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/worsley-marcelo.html\">Prof. Marcelo Worsley</a></strong></p>"
        }
    },
    "397-497-4": {
        "course_name": "(Special Topics) Innovation in Journalism & Technology",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "2-3:20 TuTh",
        "fall_instructor": "Hammond & Wise",
        "winter_time": "",
        "winter_instructor": "",
        "spring_time": "12:30-1:50 TuTh",
        "spring_instructor": "Hammond",
        "other": {
            "Prerequisites": "",
            "Description": "<p>This is a joint projects class with Medill in conjunction with the <strong><a href=\"https://knightlab.northwestern.edu/\">Knight News Innovation Lab</a></strong>&#160;at Northwestern. McCormick students (primarily CS and CE majors) and journalism students will join cross-functional teams to assess and develop, from both an audience/market perspective and a technology perspective, a range of technology projects with the ultimate goal of deployment for impact in media and journalism.&#160; Some projects may continue over the summer if students are interested.</p>\r\n<p><strong>The class requires submission of an <a href=\"https://studio.knightlab.com/#applications\">application</a> that will be used by the faculty to determine the class composition.</strong></p>\r\n<ul>\r\n<li><em>This course fulfills the Project Course requirement.</em></li>\r\n<li><em>Crosswise as Comm_ST 395-0-21 <strong>(Only for Winter)</strong>; JOUR 342-1 &amp; 442-1 (Knight Lab)<br/></em></li>\r\n</ul>\r\n<p><strong> COURSE INSTRUCTORS: </strong><strong><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/hammond-kristian.html\">Prof. Kristian Hammond</a> &amp; <a href=\"https://www.scholars.northwestern.edu/en/persons/nicholas-alexander-diakopoulos\" rel=\"noopener\" target=\"_blank\">Prof. </a><a href=\"https://knightlab.northwestern.edu/people/faculty/zach-wise/\">Zach Wise</a> (Fall),&#160; <a href=\"https://www.scholars.northwestern.edu/en/persons/nicholas-alexander-diakopoulos\" rel=\"noopener\" target=\"_blank\">Prof. </a><a href=\"https://knightlab.northwestern.edu/people/faculty/zach-wise/\">Zach Wise</a> (Winter)<br/></strong></p>\r\n<p><strong>COURSE COORDINATOR: <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/hammond-kristian.html\">Kristian Hammond</a></strong></p>"
        }
    },
    "397-497-5": {
        "course_name": "Rapid Prototyping for Software Innovation",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "3:30-4:50 TuTh",
        "fall_instructor": "Riesbeck",
        "winter_time": "",
        "winter_instructor": "",
        "spring_time": "",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "COMP_SCI 214 or At least a year of programming experience, preferably in multiple languages",
            "Description": "The goal of this course is to provide an opportunity to learn the technical and critical reasoning skills need to rapidly and iteratively develop innovative full-stack mobile / web software applications.<br/><br/>In particular, this course will focus on how<br/>\r\n<ul>\r\n<li>rapid code development is supported by</li>\r\n<li>modern open-source frameworks, such as React and React Native,</li>\r\n<li>cloud services, such as Firebase and Heroku,</li>\r\n<li>development IDEs, such as Atom and Visual Studio Code, and</li>\r\n<li>collaborative source control tools, such as Github, GitLab, and Bitbucket.</li>\r\n</ul>\r\nvalue-early development and user testing is supported by<br/>\r\n<ul>\r\n<li>agile's focus on continuous retrospective process improvement</li>\r\n<li>Kanban's focus on continuous flow</li>\r\n<li>lean startup's emphasis on value-driven hypothesis testing</li>\r\n</ul>\r\nINSTRUCTOR: <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/riesbeck-chris.html\">Prof. Chris Riesbeck</a><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/vanwart-sarah.html\"></a>\r\n<p>FORMAT: There will be three projects: one 2-week warmup project, defined by the instructor, and two 4-week projects defined by the teams. Each project will have two in-class demonstrations: one after the first week, to show an initial slice of testable value, and one at the end of the project, to demonstrate the final state of the project.<br/><br/>The course class meetings will have some lectures, but be primarily in-class activities, setting, tracking, and analyzing team and product development goals. Attendance is tracked.</p>\r\n<p>Teams will maintain code repositories on Github under an organization created for the class, to support weekly review of every team member's contributions to the code base.</p>\r\n<p>There will be three <a href=\"https://info.catme.org/\">CATME</a> reviews, where team members assess each other's contributions to the team's development.</p>\r\n<p>&#160;</p>\r\n<p>GRADING: Is based on participation and contribution to the project and team development, as evidenced by</p>\r\n<ul>\r\n<li>code contributions in Github</li>\r\n<li>team review in CATME</li>\r\n<li>attendance and participation in in-class activities and agile coaching sessions</li>\r\n<li>participation in the Piazza forum</li>\r\n</ul>\r\n<p>TOPICS: Rapid iterative web and mobile app prototype development:</p>\r\n<ul>\r\n<li>Multi-platform rapid prototype with React and React Native</li>\r\n<li>Data evolution with key-value databases: Firebase, MongoDB</li>\r\n<li>Feature-driven source control branching: Github, GitFlow</li>\r\n<li>Robust state management: Redux</li>\r\n<li>Authentication: OAuth 2.0</li>\r\n<li>Web workers, Progressive Web Apps, Push notifications</li>\r\n</ul>\r\n<p>Lean agile development</p>\r\n<ul>\r\n<li>user stories and task boards</li>\r\n<li>iteration planning and tracking (burndown, burnup)</li>\r\n<li>retrospective-based continuous improvement</li>\r\n<li>Kanban WIP, cumulative flow</li>\r\n</ul>\r\n<p>READINGS: Online tutorials for technical frameworks, e.g., React, React Native, Git and Github.</p>\r\n<p>Agile development slides at <a href=\"https://www.mccormick.northwestern.edu/computer-science/courses/descriptions/394.html\">the COMP_SCI 394 course web site.</a></p>\r\n<p><span><a href=\"https://pragprog.com/titles/jtrap/\">Recommended book: </a><a href=\"https://pragprog.com/titles/jtrap/\">The Agile Samurai</a><a href=\"https://pragprog.com/titles/jtrap/\"></a></span></p>"
        }
    },
    "496-15": {
        "course_name": "Introduction to Graduate Studies in Computer Science",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "10-10:50 MWF",
        "fall_instructor": "Bustamante & Hullman",
        "winter_time": "",
        "winter_instructor": "",
        "spring_time": "",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "CE &amp; CS PhDs only",
            "Description": "<p>The course is an introduction to graduate studies in Computer Science at Northwestern organized for the incoming Ph.D. students. The class, held during the Fall quarter, meets twice a week for 50&#8217; with the goal of preparing you to perform great research, regardless of area, and providing an overview of research areas in CS@NU through short presentations by CS faculty. It also offers an opportunity for CS students and faculty to get to know each other and learn the science, culture, values, and people that make CS@NU unique.</p>\r\n<p>Some of the skills the course will teach you include:</p>\r\n<ul>\r\n<li>How to read a research paper</li>\r\n<li>How to review a research paper</li>\r\n<li>How to write a research paper</li>\r\n<li>How to generate ideas</li>\r\n<li>How to give a good talk</li>\r\n<li>How to be a great TA</li>\r\n</ul>\r\n<strong>INSTRUCTOR: </strong><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/bustamante-fabian.html\" target=\"_self\">Prof. Fabi&#225;n E. Bustamante</a> &amp; <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/hullman-jessica.html\">Prof. <span class=\"mail_link\"></span>Jessica Hullman</a>"
        }
    },
    "496-2": {
        "course_name": "Graduate Algorithms",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "11-12:20 TuTh",
        "winter_instructor": "Vijayaraghavan",
        "spring_time": "",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "The pre-requisites for the course includes the undergraduate Algorithms course (COMP_SCI 336 or equivalent) and COMP_SCI 212 or equivalent. Some familiarity with linear algebra is useful, but not necessary strictly.",
            "Description": "<p>This is an introductory graduate level course on Algorithms that will give broad exposure to recent advances in algorithms, yet cover the fundamental techniques needed to understand the recent advances in algorithms research. At the end of the course, students will be able to read and understand research papers in most recent areas of algorithms research.<strong><br/> </strong></p>\r\n<p><strong>INSTRUCTOR:</strong> <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/makarychev-konstantin.html\">Prof. Konstantin Makarychev</a> (Spring &amp; Fall), <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/vijayaraghavan-aravindan.html\">Prof. <span class=\"mail_link\">Aravindan&#160;Vijayaraghavan</span></a> (Winter)</p>\r\n<p><strong>A TENTATIVE LIST OF TOPICS IS GIVEN BELOW:</strong></p>\r\n<ol>\r\n<li>Concentration bounds / Large deviations, Chernoff bounds.</li>\r\n<li>Hashing, balls and bins, power of two choices.</li>\r\n<li>Probabilistic method, random graphs, average-case analysis.</li>\r\n<li>Linear programming (review) , LP Duality.</li>\r\n<li>Ellipsoid Algorithm, convex programming.</li>\r\n<li>Approximation algorithms, randomized rounding.</li>\r\n<li>Eigenvalues, eigenvectors, random walks, expanders.</li>\r\n<li>Dimension reduction (Johnson-Lindenstrauss), PCA/ SVD, Clustering in high dimensions.</li>\r\n<li>Semi-definite programming, use in approximation algorithms.</li>\r\n<li>Metric Embeddings, Locality Sensitive Hashing.</li>\r\n<li>Competitive Analysis, Online algorithms</li>\r\n<li>PAC &#160;learning, VC theory.</li>\r\n<li>Multiplicative weights, applications (online learning, zero-sum games).</li>\r\n</ol>"
        }
    },
    "496-21": {
        "course_name": "Qualitative Reasoning Seminar",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "",
        "winter_instructor": "",
        "spring_time": "",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "Permission of instructor.  This course is open to graduate students in cognitive science who are interested in knowledge representation. No programming will be required.",
            "Description": "<p>How people reason and learn about the continuous world is one of the central problems in cognitive<br/>science. It is key to understanding how commonsense reasoning works about the physical and social<br/>world. This seminar will explore ideas from qualitative reasoning, which provides representations that<br/>support human-like reasoning and learning.<br/><span></span></p>\r\n<p><strong>REQUIRED TEXTBOOK:</strong> <a href=\"https://mitpress.mit.edu/books/qualitative-representations\">Qualitative Representations:</a> How People Reason and Learn about the Continuous World, by Ken Forbus, MIT Press.&#160; ISBN: 9780262038942.<br/> <br/> <a href=\"mailto:forbus@northwestern.edu\"></a> <strong>DETAILED COURSE TOPICS: </strong>Students will be reading and discussing ideas about qualitative representations, including thinking through how to apply them in their own research or projects of interest to them. One page reaction papers will be required before each class session, and classes will involve a combination of discussion and hands-on representation exercises. A term project will enable students to explore these ideas in more depth.</p>\r\n<p><strong>COURSE COORDINATOR</strong>:&#160;<a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/forbus-ken.html\">Prof. Ken Forbus</a><br/><strong>COURSE INSTRUCTOR :&#160;</strong><a href=\"mailto:forbus@northwestern.edu\">Prof. Forbus</a></p>"
        }
    },
    "496-23": {
        "course_name": "AI Perspectives: Symbolic Reasoning to Deep Learning",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "",
        "winter_instructor": "",
        "spring_time": "2-4:50 F",
        "spring_instructor": "Alam",
        "other": {
            "Prerequisites": "CS 349 and either CS 348 or CS 371. Equivalents elsewhere may be accepted if course descriptions provided.",
            "Description": "<p>This is an interactive&#160;course designed to engage students&#160;in incisive and energetic discussions on different perspectives in Artificial Intelligence (AI), from classical&#160;AI approaches to recent advances in machine learning. The course will feature&#160;guest lectures by Northwestern professors from various disciplines and external guest speakers, both offering their takes on AI: comparing symbolic reasoning and knowledge representation with the state of the art in deep learning, exploring cognition through psychology, neuroscience, and linguistics, looking at consciousness through the lens of philosophy, unpacking the ethics of AI, and more. Coursework will center on class participation: students will read research papers, view debates and debate views, and share their evolving perspectives by writing weekly thought pieces and a final paper.<br/><span></span></p>\r\n<p><strong>REQUIRED TEXTBOOK:</strong> N/A<br/> <br/> <strong>COURSE COORDINATOR</strong>:&#160;<a href=\"mailto:mohammedalam2009@u.northwestern.edu\">Mohammed A. Alam</a></p>\r\n<p><strong>COURSE INSTRUCTOR :&#160;</strong><a href=\"#\"></a><a href=\"mailto:mohammedalam2009@u.northwestern.edu\">Mohammed A. Alam</a> <br/> <br/> <strong>COURSE GOALS</strong>: The goal of the course is to give students a holistic view of the field of AI and to help them to ask and answer important questions in their own academic or industry pursuits in AI: Will intelligence be an emergent property of neural networks? Should cognitive architectures utilize knowledge representations instead? What would a hybrid system look like that combines the two approaches? Is there a novel approach that departs altogether from the familiar? The course expects to invigorate students with an enthusiasm about AI that can enable them to move the field forward.<br/> <br/> <strong>DETAILED COURSE TOPICS: </strong><br/> <br/> <strong>ASSIGNMENTS</strong>:</p>"
        }
    },
    "496-24": {
        "course_name": "Visualization for Scientific Communication",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "2 -4:50 M",
        "winter_instructor": "Kay",
        "spring_time": "",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "",
            "Description": "<p>This course focuses on developing visualizations for communicating in a scientific context: papers, posters, presentations, etc. Through mini-lectures and readings, it will provide a foundation in: (1) visual perception and visual design as they relate to information visualization; (2) the construction of effective data visualizations; (3) the effective use of visualization and text in scientific articles, posters, etc; and (4) careful and correct uncertainty visualization when communicating scientific results. Students are expected to bring some existing research project they are already working on; in a semester-long project they will design/redesign the visual communication of that work with detailed feedback from the instructor. No other background is assumed.<span></span></p>\r\n<ul>\r\n<li><em><strong>Cross-listed with </strong></em>MTS 525-0-20</li>\r\n</ul>\r\n<p><strong>REQUIRED TEXTBOOK:</strong> N/A<br/> <br/> <strong>COURSE COORDINATOR</strong>: <a href=\"mailto:mailtp:mjskay@northwestern.edu\">Prof. Matthew Jeremy Shaver Kay</a></p>\r\n<p><strong>COURSE INSTRUCTOR : </strong><a href=\"mailto:mjskay@northwestern.edu\">Prof. Kay</a><br/> <br/> <strong>COURSE GOALS</strong>: <br/> <br/> <strong>DETAILED COURSE TOPICS: </strong><br/> <br/> <strong>ASSIGNMENTS</strong>:</p>"
        }
    },
    "496-26": {
        "course_name": "Foundations of Reliability and Robustness in ML",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "2-4:50 F",
        "fall_instructor": "Vijayaraghavan",
        "winter_time": "",
        "winter_instructor": "",
        "spring_time": "",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "CS 336 or PhDs Students or Instructor permission",
            "Description": "<p>Today&#8217;s data pose unprecedented challenges for machine learning,&#160; statistics and data analysis. It may be incomplete, noisy, or exposed to some unknown source of corruption. Moreover, recent&#160;phenomenon of (imperceptible) adversarial perturbations have also demonstrated that robustness is important for reliable and secure adoption of ML systems in practice.&#160;</p>\r\n<p>In this course, we will learn about different theoretical frameworks to model and reason about various kinds of noise, corruptions&#160;and errors in&#160;machine learning and statistical&#160;tasks. We will also learn about different algorithmic&#160;techniques that are both efficient and robust, in the context of both supervised and unsupervised learning. Finally, we will also explore new topics like adversarial robustness and relations to topics like differential privacy.</p>\r\n<p>**Pre-requisites:** The course will be a proof-based theoretical course and assume sufficient mathematical sophistication and familiarity with topics like probability, linear algebra, and some optimization. The course is targeted at graduate students and advanced undergraduate students who are interested in some of these topics. The student is expected to have taken an undergrad theory course like COMP_SCI 336 (Algorithms) in computer science, or equivalent courses in other disciplines.&#160;&#160;</p>\r\n<p>**Tentative list of topics:**</p>\r\n<ol>\r\n<li>Introduction, Robustness and preliminaries.&#160;</li>\r\n<li>Random noise, SQ learning, and noise sensitivity.&#160;</li>\r\n<li>Huber Contamination model,&#160;influence functions, breakdown point.&#160;&#160;</li>\r\n<li>Filtering: high-dimensional mean estimation and regression, convex relaxation based-methods.&#160;</li>\r\n<li>Robustness in Supervised Learning: Malicious noise,&#160;Agnostic learning, and Massart noise.&#160; &#160;</li>\r\n<li>Semi-random models.&#160;</li>\r\n<li>Adversarial robustness, certified robustness through randomized smoothing.&#160;</li>\r\n<li>Adversarial perturbations,&#160;Distributional robustness, new directions.&#160;</li>\r\n<li>Other notions of robustness like missing data, list-decodable learning, truncated statistics.</li>\r\n<li>Private machine learning.&#160;</li>\r\n</ol>\r\n<p><strong>INSTRUCTOR:</strong> <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/vijayaraghavan-aravindan.html\">Prof. <span class=\"mail_link\">Aravindan&#160;Vijayaraghavan</span></a></p>"
        }
    },
    "496-27": {
        "course_name": "Algorithms for Big Data",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "",
        "winter_instructor": "",
        "spring_time": "3:30-4:50 TuTh",
        "spring_instructor": "Makarychev",
        "other": {
            "Prerequisites": "Permission of Instructor",
            "Description": "This is a graduate-level course on theoretical aspects of Big Data. We will examine algorithms and data structures for dealing with massive data sets. We will discuss such topics as streaming algorithms, sublinear algorithms, dynamic graph algorithms, dimensionality reduction, metric embeddings, sketching, and parallel algorithms. In this course, students will read and present papers on the cutting-edge research in the area of Big Data.<br/>\r\n<p><strong>REFERENCE TEXTBOOKS: N/A</strong><br/><strong>REQUIRED TEXTBOOK: N/A<br/></strong></p>\r\n<p><strong>COURSE COORDINATORS: <a href=\"mailto:katherine.compton@northwestern.edu\"></a><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/makarychev-konstantin.html\"></a></strong><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/makarychev-konstantin.html\">Prof. Konstantin Makarychev</a><span></span></p>\r\n<p><strong>COURSE INSTRUCTOR : </strong><a href=\"mailto:konstantin@northwestern.edu\">Prof. Konstantin Makarychev</a><span></span><strong><br/></strong></p>"
        }
    },
    "496-3": {
        "course_name": "Graduate Complexity",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "",
        "winter_instructor": "",
        "spring_time": "",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "Ph Ds studetns / (Undergrad/Grad permission by instructor)",
            "Description": "<p>This graduate course is an introduction to computational complexity. Computational complexity studies the limits and capabilities of efficient computation, as well as tradeoffs between different computational resources. Except the central P versus NP question, we explore a variety of other fascinating topics, including the connection between&#160;learning theory and average-case&#160;complexity, hardness versus randomness (the BPP versus P question), and the surprising equivalence of probabilistically checkable proofs (PCPs) and the hardness of approximating certain optimization problems.&#160;</p>\r\n<strong>INSTRUCTOR: <a href=\"mailto:xue.chen1@northwestern.edu\">Email Prof. Xue</a><br/> </strong>"
        }
    },
    "496-5": {
        "course_name": "Distributed Systems in Challenging Environments",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "3:30-4:50 MW",
        "winter_instructor": "Bustamante",
        "spring_time": "",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "Please contact the course coordinator. ",
            "Description": "<p>A top on interesting ideas and ongoing projects pushing distributed systems in to new and challenging domains.</p>\r\n<p><strong>COURSE</strong> <strong>COORDINATOR:</strong><a href=\"http://www.mccormick.northwestern.edu/research-faculty/directory/affiliated/de-anindya.html\"><span class=\"mail_link\"></span></a> <strong><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/bustamante-fabian.html\" target=\"_self\">Prof. Fabi&#225;n E. Bustamante</a></strong></p>\r\n<p><strong><strong>REQUIRED TEXTS:</strong>&#160;</strong>None; material is drawn from recent publications in top conferences.</p>\r\n<p><strong>COURSE OBJECTIVES</strong>: To familiarize the student with ongoing research and open problems in distributed systems and networking.<br/> <br/> <strong>DETAILED COURSE TOPICS:</strong>&#160;An evolving network; distributed systems underwater, environmental impact, vehicular networks, mobile systems, sensor systems.&#160;<br/> <br/> <strong>GRADES</strong>:&#160;Determined roughly as follow: a quarter-long project (50%), paper presentation and discussion leading (20%), class participation (15%) and summaries (15%).</p>"
        }
    },
    "496-7": {
        "course_name": "The Design of Technological Tools for Thinking and Learning",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "2-4:50 W",
        "winter_instructor": "Wilensky",
        "spring_time": "",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "",
            "Description": "<p>This course is a hands-on practicum in designing and building technology-enabled curricula and learning environments. We will use many rich software toolkits designed to enable novice computer users to get their &#8220;hands dirty&#8221; doing iterative software design. In addition to the hands-on component, the course is also designed to introduce you to the Constructionist Learning design perspective - first named by Seymour Papert and greatly influenced by the work of Jean Piaget - a perspective that is very influential in the Learning Sciences today. <strong><a href=\"http://ccl.northwestern.edu/dtttl/2016LS426/Info.html\" rel=\"noopener\" target=\"_blank\">Course Website</a></strong> &amp; <strong><a href=\"https://canvas.northwestern.edu/courses/33060%20\" rel=\"noopener\" target=\"_blank\">Canvas Website</a></strong></p>\r\n<ul>\r\n<li><em>This course has been cross-listed with LRN_SCI 426<br/> </em></li>\r\n</ul>\r\n<p><strong>COURSE COORDINATOR:</strong> <strong><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/wilensky-uri.html\" target=\"_self\">Prof. Uri Wilensky</a></strong></p>"
        }
    },
    "496-9": {
        "course_name": "Mechanism Design",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "9:30-10:50 TuTh",
        "fall_instructor": "Hartline",
        "winter_time": "",
        "winter_instructor": "",
        "spring_time": "",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "Prior experience with algorithms or game theory is recommended.",
            "Description": "<p>This course studies the design of mechanisms to mediate the interaction of strategic individuals so that desirable outcomes are attained. A central theme will be the tradeoff between optimality of an objective such as revenue or welfare and other desirable properties such as simplicity, robustness, computational tractability, and practicality. This tradeoff will be quantified by a theory of approximation which measures the loss of performance of a simple, robust, and practical approximation mechanism in comparison to the complicated and delicate optimal mechanism. The class focuses on techniques for performing this analysis, economic conclusions, and consequences for practice. The class will follow the textbook manuscript at: <a href=\"http://jasonhartline.com/MDnA/\">http://jasonhartline.com/MDnA/</a> - <a href=\"https://sites.northwestern.edu/hartline/eecs-496-mechanism-design/\">Syllabus</a><a>. </a><br/><span></span></p>\r\n<p><strong>REQUIRED TEXTBOOK:</strong> Hartline, <a href=\"http://jasonhartline.com/MDnA/\">Mechanism Design and Approximation</a>, manuscript, 2016.<br/> <br/> <strong>COURSE COORDINATOR</strong>: <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/hartline-jason.html\"></a><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/hartline-jason.html\">Prof. Jason Hartline</a>&#160;</p>\r\n<p><strong>COURSE INSTRUCTOR :&#160;</strong><a href=\"mailto:hartline@northwestern.edu\">Prof. Hartline</a> <br/> <br/> <strong>COURSE GOALS</strong>: <br/> <br/> <strong>DETAILED COURSE TOPICS: </strong><br/> <br/> <strong>ASSIGNMENTS</strong>:</p>"
        }
    },
    "497-3": {
        "course_name": "Digital Musical Instrument Design",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "",
        "winter_instructor": "",
        "spring_time": "TBD",
        "spring_instructor": "Pardo",
        "other": {
            "Prerequisites": "Registration is by instructor permission only.  Students who wish to enroll should fill out the course's pre-enrollment survey. Any questions should be directed to the instructor, Stephan Moore, at stephan@northwestern.edu. Link for pre-enrollment survey: https://docs.google.com/forms/d/e/1FAIpQLSeCw537-3ZojxdljuYO0iF47QANbZ1RzhyPW0eZ6RykMrhR6Q/viewform?usp=sf_link",
            "Description": "<p>Digital Musical Instrument Design approaches Human Computer Interaction through the lens of artistic creation in sound. Its perspective sits at the intersection of design, engineering, musicianship, and the sonic arts. This course will introduce students to fundamentals of creating their own musical instruments using modern technology. We will explore the influence and feedback between the tool (e.g. an instrument), the tool user (a musician/producer), the creative output (the music), as well as the audience. Along the way, we will learn about user interaction design, embedded computing (using arduino), sensor technology, signal creation and interpretation (using Max/MSP or PureData), and musical expression. Students will create a new musical instrument by the end of the course and the final examination will be a performance using their instrument.</p>\r\n<ul>\r\n<li>&#160;This course is cross-listed with <span>RTVF 376-0-22 </span><span>(39544)</span><span></span><span></span><span></span><span></span><span></span></li>\r\n</ul>\r\n<p><strong>Learning Objectives</strong></p>\r\n<p><em>At the end of this course, the student will be able to:</em></p>\r\n<ul>\r\n<li>Analyze and critique the design of music instruments</li>\r\n<li>Design and construct basic sensor circuits for musical interaction</li>\r\n<li>Write code for the Arduino platform that can interpret and transmit data from sensor circuits</li>\r\n<li>Create interactive audio programs (in the Max platform) that map sensor data onto sound outputs</li>\r\n<li>Refine instrument designs to create specific sonic outcomes</li>\r\n</ul>\r\n<p><strong>Evaluation Method</strong></p>\r\n<p>Attendance and class participation are crucial to this class, and are therefore a significant part of the grade.&#160;&#160;In additional to a final project, there will be a smaller presentation and incremental assignments.</p>\r\n<p><strong>Class Materials (Required)</strong></p>\r\n<p>This class will require students to make a number of small equipment purchases.&#160; The first $100 of these purchases will be covered by Northwestern, but there may be costs that exceed this amount.&#160; These additional costs will not exceed $50.&#160;&#160;All texts and other documentary resources will be provided via Canvas.</p>\r\n<p><strong>COURSE INSTRUCTOR: </strong><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/pardo-bryan.html\"><span class=\"mail_link\"></span></a><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/pardo-bryan.html\">Prof. Bryan Pardo</a> &amp; <a href=\"mailto:stephan@northwestern.edu\">Prof. Stephan Moore</a></p>"
        }
    },
    "497-5": {
        "course_name": "The Science of Law and Computation",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "",
        "winter_instructor": "",
        "spring_time": "",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "Ph.D. status or permission of the instructors",
            "Description": "<span>This advanced topics seminar explores the many parallels between the science of law and the science of computation. Both fields require understanding outcomes produced by the interpretation of written instructions, understanding when written instructions are effective, and understanding systems for producing effective written instructions. For example, on the computer science side, these written instructions include protocols, algorithms, and programs, while on the law side, these written instructions include rules, standards, contract clauses, regulations, and laws. This course aims to identify fruitful avenues for research that combine legal reasoning and the principles of the rule of law with computer science technical approaches (algorithms, machine learning, programming languages, cryptography, etc).</span><br/>\r\n<h3><span>Coursework</span></h3>\r\n<p><span>&#8203;&#8203;</span><span>Each week considers a different topic. Each student will present at least one paper and lead a discussion session. (Students must reach out to the instructors at least one week before their presentation to schedule a planning session with the instructors.)</span></p>\r\n<p><span>Coursework includes a survey paper and a preliminary study for a research project. Each week, pairs of students must organize a one-hour meeting with CS and Law faculty advisors to discuss their research projects.</span></p>\r\n<h3><span>Logistics</span></h3>\r\n<p><span>Participants read and annotate papers before each meeting and engage in text-based discussion on a collaborative reading and annotation platform. Participants identify questions of interest at least 24 hours before each class meeting. Assigned students begin each session by presenting the week&#8217;s papers.</span></p>\r\n<p><span>General meeting structure:</span></p>\r\n<ul>\r\n<li><span> </span><span>Paper 1: Paper presented for 15 minutes</span></li>\r\n<li><span> </span><span>Paper 2: Paper presented for 15 minutes</span></li>\r\n<li><span> </span><span>90 minutes of discussion and collaborative note taking</span></li>\r\n<li><span> </span><span>60 minutes: Students meet with CS and Law faculty mentors to discuss their survey papers and research projects</span></li>\r\n</ul>\r\nDuring each session, students assigned to present papers at the next class meeting are responsible for taking notes and circulating the notes to all participants within 24 hours after the class meeting.<br/>\r\n<h3><span>Technology</span></h3>\r\n<ul>\r\n<li><span> </span><span>Gather and Zoom</span></li>\r\n<li><span> </span><span>Online platform for reading, annotating the reading, and online text-based discussion about the readings.</span></li>\r\n</ul>\r\n<h3><span>Schedule</span></h3>\r\n<span></span>Week 1: Introduction and overview of topics\r\n<ul>\r\n<li><span> </span><span>No readings</span></li>\r\n<li>Presentation data sources, including from courts (follow up presentations intermittently throughout the rest of the term)</li>\r\n</ul>\r\n<span>Week 2: Scientific Methods for Law</span>\r\n<p><strong>Summary: </strong></p>\r\n<ul>\r\n<li><span>&#160;</span><span>Prescott, <em>Improving Access to Justice in State Courts with Platform Technology</em>, Vand. L. Rev. 70 (2017), <a href=\"https://repository.law.umich.edu/cgi/viewcontent.cgi?article=2912&amp;context=articles\">https://repository.law.umich.edu/cgi/viewcontent.cgi?article=2912&amp;context=articles</a> </span></li>\r\n<li>Olteanu Alexandra, Castillo Carlos, Diaz Fernando, K&#305;c&#305;man Emre, <em>Social Data: Biases, Methodological Pitfalls, and Ethical Boundaries</em>, Frontiers in Big Data, VOLUME 2, 2019, <a href=\"https://www.frontiersin.org/articles/10.3389/fdata.2019.00013/full\">https://www.frontiersin.org/articles/10.3389/fdata.2019.00013/full</a></li>\r\n</ul>\r\n<span>Week 3: Rules vs Standards</span>\r\n<p><strong>Summary</strong><span><strong>:</strong> Rules are specified precisely without regard to context, while standards must be interpreted in context. How do they compare in terms of producing desirable outcomes?</span></p>\r\n<ul>\r\n<li><span></span><span>Louis Kaplow, <em>Rules Versus Standards: An Economic Analysis</em>, 42 Duke L.J. 557 (1992), <a href=\"https://scholarship.law.duke.edu/cgi/viewcontent.cgi?article=3207&amp;context=dlj\">https://scholarship.law.duke.edu/cgi/viewcontent.cgi?article=3207&amp;context=dlj</a>.</span></li>\r\n<li>J. H. Saltzer, D. P. Reed, and D. D. Clark. 1984. <em>End-to-end arguments in system design</em>. ACM Trans. Comput. Syst. 2, 4 (Nov. 1984), 277&#8211;288. DOI:<a href=\"https://doi.org/10.1145/357401.357402\">https://doi.org/10.1145/357401.357402</a></li>\r\n</ul>\r\n<span>Week 4: Accountability</span>\r\n<p><strong><span>Summary</span></strong><span>: </span></p>\r\n<ul>\r\n<li><span></span><span>David Freeman Engstrom &amp; Daniel E. Ho, <em>Algorithmic Accountability in the Administrative State</em>, 37 Yale J. On Reg __ (forthcoming 2020) [49 pages], <a href=\"https://digitalcommons.law.yale.edu/yjreg/vol37/iss3/1/\">https://digitalcommons.law.yale.edu/yjreg/vol37/iss3/1/</a> </span></li>\r\n<li>Lukas Lazarek, Alexis King, Samanvitha Sundar, Robert Bruce Findler, and Christos Dimoulas. 2019. <em>Does blame shifting work? Proc</em>. ACM Program. Lang. 4, POPL, Article 65 (January 2020), 29 pages. DOI:<a href=\"https://doi.org/10.1145/3371133\">https://doi.org/10.1145/3371133</a></li>\r\n</ul>\r\n<span>Week 5: Verification</span>\r\n<p><strong><span>Summary</span></strong><span>: </span></p>\r\n<ul>\r\n<li><span></span><span>Paul W. Grimm, Maura R. Grossman, Gordon V. Cormack, <em>Artificial Intelligence as Evidence</em>, 19 Northwestern Journal of Technology &amp; Intellectual Property __ (forthcoming; pre-publication draft dated March 7, 2021).</span></li>\r\n<li><span> </span><span>Sections 1 and 2 of: Fisch B., Freund D., Naor M. (2014) Physical Zero-Knowledge Proofs of Physical Properties. In: Garay J.A., Gennaro R. (eds) Advances in Cryptology &#8211; CRYPTO 2014. CRYPTO 2014. Lecture Notes in Computer Science, vol 8617. Springer, Berlin, Heidelberg. <a href=\"https://doi.org/10.1007/978-3-662-44381-1_18\">https://doi.org/10.1007/978-3-662-44381-1_18</a> (Excerpted article at: <a href=\"https://www.iacr.org/archive/crypto2014/86160292/86160292.pdf\">https://www.iacr.org/archive/crypto2014/86160292/86160292.pdf</a> )</span></li>\r\n<li><span> </span><span>Section 1 of: Shafi Goldwasser and Sunoo Park. 2017. Public Accountability vs. Secret Laws: Can They Coexist? A Cryptographic Proposal. In Proceedings of the 2017 on Workshop on Privacy in the Electronic Society (WPES '17). Association for Computing Machinery, New York, NY, USA, 99&#8211;110. DOI:<a href=\"https://doi.org/10.1145/3139550.3139565\">https://doi.org/10.1145/3139550.3139565</a> </span></li>\r\n<li><span> </span><span>Glaser, A., Barak, B. &amp; Goldston, R. A zero-knowledge protocol for nuclear warhead verification. Nature 510, 497&#8211;502 (2014). <a href=\"https://doi.org/10.1038/nature13457\">https://doi.org/10.1038/nature13457</a> </span></li>\r\n<li><span> </span><span>Optional introductory materials: Jean-Jacques QuisquaterMyriam QuisquaterMuriel QuisquaterMicha&#235;l QuisquaterLouis GuillouMarie Annick GuillouGa&#239;d GuillouAnna GuillouGwenol&#233; GuillouSoazig Guillou, <em>How to Explain Zero-Knowledge Protocols to Your Children </em>(1989), <a href=\"http://pages.cs.wisc.edu/&#126;mkowalcz/628.pdf\">http://pages.cs.wisc.edu/&#126;mkowalcz/628.pdf</a> </span></li>\r\n<li>Optional: Yuqing Cui, <em>Application of Zero-Knowledge Proof in Resolving Disputes of Privileged Documents in E-Discovery</em>, Harvard Journal of Law &amp; Technology (Spring 2019), <a href=\"https://jolt.law.harvard.edu/assets/articlePDFs/v32/32HarvJLTech633.pdf\">https://jolt.law.harvard.edu/assets/articlePDFs/v32/32HarvJLTech633.pdf</a></li>\r\n</ul>\r\n<span>Week 6: Validation (Better Legal Outcomes)</span>\r\n<p><strong><span>Summary</span></strong><span>: How can computational technology help enable accountability in legal systems?</span></p>\r\n<ul>\r\n<li><span>&#160;</span><span>David Freeman Engstrom and Jonah B. Gelbach, <em>Legal Tech, Civil Procedure, and the Future of Adversarialism</em> (March 9, 2020). University of Pennsylvania Law Review, Forthcoming, Available at SSRN: <a href=\"https://ssrn.com/abstract=3551589\">https://ssrn.com/abstract=3551589</a> </span></li>\r\n<li><span> </span><span>Jason D. Hartline, <em>Bayes-Nash Equilibrium</em>, in Mechanism Design and Approximation, <a href=\"http://jasonhartline.com/MDnA/MDnA-chX.pdf\">http://jasonhartline.com/MDnA/MDnA-chX.pdf</a> </span></li>\r\n</ul>\r\n<span>Week 7: Network Theory</span>\r\n<ul>\r\n<li><span> </span><span>Pedraza-Fari&#241;a, Laura G. and Whalen, Ryan, <em>A Network Theory of Patentability</em>, University of Chicago Law Review, Volume 87, No. 1, (2020), <a href=\"https://lawreview.uchicago.edu/publication/network-theory-patentability\">https://lawreview.uchicago.edu/publication/network-theory-patentability</a> </span></li>\r\n<li><span> </span><span>Lars Backstrom and Jon Kleinberg. 2014. <em>Romantic partnerships and the dispersion of social ties: a network analysis of relationship status on facebook</em>. In Proceedings of the 17th ACM conference on Computer supported cooperative work &amp; social computing (CSCW '14). Association for Computing Machinery, New York, NY, USA, 831&#8211;841. DOI:<a href=\"https://doi.org/10.1145/2531602.2531642\">https://doi.org/10.1145/2531602.2531642</a> </span></li>\r\n</ul>\r\n<span>Week 8: Bias and Fairness I</span>\r\n<p><strong><span>Summary</span></strong><span>: </span></p>\r\n<ul>\r\n<li><span></span><span>Danielle Citron, <em>Technological Due Process</em> 85 Wash. U. L. Rev. 1249, 1271 (2008), <a href=\"https://openscholarship.wustl.edu/cgi/viewcontent.cgi?article=1166&amp;context=law_lawreview\">https://openscholarship.wustl.edu/cgi/viewcontent.cgi?article=1166&amp;context=law_lawreview</a> </span></li>\r\n<li><span> </span><span>Christopher Jung, Sampath Kannan, Changhwa Lee, Mallesh Pai, Aaron Roth, and Rakesh Vohra. 2020. <em>Fair Prediction with Endogenous Behavior</em>. In Proceedings of the 21st ACM Conference on Economics and Computation (EC '20). Association for Computing Machinery, New York, NY, USA, 677&#8211;678. DOI:<a href=\"https://doi.org/10.1145/3391403.3399473\">https://doi.org/10.1145/3391403.3399473</a> </span></li>\r\n</ul>\r\n<span>Week 9: Bias and Fairness II</span>\r\n<p><strong><span>Summary</span></strong><span>: </span></p>\r\n<ul>\r\n<li><span></span><span>Rebecca Wexler, <em>Privacy Asymmetries: Access to Data in Criminal Defense Investigations</em> (July 29, 2019). UCLA Law Review, Vol. 68, No. 1, 2021, Available at SSRN: <a href=\"https://ssrn.com/abstract=3428607\">https://ssrn.com/abstract=3428607</a> </span></li>\r\n<li><span> </span><span>Michael Feldman, Sorelle A. Friedler, John Moeller, Carlos Scheidegger, and Suresh Venkatasubramanian. 2015. <em>Certifying and Removing Disparate Impact</em>. In Proceedings of the 21th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining (KDD '15). Association for Computing Machinery, New York, NY, USA, 259&#8211;268. DOI:<a href=\"https://doi.org/10.1145/2783258.2783311\">https://doi.org/10.1145/2783258.2783311</a> </span></li>\r\n</ul>\r\n<span>Week 10: Computational Antitrust</span>\r\n<ul>\r\n<li><span></span><span>Emilio Calvano, Giacomo Calzolari, Vincenzo Denicol&#242;, Sergio Pastorello, <em>Artificial Intelligence, Algorithmic Pricing, and Collusion</em>, American Economic Review (Oct. 2020), <a href=\"https://www.aeaweb.org/articles?id=10.1257/aer.20190623\">https://www.aeaweb.org/articles?id=10.1257/aer.20190623</a> </span></li>\r\n<li><span> </span><span>Schrepel, Thibault, <em>Computational Antitrust: An Introduction and Research Agenda</em> (January 15, 2021). Stanford Computational Antitrust (Vol. 1) 2021, Available at SSRN: <a href=\"https://ssrn.com/abstract=3766960\">https://ssrn.com/abstract=3766960</a> </span></li>\r\n</ul>\r\n<span>Final Presentations (during Exam Week)</span>\r\n<ul>\r\n<li><span> </span><span>Student final presentations</span></li>\r\n<li>Poster session with extended Q&amp;A</li>\r\n</ul>\r\n<p><strong>COURSE COORDINATOR</strong>: <a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/hartline-jason.html\">Prof. Jason Hartline</a> &amp; <a href=\"mailto:daniel.linna@law.northwestern.edu\">Prof. Daniel W. Linna Jr.</a></p>\r\n<p><strong>COURSE INSTRUCTOR: </strong><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/hammond-kristian.html\" target=\"_self\"></a><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/hartline-jason.html\"></a><a href=\"https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/hartline-jason.html\">Prof. Jason Hartline</a> &amp; <a href=\"mailto:daniel.linna@law.northwestern.edu\">Prof. Daniel W. Linna Jr.</a></p>"
        }
    },
    "497-6": {
        "course_name": "Deep Learning for Natural Language Processing",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "9:30-10:50 MW",
        "winter_instructor": "Demeter",
        "spring_time": "",
        "spring_instructor": "",
        "other": {
            "Prerequisites": "CS-349 or consent of instructor",
            "Description": "<p>In the first half of this course, we will explore the evolution of deep neural network language models, starting with n-gram models and proceeding through feed-forward neural networks, recurrent neural networks and transformer-based models.&#160; In the second half of the course we will apply these models to natural language processing tasks, including question answering, text classification (including fakes detection), text summarization, text generation (including dialogue, neural machine translation and program synthesis) and natural language inference, among others.&#160; After completing this course, students will be able to generalize these techniques to a wide variety of applied and research problems in natural language processing.</p>\r\n<p><strong>COURSE COORDINATORS: <span class=\"mail_link\"></span></strong><a href=\"mailto:david.jr1@northwestern.edu\"></a><a href=\"mailto:david.jr1@northwestern.edu\">Prof. David Demeter</a></p>\r\n<p><strong>COURSE INSTRUCTOR : </strong><a href=\"mailto:david.jr1@northwestern.edu\">Prof. David Demeter</a></p>"
        }
    },
    "497-7": {
        "course_name": "Topics in Combinatorial Optimization",
        "summer_time": "",
        "summer_instructor": "",
        "fall_time": "",
        "fall_instructor": "",
        "winter_time": "",
        "winter_instructor": "",
        "spring_time": "3 -4:20 MW",
        "spring_instructor": "Khuller",
        "other": {
            "Prerequisites": "CS 336",
            "Description": "<p><strong><em>Under Construction - Coming Soon</em></strong></p>\r\n<ul>\r\n<li><strong><em>This course fulfills the Project area.</em></strong></li>\r\n</ul>\r\n<p><strong>REFERENCE TEXTBOOKS: N/A</strong><br/><strong>REQUIRED TEXTBOOK: N/A<br/></strong></p>\r\n<p><strong>COURSE COORDINATORS: </strong>Samir Khuller<span></span></p>\r\n<p><strong>COURSE INSTRUCTOR : </strong><a href=\"emailto:samir.khuller@northwestern.edu\">Prof. Khuller</a><span></span></p>\r\n<p><strong>COURSE GOALS:<br/></strong><strong><br/></strong></p>"
        }
    }
}